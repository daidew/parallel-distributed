	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0
	.globl	__Z15mnist_util_mainiPPc        ; -- Begin function _Z15mnist_util_mainiPPc
	.p2align	2
__Z15mnist_util_mainiPPc:               ; @_Z15mnist_util_mainiPPc
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	x29, x30, [sp, #144]            ; 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	w0, [x29, #-4]
	stur	x1, [x29, #-16]
	ldur	w0, [x29, #-4]
	ldur	x1, [x29, #-16]
	add	x8, sp, #8
	bl	__ZL10parse_argsiPPc
	ldr	w8, [sp, #124]
	subs	w8, w8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB0_2
	b	LBB0_1
LBB0_1:
	ldr	w8, [sp, #120]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB0_3
	b	LBB0_2
LBB0_2:
	ldur	x8, [x29, #-16]
	ldr	x0, [x8]
	bl	__ZL5usagePKc
	b	LBB0_3
LBB0_3:
	bl	__ZL4bailv
	mov	w0, #1
	mov	w1, #2
	bl	__ZL5min_iii
	mov	w0, #3
	mov	w1, #4
	bl	__ZL5max_iii
	mov	w8, #39322
	movk	w8, #16281, lsl #16
	fmov	s0, w8
	mov	w8, #39322
	movk	w8, #16473, lsl #16
	fmov	s1, w8
	bl	__ZL5min_rff
	mov	w8, #13107
	movk	w8, #16563, lsl #16
	fmov	s0, w8
	mov	w8, #39322
	movk	w8, #16633, lsl #16
	fmov	s1, w8
	bl	__ZL5max_rff
	mov	w0, #0
	.cfi_def_cfa wsp, 160
	ldp	x29, x30, [sp, #144]            ; 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL10parse_argsiPPc
__ZL10parse_argsiPPc:                   ; @_ZL10parse_argsiPPc
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #96]             ; 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	mov	x8, x0
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	adrp	x9, _optarg@GOTPAGE
	ldr	x9, [x9, _optarg@GOTPAGEOFF]
	str	x9, [sp, #40]                   ; 8-byte Folded Spill
	adrp	x9, ___stderrp@GOTPAGE
	ldr	x9, [x9, ___stderrp@GOTPAGEOFF]
	str	x9, [sp, #48]                   ; 8-byte Folded Spill
	stur	w8, [x29, #-4]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-16]
	ldr	x8, [x8]
	stur	x8, [x29, #-24]
	bl	__ZN11cmdline_optC1Ev
	b	LBB1_1
LBB1_1:                                 ; =>This Inner Loop Header: Depth=1
	sub	x4, x29, #28
	stur	wzr, [x29, #-28]
	ldur	w0, [x29, #-4]
	ldur	x1, [x29, #-16]
	adrp	x2, l_.str@PAGE
	add	x2, x2, l_.str@PAGEOFF
	adrp	x3, __ZL12long_options@PAGE
	add	x3, x3, __ZL12long_options@PAGEOFF
	bl	_getopt_long
	stur	w0, [x29, #-32]
	ldur	w8, [x29, #-32]
	adds	w8, w8, #1
	cset	w8, ne
	tbnz	w8, #0, LBB1_3
	b	LBB1_2
LBB1_2:
	b	LBB1_45
LBB1_3:                                 ;   in Loop: Header=BB1_1 Depth=1
	ldur	w8, [x29, #-32]
	str	w8, [sp, #28]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB1_11
	b	LBB1_4
LBB1_4:                                 ;   in Loop: Header=BB1_1 Depth=1
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	subs	w8, w8, #97
	cset	w8, eq
	tbnz	w8, #0, LBB1_39
	b	LBB1_5
LBB1_5:                                 ;   in Loop: Header=BB1_1 Depth=1
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	subs	w8, w8, #98
	cset	w8, eq
	tbnz	w8, #0, LBB1_38
	b	LBB1_6
LBB1_6:                                 ;   in Loop: Header=BB1_1 Depth=1
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	subs	w8, w8, #100
	cset	w8, eq
	tbnz	w8, #0, LBB1_37
	b	LBB1_7
LBB1_7:                                 ;   in Loop: Header=BB1_1 Depth=1
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	subs	w8, w8, #104
	cset	w8, eq
	tbnz	w8, #0, LBB1_42
	b	LBB1_8
LBB1_8:                                 ;   in Loop: Header=BB1_1 Depth=1
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	subs	w8, w8, #108
	cset	w8, eq
	tbnz	w8, #0, LBB1_40
	b	LBB1_9
LBB1_9:                                 ;   in Loop: Header=BB1_1 Depth=1
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	subs	w8, w8, #109
	cset	w8, eq
	tbnz	w8, #0, LBB1_41
	b	LBB1_10
LBB1_10:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	subs	w8, w8, #118
	cset	w8, eq
	tbnz	w8, #0, LBB1_36
	b	LBB1_43
LBB1_11:                                ;   in Loop: Header=BB1_1 Depth=1
	ldursw	x8, [x29, #-28]
	lsl	x9, x8, #5
	adrp	x8, __ZL12long_options@PAGE
	add	x8, x8, __ZL12long_options@PAGEOFF
	ldr	x8, [x8, x9]
	stur	x8, [x29, #-40]
	ldur	x0, [x29, #-40]
	adrp	x1, l_.str.1@PAGE
	add	x1, x1, l_.str.1@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB1_13
	b	LBB1_12
LBB1_12:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atol
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	mov	x8, x0
	str	w8, [x9, #36]
	b	LBB1_35
LBB1_13:                                ;   in Loop: Header=BB1_1 Depth=1
	ldur	x0, [x29, #-40]
	adrp	x1, l_.str.2@PAGE
	add	x1, x1, l_.str.2@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB1_15
	b	LBB1_14
LBB1_14:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atol
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	mov	x8, x0
	str	w8, [x9, #40]
	b	LBB1_34
LBB1_15:                                ;   in Loop: Header=BB1_1 Depth=1
	ldur	x0, [x29, #-40]
	adrp	x1, l_.str.3@PAGE
	add	x1, x1, l_.str.3@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB1_17
	b	LBB1_16
LBB1_16:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atol
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	x0, [x8, #48]
	b	LBB1_33
LBB1_17:                                ;   in Loop: Header=BB1_1 Depth=1
	ldur	x0, [x29, #-40]
	adrp	x1, l_.str.4@PAGE
	add	x1, x1, l_.str.4@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB1_19
	b	LBB1_18
LBB1_18:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atol
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	x0, [x8, #56]
	b	LBB1_32
LBB1_19:                                ;   in Loop: Header=BB1_1 Depth=1
	ldur	x0, [x29, #-40]
	adrp	x1, l_.str.5@PAGE
	add	x1, x1, l_.str.5@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB1_21
	b	LBB1_20
LBB1_20:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atol
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	x0, [x8, #64]
	b	LBB1_31
LBB1_21:                                ;   in Loop: Header=BB1_1 Depth=1
	ldur	x0, [x29, #-40]
	adrp	x1, l_.str.6@PAGE
	add	x1, x1, l_.str.6@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB1_23
	b	LBB1_22
LBB1_22:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atol
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	x0, [x8, #72]
	b	LBB1_30
LBB1_23:                                ;   in Loop: Header=BB1_1 Depth=1
	ldur	x0, [x29, #-40]
	adrp	x1, l_.str.7@PAGE
	add	x1, x1, l_.str.7@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB1_25
	b	LBB1_24
LBB1_24:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atoi
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	w0, [x8, #80]
	b	LBB1_29
LBB1_25:                                ;   in Loop: Header=BB1_1 Depth=1
	ldur	x0, [x29, #-40]
	adrp	x1, l_.str.8@PAGE
	add	x1, x1, l_.str.8@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB1_27
	b	LBB1_26
LBB1_26:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_strdup
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	x0, [x8, #104]
	b	LBB1_28
LBB1_27:
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	ldur	x8, [x29, #-40]
	mov	x9, sp
	adrp	x10, l_.str.10@PAGE
	add	x10, x10, l_.str.10@PAGEOFF
	str	x10, [x9]
	mov	x10, #297
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x1, l_.str.9@PAGE
	add	x1, x1, l_.str.9@PAGEOFF
	bl	_fprintf
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	mov	w8, #1
	str	w8, [x9, #116]
	b	LBB1_52
LBB1_28:                                ;   in Loop: Header=BB1_1 Depth=1
	b	LBB1_29
LBB1_29:                                ;   in Loop: Header=BB1_1 Depth=1
	b	LBB1_30
LBB1_30:                                ;   in Loop: Header=BB1_1 Depth=1
	b	LBB1_31
LBB1_31:                                ;   in Loop: Header=BB1_1 Depth=1
	b	LBB1_32
LBB1_32:                                ;   in Loop: Header=BB1_1 Depth=1
	b	LBB1_33
LBB1_33:                                ;   in Loop: Header=BB1_1 Depth=1
	b	LBB1_34
LBB1_34:                                ;   in Loop: Header=BB1_1 Depth=1
	b	LBB1_35
LBB1_35:                                ;   in Loop: Header=BB1_1 Depth=1
	b	LBB1_44
LBB1_36:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atoi
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	w0, [x8]
	b	LBB1_44
LBB1_37:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_strdup
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	x0, [x8, #8]
	b	LBB1_44
LBB1_38:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atoi
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	w0, [x8, #32]
	b	LBB1_44
LBB1_39:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_strdup
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	x0, [x8, #88]
	b	LBB1_44
LBB1_40:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atof
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	fcvt	s0, d0
	str	s0, [x8, #16]
	b	LBB1_44
LBB1_41:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_atol
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	x0, [x8, #24]
	b	LBB1_44
LBB1_42:                                ;   in Loop: Header=BB1_1 Depth=1
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	mov	w8, #1
	str	w8, [x9, #112]
	b	LBB1_44
LBB1_43:
	ldur	x0, [x29, #-24]
	bl	__ZL5usagePKc
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	mov	w8, #1
	str	w8, [x9, #116]
	b	LBB1_52
LBB1_44:                                ;   in Loop: Header=BB1_1 Depth=1
	b	LBB1_1
LBB1_45:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w8, [x8, #32]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB1_47
	b	LBB1_46
LBB1_46:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x9, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x0, [x9]
	ldr	w9, [x8, #32]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	mov	x8, #64
	str	x8, [x9, #8]
	adrp	x1, l_.str.11@PAGE
	add	x1, x1, l_.str.11@PAGEOFF
	bl	_fprintf
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	mov	w8, #1
	str	w8, [x9, #116]
	b	LBB1_52
LBB1_47:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x0, [x8, #88]
	bl	__ZL10parse_algoPKc
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	w0, [x8, #96]
	ldr	w8, [x8, #96]
	subs	w8, w8, #4
	cset	w8, ne
	tbnz	w8, #0, LBB1_49
	b	LBB1_48
LBB1_48:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x9, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x0, [x9]
	ldr	x8, [x8, #88]
	mov	x9, sp
	str	x8, [x9]
	adrp	x1, l_.str.12@PAGE
	add	x1, x1, l_.str.12@PAGEOFF
	bl	_fprintf
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	mov	w8, #1
	str	w8, [x9, #116]
	b	LBB1_52
LBB1_49:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x0, [x8, #88]
	ldr	w1, [x8, #96]
	bl	__ZL12algo_is_cudaPKc6algo_t
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	str	w0, [x8, #100]
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB1_51
	b	LBB1_50
LBB1_50:
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x0, [x8]
	adrp	x1, l_.str.13@PAGE
	add	x1, x1, l_.str.13@PAGEOFF
	bl	_fprintf
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	mov	w8, #1
	str	w8, [x9, #116]
	b	LBB1_52
LBB1_51:
	b	LBB1_52
LBB1_52:
	.cfi_def_cfa wsp, 112
	ldp	x29, x30, [sp, #96]             ; 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL5usagePKc
__ZL5usagePKc:                          ; @_ZL5usagePKc
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #288
	.cfi_def_cfa_offset 288
	stp	x28, x27, [sp, #256]            ; 16-byte Folded Spill
	stp	x29, x30, [sp, #272]            ; 16-byte Folded Spill
	add	x29, sp, #272
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	stur	x0, [x29, #-24]
	add	x0, sp, #128
	bl	__ZN11cmdline_optC1Ev
	adrp	x8, ___stderrp@GOTPAGE
	ldr	x8, [x8, ___stderrp@GOTPAGEOFF]
	ldr	x0, [x8]
	ldur	x5, [x29, #-24]
	ldr	x4, [sp, #136]
	ldr	x3, [sp, #152]
	ldr	w8, [sp, #160]
                                        ; implicit-def: $x2
	mov	x2, x8
	ldr	x1, [sp, #216]
	ldr	w8, [sp, #128]
                                        ; implicit-def: $x17
	mov	x17, x8
	ldr	s0, [sp, #144]
	fcvt	d0, s0
	ldr	w8, [sp, #164]
                                        ; implicit-def: $x16
	mov	x16, x8
	ldr	w8, [sp, #168]
                                        ; implicit-def: $x15
	mov	x15, x8
	ldr	x14, [sp, #176]
	ldr	x13, [sp, #192]
	ldr	x12, [sp, #200]
	ldr	x11, [sp, #184]
	ldr	w8, [sp, #208]
                                        ; implicit-def: $x10
	mov	x10, x8
	ldr	x8, [sp, #232]
	mov	x9, sp
	str	x5, [x9]
	str	x4, [x9, #8]
	str	x3, [x9, #16]
	str	x2, [x9, #24]
	str	x1, [x9, #32]
	str	x17, [x9, #40]
	str	d0, [x9, #48]
	str	x16, [x9, #56]
	str	x15, [x9, #64]
	str	x14, [x9, #72]
	str	x13, [x9, #80]
	str	x12, [x9, #88]
	str	x11, [x9, #96]
	str	x10, [x9, #104]
	str	x8, [x9, #112]
	adrp	x1, l_.str.28@PAGE
	add	x1, x1, l_.str.28@PAGEOFF
	bl	_fprintf
	mov	w0, #1
	bl	_exit
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL4bailv
__ZL4bailv:                             ; @_ZL4bailv
	.cfi_startproc
; %bb.0:
	stp	x29, x30, [sp, #-16]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w0, #1
	bl	_exit
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL5min_iii
__ZL5min_iii:                           ; @_ZL5min_iii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, #12]
	str	w1, [sp, #8]
	ldr	w8, [sp, #12]
	ldr	w9, [sp, #8]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB4_2
	b	LBB4_1
LBB4_1:
	ldr	w8, [sp, #12]
	str	w8, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB4_3
LBB4_2:
	ldr	w8, [sp, #8]
	str	w8, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB4_3
LBB4_3:
	ldr	w0, [sp, #4]                    ; 4-byte Folded Reload
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL5max_iii
__ZL5max_iii:                           ; @_ZL5max_iii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, #12]
	str	w1, [sp, #8]
	ldr	w8, [sp, #12]
	ldr	w9, [sp, #8]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB5_2
	b	LBB5_1
LBB5_1:
	ldr	w8, [sp, #8]
	str	w8, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB5_3
LBB5_2:
	ldr	w8, [sp, #12]
	str	w8, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB5_3
LBB5_3:
	ldr	w0, [sp, #4]                    ; 4-byte Folded Reload
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL5min_rff
__ZL5min_rff:                           ; @_ZL5min_rff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, #12]
	str	s1, [sp, #8]
	ldr	s0, [sp, #12]
	ldr	s1, [sp, #8]
	fcmp	s0, s1
	cset	w8, pl
	tbnz	w8, #0, LBB6_2
	b	LBB6_1
LBB6_1:
	ldr	w8, [sp, #12]
	str	w8, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB6_3
LBB6_2:
	ldr	w8, [sp, #8]
	str	w8, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB6_3
LBB6_3:
	ldr	w8, [sp, #4]                    ; 4-byte Folded Reload
	fmov	s0, w8
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL5max_rff
__ZL5max_rff:                           ; @_ZL5max_rff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, #12]
	str	s1, [sp, #8]
	ldr	s0, [sp, #12]
	ldr	s1, [sp, #8]
	fcmp	s0, s1
	cset	w8, pl
	tbnz	w8, #0, LBB7_2
	b	LBB7_1
LBB7_1:
	ldr	w8, [sp, #8]
	str	w8, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB7_3
LBB7_2:
	ldr	w8, [sp, #12]
	str	w8, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB7_3
LBB7_3:
	ldr	w8, [sp, #4]                    ; 4-byte Folded Reload
	fmov	s0, w8
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN11cmdline_optC1Ev           ; -- Begin function _ZN11cmdline_optC1Ev
	.weak_def_can_be_hidden	__ZN11cmdline_optC1Ev
	.p2align	2
__ZN11cmdline_optC1Ev:                  ; @_ZN11cmdline_optC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL10parse_algoPKc
__ZL10parse_algoPKc:                    ; @_ZL10parse_algoPKc
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp]
	ldr	x0, [sp]
	adrp	x1, l_.str.15@PAGE
	add	x1, x1, l_.str.15@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB9_2
	b	LBB9_1
LBB9_1:
	stur	wzr, [x29, #-4]
	b	LBB9_9
LBB9_2:
	ldr	x0, [sp]
	adrp	x1, l_.str.24@PAGE
	add	x1, x1, l_.str.24@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB9_4
	b	LBB9_3
LBB9_3:
	mov	w8, #2
	stur	w8, [x29, #-4]
	b	LBB9_9
LBB9_4:
	ldr	x0, [sp]
	adrp	x1, l_.str.25@PAGE
	add	x1, x1, l_.str.25@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB9_6
	b	LBB9_5
LBB9_5:
	mov	w8, #3
	stur	w8, [x29, #-4]
	b	LBB9_9
LBB9_6:
	ldr	x0, [sp]
	adrp	x1, l_.str.26@PAGE
	add	x1, x1, l_.str.26@PAGEOFF
	bl	_strcmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB9_8
	b	LBB9_7
LBB9_7:
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	LBB9_9
LBB9_8:
	mov	w8, #4
	stur	w8, [x29, #-4]
	b	LBB9_9
LBB9_9:
	ldur	w0, [x29, #-4]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL12algo_is_cudaPKc6algo_t
__ZL12algo_is_cudaPKc6algo_t:           ; @_ZL12algo_is_cudaPKc6algo_t
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #16]
	str	w1, [sp, #12]
	ldr	x0, [sp, #16]
	adrp	x1, l_.str.27@PAGE
	add	x1, x1, l_.str.27@PAGEOFF
	mov	x2, #4
	bl	_strncmp
	subs	w8, w0, #0
	cset	w8, ne
	tbnz	w8, #0, LBB10_2
	b	LBB10_1
LBB10_1:
	mov	w8, #1
	stur	w8, [x29, #-4]
	b	LBB10_3
LBB10_2:
	stur	wzr, [x29, #-4]
	b	LBB10_3
LBB10_3:
	ldur	w0, [x29, #-4]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN11cmdline_optC2Ev           ; -- Begin function _ZN11cmdline_optC2Ev
	.weak_def_can_be_hidden	__ZN11cmdline_optC2Ev
	.p2align	2
__ZN11cmdline_optC2Ev:                  ; @_ZN11cmdline_optC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	mov	w8, #1
	str	w8, [x0]
	adrp	x8, l_.str.14@PAGE
	add	x8, x8, l_.str.14@PAGEOFF
	str	x8, [x0, #8]
	fmov	s0, #1.00000000
	str	s0, [x0, #16]
	mov	x8, #14
	str	x8, [x0, #24]
	mov	w8, #64
	str	w8, [x0, #32]
	mov	w8, #-1
	str	w8, [x0, #36]
	str	w8, [x0, #40]
	mov	x8, #10
	str	x8, [x0, #48]
	mov	x8, #35675
	movk	x8, #29358, lsl #16
	movk	x8, #10635, lsl #32
	str	x8, [x0, #56]
	mov	x8, #29074
	movk	x8, #14568, lsl #16
	movk	x8, #13222, lsl #32
	str	x8, [x0, #64]
	mov	x8, #12217
	movk	x8, #59057, lsl #16
	movk	x8, #15806, lsl #32
	str	x8, [x0, #72]
	str	wzr, [x0, #80]
	adrp	x8, l_.str.15@PAGE
	add	x8, x8, l_.str.15@PAGEOFF
	str	x8, [x0, #88]
	str	wzr, [x0, #100]
	mov	w8, #4
	str	w8, [x0, #96]
	adrp	x8, l_.str.16@PAGE
	add	x8, x8, l_.str.16@PAGEOFF
	str	x8, [x0, #104]
	str	wzr, [x0, #112]
	str	wzr, [x0, #116]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z11tensor_mainiPPc            ; -- Begin function _Z11tensor_mainiPPc
	.p2align	2
__Z11tensor_mainiPPc:                   ; @_Z11tensor_mainiPPc
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #9, lsl #12             ; =36864
	sub	sp, sp, #3520
	sub	x8, x29, #32
	add	x9, sp, #9, lsl #12             ; =36864
	add	x9, x9, #3212
	str	x9, [sp, #40]                   ; 8-byte Folded Spill
	str	w0, [x8, #12]
	str	x1, [x8]
	ldr	w0, [x8, #12]
	ldr	x1, [x8]
	sub	x8, x29, #152
	bl	__ZL10parse_argsiPPc
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	mov	w1, #2
	str	w1, [sp, #24]                   ; 4-byte Folded Spill
	str	w1, [x8, #168]
	str	w1, [x8, #164]
	sub	x0, x29, #172
	str	x0, [sp, #32]                   ; 8-byte Folded Spill
	fmov	s0, #1.00000000
	str	s0, [sp, #28]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE10init_constEif
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #28]                   ; 4-byte Folded Reload
	sub	x0, x29, #192
	bl	__ZN6tensorIfLi2ELi2ELi1ELi1EE10init_constEif
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #28]                   ; 4-byte Folded Reload
	sub	x0, x29, #228
	bl	__ZN6tensorIfLi2ELi2ELi2ELi1EE10init_constEif
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #28]                   ; 4-byte Folded Reload
	add	x0, sp, #9, lsl #12             ; =36864
	add	x0, x0, #3240
	bl	__ZN6tensorIfLi2ELi2ELi2ELi2EE10init_constEif
	ldr	x1, [sp, #32]                   ; 8-byte Folded Reload
	mov	x0, x1
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	fcvt	s0, d0
	str	s0, [x8, #24]
	ldr	s0, [x8, #24]
	fmov	s1, #2.00000000
	fcmp	s0, s1
	cset	w8, eq
	tbnz	w8, #0, LBB12_2
	b	LBB12_1
LBB12_1:
	adrp	x0, l___func__._Z11tensor_mainiPPc@PAGE
	add	x0, x0, l___func__._Z11tensor_mainiPPc@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #420
	adrp	x3, l_.str.30@PAGE
	add	x3, x3, l_.str.30@PAGEOFF
	bl	___assert_rtn
LBB12_2:
	b	LBB12_3
LBB12_3:
	sub	x1, x29, #192
	mov	x0, x1
	bl	__ZN6tensorIfLi2ELi2ELi1ELi1EE3dotERS0_
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	fcvt	s0, d0
	str	s0, [x8, #20]
	ldr	s0, [x8, #20]
	fmov	s1, #4.00000000
	fcmp	s0, s1
	cset	w8, eq
	tbnz	w8, #0, LBB12_5
	b	LBB12_4
LBB12_4:
	adrp	x0, l___func__._Z11tensor_mainiPPc@PAGE
	add	x0, x0, l___func__._Z11tensor_mainiPPc@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #422
	adrp	x3, l_.str.31@PAGE
	add	x3, x3, l_.str.31@PAGEOFF
	bl	___assert_rtn
LBB12_5:
	b	LBB12_6
LBB12_6:
	sub	x1, x29, #228
	mov	x0, x1
	bl	__ZN6tensorIfLi2ELi2ELi2ELi1EE3dotERS0_
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	fcvt	s0, d0
	str	s0, [x8, #16]
	ldr	s0, [x8, #16]
	fmov	s1, #8.00000000
	fcmp	s0, s1
	cset	w8, eq
	tbnz	w8, #0, LBB12_8
	b	LBB12_7
LBB12_7:
	adrp	x0, l___func__._Z11tensor_mainiPPc@PAGE
	add	x0, x0, l___func__._Z11tensor_mainiPPc@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #424
	adrp	x3, l_.str.32@PAGE
	add	x3, x3, l_.str.32@PAGEOFF
	bl	___assert_rtn
LBB12_8:
	b	LBB12_9
LBB12_9:
	add	x1, sp, #9, lsl #12             ; =36864
	add	x1, x1, #3240
	mov	x0, x1
	bl	__ZN6tensorIfLi2ELi2ELi2ELi2EE3dotERS0_
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	fcvt	s0, d0
	str	s0, [x8, #12]
	ldr	s0, [x8, #12]
	fmov	s1, #16.00000000
	fcmp	s0, s1
	cset	w8, eq
	tbnz	w8, #0, LBB12_11
	b	LBB12_10
LBB12_10:
	adrp	x0, l___func__._Z11tensor_mainiPPc@PAGE
	add	x0, x0, l___func__._Z11tensor_mainiPPc@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #426
	adrp	x3, l_.str.33@PAGE
	add	x3, x3, l_.str.33@PAGEOFF
	bl	___assert_rtn
LBB12_11:
	b	LBB12_12
LBB12_12:
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	mov	w8, #10000
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	str	w8, [x9, #8]
	mov	w8, #3
	str	w8, [x9, #4]
	mov	w8, #8
	str	w8, [x9]
	add	x0, sp, #9, lsl #12             ; =36864
	add	x0, x0, #3200
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	mov	x1, #12345
	bl	__ZN9rnd_gen_t4seedEy
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x2, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, sp, #60
	fmov	s0, #3.00000000
	fmov	s1, #8.00000000
	bl	__ZN6tensorIfLi10000ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tff
	str	xzr, [sp, #48]
	b	LBB12_13
LBB12_13:                               ; =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #48]
	mov	x9, #10000
	subs	x8, x8, x9
	cset	w8, ge
	tbnz	w8, #0, LBB12_22
	b	LBB12_14
LBB12_14:                               ;   in Loop: Header=BB12_13 Depth=1
	ldr	x8, [sp, #48]
	mov	x1, x8
	add	x0, sp, #60
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi10000ELi1ELi1ELi1EEclEiiii
	ldr	s1, [x0]
	fmov	s0, #3.00000000
	fcmp	s0, s1
	cset	w8, ls
	tbnz	w8, #0, LBB12_16
	b	LBB12_15
LBB12_15:
	adrp	x0, l___func__._Z11tensor_mainiPPc@PAGE
	add	x0, x0, l___func__._Z11tensor_mainiPPc@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #436
	adrp	x3, l_.str.34@PAGE
	add	x3, x3, l_.str.34@PAGEOFF
	bl	___assert_rtn
LBB12_16:                               ;   in Loop: Header=BB12_13 Depth=1
	b	LBB12_17
LBB12_17:                               ;   in Loop: Header=BB12_13 Depth=1
	ldr	x8, [sp, #48]
	mov	x1, x8
	add	x0, sp, #60
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi10000ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	fmov	s1, #8.00000000
	fcmp	s0, s1
	cset	w8, mi
	tbnz	w8, #0, LBB12_19
	b	LBB12_18
LBB12_18:
	adrp	x0, l___func__._Z11tensor_mainiPPc@PAGE
	add	x0, x0, l___func__._Z11tensor_mainiPPc@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #437
	adrp	x3, l_.str.35@PAGE
	add	x3, x3, l_.str.35@PAGEOFF
	bl	___assert_rtn
LBB12_19:                               ;   in Loop: Header=BB12_13 Depth=1
	b	LBB12_20
LBB12_20:                               ;   in Loop: Header=BB12_13 Depth=1
	b	LBB12_21
LBB12_21:                               ;   in Loop: Header=BB12_13 Depth=1
	ldr	x8, [sp, #48]
	add	x8, x8, #1
	str	x8, [sp, #48]
	b	LBB12_13
LBB12_22:
	mov	w0, #0
	add	sp, sp, #9, lsl #12             ; =36864
	add	sp, sp, #3520
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EE10init_constEif ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EE10init_constEif
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EE10init_constEif
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EE10init_constEif: ; @_ZN6tensorIfLi2ELi1ELi1ELi1EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=2 N1=1 N2=1 N3=1
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB13_1
LBB13_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB13_3 Depth 2
                                        ;       Child Loop BB13_5 Depth 3
                                        ;         Child Loop BB13_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB13_16
	b	LBB13_2
LBB13_2:                                ;   in Loop: Header=BB13_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB13_3
LBB13_3:                                ;   Parent Loop BB13_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB13_5 Depth 3
                                        ;         Child Loop BB13_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB13_14
	b	LBB13_4
LBB13_4:                                ;   in Loop: Header=BB13_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB13_5
LBB13_5:                                ;   Parent Loop BB13_1 Depth=1
                                        ;     Parent Loop BB13_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB13_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB13_12
	b	LBB13_6
LBB13_6:                                ;   in Loop: Header=BB13_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB13_7
LBB13_7:                                ;   Parent Loop BB13_1 Depth=1
                                        ;     Parent Loop BB13_3 Depth=2
                                        ;       Parent Loop BB13_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB13_10
	b	LBB13_8
LBB13_8:                                ;   in Loop: Header=BB13_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB13_9
LBB13_9:                                ;   in Loop: Header=BB13_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB13_7
LBB13_10:                               ;   in Loop: Header=BB13_5 Depth=3
	b	LBB13_11
LBB13_11:                               ;   in Loop: Header=BB13_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB13_5
LBB13_12:                               ;   in Loop: Header=BB13_3 Depth=2
	b	LBB13_13
LBB13_13:                               ;   in Loop: Header=BB13_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB13_3
LBB13_14:                               ;   in Loop: Header=BB13_1 Depth=1
	b	LBB13_15
LBB13_15:                               ;   in Loop: Header=BB13_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB13_1
LBB13_16:
	; InlineAsm Start
	; init_const ends N0=2 N1=1 N2=1 N3=1
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi1ELi1EE10init_constEif ; -- Begin function _ZN6tensorIfLi2ELi2ELi1ELi1EE10init_constEif
	.weak_definition	__ZN6tensorIfLi2ELi2ELi1ELi1EE10init_constEif
	.p2align	2
__ZN6tensorIfLi2ELi2ELi1ELi1EE10init_constEif: ; @_ZN6tensorIfLi2ELi2ELi1ELi1EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi2ELi2ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=2 N1=2 N2=1 N3=1
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB14_1
LBB14_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB14_3 Depth 2
                                        ;       Child Loop BB14_5 Depth 3
                                        ;         Child Loop BB14_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB14_16
	b	LBB14_2
LBB14_2:                                ;   in Loop: Header=BB14_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB14_3
LBB14_3:                                ;   Parent Loop BB14_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB14_5 Depth 3
                                        ;         Child Loop BB14_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB14_14
	b	LBB14_4
LBB14_4:                                ;   in Loop: Header=BB14_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB14_5
LBB14_5:                                ;   Parent Loop BB14_1 Depth=1
                                        ;     Parent Loop BB14_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB14_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB14_12
	b	LBB14_6
LBB14_6:                                ;   in Loop: Header=BB14_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB14_7
LBB14_7:                                ;   Parent Loop BB14_1 Depth=1
                                        ;     Parent Loop BB14_3 Depth=2
                                        ;       Parent Loop BB14_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB14_10
	b	LBB14_8
LBB14_8:                                ;   in Loop: Header=BB14_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi2ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB14_9
LBB14_9:                                ;   in Loop: Header=BB14_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB14_7
LBB14_10:                               ;   in Loop: Header=BB14_5 Depth=3
	b	LBB14_11
LBB14_11:                               ;   in Loop: Header=BB14_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB14_5
LBB14_12:                               ;   in Loop: Header=BB14_3 Depth=2
	b	LBB14_13
LBB14_13:                               ;   in Loop: Header=BB14_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB14_3
LBB14_14:                               ;   in Loop: Header=BB14_1 Depth=1
	b	LBB14_15
LBB14_15:                               ;   in Loop: Header=BB14_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB14_1
LBB14_16:
	; InlineAsm Start
	; init_const ends N0=2 N1=2 N2=1 N3=1
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi2ELi1EE10init_constEif ; -- Begin function _ZN6tensorIfLi2ELi2ELi2ELi1EE10init_constEif
	.weak_definition	__ZN6tensorIfLi2ELi2ELi2ELi1EE10init_constEif
	.p2align	2
__ZN6tensorIfLi2ELi2ELi2ELi1EE10init_constEif: ; @_ZN6tensorIfLi2ELi2ELi2ELi1EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi2ELi2ELi2ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=2 N1=2 N2=2 N3=1
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB15_1
LBB15_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB15_3 Depth 2
                                        ;       Child Loop BB15_5 Depth 3
                                        ;         Child Loop BB15_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB15_16
	b	LBB15_2
LBB15_2:                                ;   in Loop: Header=BB15_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB15_3
LBB15_3:                                ;   Parent Loop BB15_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB15_5 Depth 3
                                        ;         Child Loop BB15_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB15_14
	b	LBB15_4
LBB15_4:                                ;   in Loop: Header=BB15_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB15_5
LBB15_5:                                ;   Parent Loop BB15_1 Depth=1
                                        ;     Parent Loop BB15_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB15_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB15_12
	b	LBB15_6
LBB15_6:                                ;   in Loop: Header=BB15_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB15_7
LBB15_7:                                ;   Parent Loop BB15_1 Depth=1
                                        ;     Parent Loop BB15_3 Depth=2
                                        ;       Parent Loop BB15_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB15_10
	b	LBB15_8
LBB15_8:                                ;   in Loop: Header=BB15_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi2ELi2ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB15_9
LBB15_9:                                ;   in Loop: Header=BB15_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB15_7
LBB15_10:                               ;   in Loop: Header=BB15_5 Depth=3
	b	LBB15_11
LBB15_11:                               ;   in Loop: Header=BB15_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB15_5
LBB15_12:                               ;   in Loop: Header=BB15_3 Depth=2
	b	LBB15_13
LBB15_13:                               ;   in Loop: Header=BB15_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB15_3
LBB15_14:                               ;   in Loop: Header=BB15_1 Depth=1
	b	LBB15_15
LBB15_15:                               ;   in Loop: Header=BB15_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB15_1
LBB15_16:
	; InlineAsm Start
	; init_const ends N0=2 N1=2 N2=2 N3=1
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi2ELi2EE10init_constEif ; -- Begin function _ZN6tensorIfLi2ELi2ELi2ELi2EE10init_constEif
	.weak_definition	__ZN6tensorIfLi2ELi2ELi2ELi2EE10init_constEif
	.p2align	2
__ZN6tensorIfLi2ELi2ELi2ELi2EE10init_constEif: ; @_ZN6tensorIfLi2ELi2ELi2ELi2EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi2ELi2ELi2ELi2EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=2 N1=2 N2=2 N3=2
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB16_1
LBB16_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB16_3 Depth 2
                                        ;       Child Loop BB16_5 Depth 3
                                        ;         Child Loop BB16_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB16_16
	b	LBB16_2
LBB16_2:                                ;   in Loop: Header=BB16_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB16_3
LBB16_3:                                ;   Parent Loop BB16_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB16_5 Depth 3
                                        ;         Child Loop BB16_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB16_14
	b	LBB16_4
LBB16_4:                                ;   in Loop: Header=BB16_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB16_5
LBB16_5:                                ;   Parent Loop BB16_1 Depth=1
                                        ;     Parent Loop BB16_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB16_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB16_12
	b	LBB16_6
LBB16_6:                                ;   in Loop: Header=BB16_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB16_7
LBB16_7:                                ;   Parent Loop BB16_1 Depth=1
                                        ;     Parent Loop BB16_3 Depth=2
                                        ;       Parent Loop BB16_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB16_10
	b	LBB16_8
LBB16_8:                                ;   in Loop: Header=BB16_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi2ELi2ELi2EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB16_9
LBB16_9:                                ;   in Loop: Header=BB16_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB16_7
LBB16_10:                               ;   in Loop: Header=BB16_5 Depth=3
	b	LBB16_11
LBB16_11:                               ;   in Loop: Header=BB16_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB16_5
LBB16_12:                               ;   in Loop: Header=BB16_3 Depth=2
	b	LBB16_13
LBB16_13:                               ;   in Loop: Header=BB16_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB16_3
LBB16_14:                               ;   in Loop: Header=BB16_1 Depth=1
	b	LBB16_15
LBB16_15:                               ;   in Loop: Header=BB16_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB16_1
LBB16_16:
	; InlineAsm Start
	; init_const ends N0=2 N1=2 N2=2 N3=2
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_: ; @_ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB17_2
	b	LBB17_1
LBB17_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB17_2:
	b	LBB17_3
LBB17_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB17_4
LBB17_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB17_6 Depth 2
                                        ;       Child Loop BB17_8 Depth 3
                                        ;         Child Loop BB17_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB17_19
	b	LBB17_5
LBB17_5:                                ;   in Loop: Header=BB17_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB17_6
LBB17_6:                                ;   Parent Loop BB17_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB17_8 Depth 3
                                        ;         Child Loop BB17_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB17_17
	b	LBB17_7
LBB17_7:                                ;   in Loop: Header=BB17_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB17_8
LBB17_8:                                ;   Parent Loop BB17_4 Depth=1
                                        ;     Parent Loop BB17_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB17_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB17_15
	b	LBB17_9
LBB17_9:                                ;   in Loop: Header=BB17_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB17_10
LBB17_10:                               ;   Parent Loop BB17_4 Depth=1
                                        ;     Parent Loop BB17_6 Depth=2
                                        ;       Parent Loop BB17_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB17_13
	b	LBB17_11
LBB17_11:                               ;   in Loop: Header=BB17_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB17_12
LBB17_12:                               ;   in Loop: Header=BB17_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB17_10
LBB17_13:                               ;   in Loop: Header=BB17_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB17_14
LBB17_14:                               ;   in Loop: Header=BB17_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB17_8
LBB17_15:                               ;   in Loop: Header=BB17_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB17_16
LBB17_16:                               ;   in Loop: Header=BB17_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB17_6
LBB17_17:                               ;   in Loop: Header=BB17_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB17_18
LBB17_18:                               ;   in Loop: Header=BB17_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB17_4
LBB17_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi1ELi1EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi2ELi2ELi1ELi1EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi2ELi2ELi1ELi1EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi2ELi2ELi1ELi1EE3dotERS0_: ; @_ZN6tensorIfLi2ELi2ELi1ELi1EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB18_2
	b	LBB18_1
LBB18_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB18_2:
	b	LBB18_3
LBB18_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB18_4
LBB18_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB18_6 Depth 2
                                        ;       Child Loop BB18_8 Depth 3
                                        ;         Child Loop BB18_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB18_19
	b	LBB18_5
LBB18_5:                                ;   in Loop: Header=BB18_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB18_6
LBB18_6:                                ;   Parent Loop BB18_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB18_8 Depth 3
                                        ;         Child Loop BB18_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB18_17
	b	LBB18_7
LBB18_7:                                ;   in Loop: Header=BB18_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB18_8
LBB18_8:                                ;   Parent Loop BB18_4 Depth=1
                                        ;     Parent Loop BB18_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB18_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB18_15
	b	LBB18_9
LBB18_9:                                ;   in Loop: Header=BB18_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB18_10
LBB18_10:                               ;   Parent Loop BB18_4 Depth=1
                                        ;     Parent Loop BB18_6 Depth=2
                                        ;       Parent Loop BB18_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB18_13
	b	LBB18_11
LBB18_11:                               ;   in Loop: Header=BB18_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi2ELi2ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi2ELi2ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB18_12
LBB18_12:                               ;   in Loop: Header=BB18_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB18_10
LBB18_13:                               ;   in Loop: Header=BB18_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB18_14
LBB18_14:                               ;   in Loop: Header=BB18_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB18_8
LBB18_15:                               ;   in Loop: Header=BB18_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB18_16
LBB18_16:                               ;   in Loop: Header=BB18_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB18_6
LBB18_17:                               ;   in Loop: Header=BB18_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB18_18
LBB18_18:                               ;   in Loop: Header=BB18_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB18_4
LBB18_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi2ELi1EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi2ELi2ELi2ELi1EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi2ELi2ELi2ELi1EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi2ELi2ELi2ELi1EE3dotERS0_: ; @_ZN6tensorIfLi2ELi2ELi2ELi1EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB19_2
	b	LBB19_1
LBB19_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB19_2:
	b	LBB19_3
LBB19_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB19_4
LBB19_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB19_6 Depth 2
                                        ;       Child Loop BB19_8 Depth 3
                                        ;         Child Loop BB19_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB19_19
	b	LBB19_5
LBB19_5:                                ;   in Loop: Header=BB19_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB19_6
LBB19_6:                                ;   Parent Loop BB19_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB19_8 Depth 3
                                        ;         Child Loop BB19_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB19_17
	b	LBB19_7
LBB19_7:                                ;   in Loop: Header=BB19_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB19_8
LBB19_8:                                ;   Parent Loop BB19_4 Depth=1
                                        ;     Parent Loop BB19_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB19_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB19_15
	b	LBB19_9
LBB19_9:                                ;   in Loop: Header=BB19_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB19_10
LBB19_10:                               ;   Parent Loop BB19_4 Depth=1
                                        ;     Parent Loop BB19_6 Depth=2
                                        ;       Parent Loop BB19_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB19_13
	b	LBB19_11
LBB19_11:                               ;   in Loop: Header=BB19_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi2ELi2ELi2ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi2ELi2ELi2ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB19_12
LBB19_12:                               ;   in Loop: Header=BB19_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB19_10
LBB19_13:                               ;   in Loop: Header=BB19_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB19_14
LBB19_14:                               ;   in Loop: Header=BB19_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB19_8
LBB19_15:                               ;   in Loop: Header=BB19_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB19_16
LBB19_16:                               ;   in Loop: Header=BB19_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB19_6
LBB19_17:                               ;   in Loop: Header=BB19_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB19_18
LBB19_18:                               ;   in Loop: Header=BB19_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB19_4
LBB19_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi2ELi2EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi2ELi2ELi2ELi2EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi2ELi2ELi2ELi2EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi2ELi2ELi2ELi2EE3dotERS0_: ; @_ZN6tensorIfLi2ELi2ELi2ELi2EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB20_2
	b	LBB20_1
LBB20_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB20_2:
	b	LBB20_3
LBB20_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB20_4
LBB20_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB20_6 Depth 2
                                        ;       Child Loop BB20_8 Depth 3
                                        ;         Child Loop BB20_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB20_19
	b	LBB20_5
LBB20_5:                                ;   in Loop: Header=BB20_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB20_6
LBB20_6:                                ;   Parent Loop BB20_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB20_8 Depth 3
                                        ;         Child Loop BB20_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB20_17
	b	LBB20_7
LBB20_7:                                ;   in Loop: Header=BB20_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB20_8
LBB20_8:                                ;   Parent Loop BB20_4 Depth=1
                                        ;     Parent Loop BB20_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB20_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB20_15
	b	LBB20_9
LBB20_9:                                ;   in Loop: Header=BB20_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB20_10
LBB20_10:                               ;   Parent Loop BB20_4 Depth=1
                                        ;     Parent Loop BB20_6 Depth=2
                                        ;       Parent Loop BB20_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB20_13
	b	LBB20_11
LBB20_11:                               ;   in Loop: Header=BB20_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi2ELi2ELi2ELi2EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi2ELi2ELi2ELi2EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB20_12
LBB20_12:                               ;   in Loop: Header=BB20_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB20_10
LBB20_13:                               ;   in Loop: Header=BB20_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB20_14
LBB20_14:                               ;   in Loop: Header=BB20_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB20_8
LBB20_15:                               ;   in Loop: Header=BB20_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB20_16
LBB20_16:                               ;   in Loop: Header=BB20_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB20_6
LBB20_17:                               ;   in Loop: Header=BB20_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB20_18
LBB20_18:                               ;   in Loop: Header=BB20_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB20_4
LBB20_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN9rnd_gen_t4seedEy           ; -- Begin function _ZN9rnd_gen_t4seedEy
	.weak_definition	__ZN9rnd_gen_t4seedEy
	.p2align	2
__ZN9rnd_gen_t4seedEy:                  ; @_ZN9rnd_gen_t4seedEy
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x9, [sp, #8]
	ldr	x8, [sp]
	str	x8, [x9]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10000ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi10000ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi10000ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi10000ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tff: ; @_ZN6tensorIfLi10000ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi10000ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB22_1
LBB22_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB22_3 Depth 2
                                        ;       Child Loop BB22_5 Depth 3
                                        ;         Child Loop BB22_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB22_16
	b	LBB22_2
LBB22_2:                                ;   in Loop: Header=BB22_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB22_3
LBB22_3:                                ;   Parent Loop BB22_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB22_5 Depth 3
                                        ;         Child Loop BB22_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB22_14
	b	LBB22_4
LBB22_4:                                ;   in Loop: Header=BB22_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB22_5
LBB22_5:                                ;   Parent Loop BB22_1 Depth=1
                                        ;     Parent Loop BB22_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB22_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB22_12
	b	LBB22_6
LBB22_6:                                ;   in Loop: Header=BB22_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB22_7
LBB22_7:                                ;   Parent Loop BB22_1 Depth=1
                                        ;     Parent Loop BB22_3 Depth=2
                                        ;       Parent Loop BB22_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB22_10
	b	LBB22_8
LBB22_8:                                ;   in Loop: Header=BB22_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvtzs	x1, s0
	ldur	s0, [x29, #-32]
	fcvtzs	x2, s0
	bl	__ZN9rnd_gen_t5randiEll
	scvtf	s0, x0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10000ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB22_9
LBB22_9:                                ;   in Loop: Header=BB22_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB22_7
LBB22_10:                               ;   in Loop: Header=BB22_5 Depth=3
	b	LBB22_11
LBB22_11:                               ;   in Loop: Header=BB22_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB22_5
LBB22_12:                               ;   in Loop: Header=BB22_3 Depth=2
	b	LBB22_13
LBB22_13:                               ;   in Loop: Header=BB22_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB22_3
LBB22_14:                               ;   in Loop: Header=BB22_1 Depth=1
	b	LBB22_15
LBB22_15:                               ;   in Loop: Header=BB22_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB22_1
LBB22_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10000ELi1ELi1ELi1EEclEiiii ; -- Begin function _ZN6tensorIfLi10000ELi1ELi1ELi1EEclEiiii
	.weak_definition	__ZN6tensorIfLi10000ELi1ELi1ELi1EEclEiiii
	.p2align	2
__ZN6tensorIfLi10000ELi1ELi1ELi1EEclEiiii: ; @_ZN6tensorIfLi10000ELi1ELi1ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei: ; @_ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #2
	cset	w8, le
	tbnz	w8, #0, LBB24_2
	b	LBB24_1
LBB24_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB24_2:
	b	LBB24_3
LBB24_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii:  ; @_ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi1ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi2ELi2ELi1ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi2ELi2ELi1ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi2ELi2ELi1ELi1EE6set_n0Ei: ; @_ZN6tensorIfLi2ELi2ELi1ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #2
	cset	w8, le
	tbnz	w8, #0, LBB26_2
	b	LBB26_1
LBB26_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB26_2:
	b	LBB26_3
LBB26_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi1ELi1EEclEiiii ; -- Begin function _ZN6tensorIfLi2ELi2ELi1ELi1EEclEiiii
	.weak_definition	__ZN6tensorIfLi2ELi2ELi1ELi1EEclEiiii
	.p2align	2
__ZN6tensorIfLi2ELi2ELi1ELi1EEclEiiii:  ; @_ZN6tensorIfLi2ELi2ELi1ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #3
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi2ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi2ELi2ELi2ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi2ELi2ELi2ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi2ELi2ELi2ELi1EE6set_n0Ei: ; @_ZN6tensorIfLi2ELi2ELi2ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #2
	cset	w8, le
	tbnz	w8, #0, LBB28_2
	b	LBB28_1
LBB28_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB28_2:
	b	LBB28_3
LBB28_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi2ELi1EEclEiiii ; -- Begin function _ZN6tensorIfLi2ELi2ELi2ELi1EEclEiiii
	.weak_definition	__ZN6tensorIfLi2ELi2ELi2ELi1EEclEiiii
	.p2align	2
__ZN6tensorIfLi2ELi2ELi2ELi1EEclEiiii:  ; @_ZN6tensorIfLi2ELi2ELi2ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #4
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #3
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi2ELi2EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi2ELi2ELi2ELi2EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi2ELi2ELi2ELi2EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi2ELi2ELi2ELi2EE6set_n0Ei: ; @_ZN6tensorIfLi2ELi2ELi2ELi2EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #2
	cset	w8, le
	tbnz	w8, #0, LBB30_2
	b	LBB30_1
LBB30_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB30_2:
	b	LBB30_3
LBB30_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi2ELi2ELi2EEclEiiii ; -- Begin function _ZN6tensorIfLi2ELi2ELi2ELi2EEclEiiii
	.weak_definition	__ZN6tensorIfLi2ELi2ELi2ELi2EEclEiiii
	.p2align	2
__ZN6tensorIfLi2ELi2ELi2ELi2EEclEiiii:  ; @_ZN6tensorIfLi2ELi2ELi2ELi2EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #5
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #4
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #3
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10000ELi1ELi1ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi10000ELi1ELi1ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi10000ELi1ELi1ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi10000ELi1ELi1ELi1EE6set_n0Ei: ; @_ZN6tensorIfLi10000ELi1ELi1ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	mov	w9, #10000
	subs	w8, w8, w9
	cset	w8, le
	tbnz	w8, #0, LBB32_2
	b	LBB32_1
LBB32_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB32_2:
	b	LBB32_3
LBB32_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN9rnd_gen_t5randiEll         ; -- Begin function _ZN9rnd_gen_t5randiEll
	.weak_definition	__ZN9rnd_gen_t5randiEll
	.p2align	2
__ZN9rnd_gen_t5randiEll:                ; @_ZN9rnd_gen_t5randiEll
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	x2, [sp, #8]
	ldur	x0, [x29, #-8]
	ldr	x8, [sp, #16]
	str	x8, [sp]                        ; 8-byte Folded Spill
	bl	__ZN9rnd_gen_t7randi32Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	x9, [sp, #8]
	ldr	x10, [sp, #16]
	subs	x10, x9, x10
	sdiv	x9, x0, x10
	mul	x9, x9, x10
	subs	x9, x0, x9
	add	x0, x8, x9
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN9rnd_gen_t7randi32Ev        ; -- Begin function _ZN9rnd_gen_t7randi32Ev
	.weak_definition	__ZN9rnd_gen_t7randi32Ev
	.p2align	2
__ZN9rnd_gen_t7randi32Ev:               ; @_ZN9rnd_gen_t7randi32Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN9rnd_gen_t4nextEv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	x8, [x8]
	lsr	x8, x8, #17
	and	x0, x8, #0x7fffffff
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN9rnd_gen_t4nextEv           ; -- Begin function _ZN9rnd_gen_t4nextEv
	.weak_definition	__ZN9rnd_gen_t4nextEv
	.p2align	2
__ZN9rnd_gen_t4nextEv:                  ; @_ZN9rnd_gen_t4nextEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	ldr	x9, [sp, #24]
	mov	x10, #58989
	movk	x10, #57068, lsl #16
	movk	x10, #5, lsl #32
	str	x10, [sp, #16]
	mov	x8, #11
	str	x8, [sp, #8]
	mov	x8, #281474976710655
	str	x8, [sp]
	ldr	x8, [x9]
	mul	x8, x8, x10
	add	x8, x8, #11
	and	x8, x8, #0xffffffffffff
	str	x8, [x9]
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z15mnist_data_mainiPPc        ; -- Begin function _Z15mnist_data_mainiPPc
	.p2align	2
__Z15mnist_data_mainiPPc:               ; @_Z15mnist_data_mainiPPc
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #49, lsl #12            ; =200704
	sub	sp, sp, #1072
	add	x8, sp, #49, lsl #12            ; =200704
	add	x8, x8, #616
	str	x8, [sp, #72]                   ; 8-byte Folded Spill
	str	w0, [x8, #452]
	str	x1, [x8, #440]
	ldr	w0, [x8, #452]
	ldr	x1, [x8, #440]
	sub	x8, x29, #152
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	bl	__ZL10parse_argsiPPc
	ldr	x9, [sp, #72]                   ; 8-byte Folded Reload
	mov	w8, #64
	str	w8, [x9, #316]
	ldr	w8, [x9, #352]
	str	w8, [x9, #312]
	mov	w8, #1
	str	w8, [sp, #24]                   ; 4-byte Folded Spill
	str	w8, [x9, #308]
	mov	w8, #28
	str	w8, [x9, #304]
	str	w8, [x9, #300]
	add	x0, sp, #49, lsl #12            ; =200704
	add	x0, x0, #776
	str	x0, [sp, #64]                   ; 8-byte Folded Spill
	bl	__ZN6loggerC1Ev
	ldr	x1, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, sp, #49, lsl #12            ; =200704
	add	x0, x0, #656
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #64]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZN6logger9start_logE11cmdline_opt
	ldr	w4, [sp, #24]                   ; 4-byte Folded Reload
	ldr	x1, [sp, #64]                   ; 8-byte Folded Reload
	ldr	x8, [sp, #72]                   ; 8-byte Folded Reload
	mov	w9, #54841
	movk	w9, #15877, lsl #16
	fmov	s0, w9
	str	s0, [x8, #4]
	mov	w9, #48968
	movk	w9, #16029, lsl #16
	fmov	s0, w9
	str	s0, [x8]
	ldr	x2, [x8, #328]
	ldrsw	x3, [x8, #356]
	ldr	s0, [x8, #4]
	ldr	s1, [x8]
	add	x0, sp, #49, lsl #12            ; =200704
	add	x0, x0, #624
	str	x0, [sp, #32]                   ; 8-byte Folded Spill
	bl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi
	ldr	x8, [sp, #72]                   ; 8-byte Folded Reload
	ldr	w1, [x8, #312]
	add	x0, sp, #612
	str	x0, [sp, #40]                   ; 8-byte Folded Spill
	movi	d0, #0000000000000000
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE10init_constEif
	ldr	x8, [sp, #72]                   ; 8-byte Folded Reload
	ldr	w1, [x8, #312]
	add	x0, sp, #352
	str	x0, [sp, #48]                   ; 8-byte Folded Spill
	mov	w2, #0
	str	w2, [sp, #28]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EE10init_constEii
	ldr	w2, [sp, #28]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #72]                   ; 8-byte Folded Reload
	ldr	w1, [x8, #312]
	add	x0, sp, #92
	str	x0, [sp, #56]                   ; 8-byte Folded Spill
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EE10init_constEii
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x2, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x3, [sp, #56]                   ; 8-byte Folded Reload
	ldr	x8, [sp, #72]                   ; 8-byte Folded Reload
	ldr	w4, [x8, #312]
	ldr	w5, [x8, #420]
	bl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii
	ldr	x0, [sp, #64]                   ; 8-byte Folded Reload
	bl	__ZN6logger7end_logEv
	ldr	x8, [sp, #72]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #24]
	str	x8, [sp, #80]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB36_2
	b	LBB36_1
LBB36_1:
	ldr	x0, [sp, #80]                   ; 8-byte Folded Reload
	bl	__ZdaPv
	b	LBB36_2
LBB36_2:
	mov	w0, #0
	add	sp, sp, #49, lsl #12            ; =200704
	add	sp, sp, #1072
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6loggerC1Ev                 ; -- Begin function _ZN6loggerC1Ev
	.weak_def_can_be_hidden	__ZN6loggerC1Ev
	.p2align	2
__ZN6loggerC1Ev:                        ; @_ZN6loggerC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN6loggerC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6logger9start_logE11cmdline_opt ; -- Begin function _ZN6logger9start_logE11cmdline_opt
	.weak_definition	__ZN6logger9start_logE11cmdline_opt
	.p2align	2
__ZN6logger9start_logE11cmdline_opt:    ; @_ZN6logger9start_logE11cmdline_opt
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x1, [sp, #16]                   ; 8-byte Folded Spill
	stur	x0, [x29, #-8]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #24]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x1, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x0, [x1, #104]
	adrp	x1, l_.str.38@PAGE
	add	x1, x1, l_.str.38@PAGEOFF
	bl	_fopen
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	str	x0, [x8, #120]
	ldr	x8, [x8, #120]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB38_2
	b	LBB38_1
LBB38_1:
	adrp	x0, l_.str.39@PAGE
	add	x0, x0, l_.str.39@PAGEOFF
	bl	_perror
	mov	w0, #1
	bl	_exit
LBB38_2:
	bl	__ZL7get_tscv
	mov	x8, x0
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-16]
	ldur	x8, [x29, #-16]
	str	x8, [x0, #128]
	bl	__ZN6logger12cur_time_strEv
	mov	x8, x0
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #2
	adrp	x2, l_.str.40@PAGE
	add	x2, x2, l_.str.40@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	bl	__ZN6logger7log_optEv
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	bl	__ZN6logger8log_hostEv
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	bl	__ZN6logger8log_envsEv
	mov	w0, #1
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3                               ; -- Begin function _ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi
lCPI39_0:
	.quad	0x406fe00000000000              ; double 255
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi
	.weak_definition	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi
	.p2align	2
__ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi: ; @_ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #304
	adrp	x8, ___stack_chk_guard@GOTPAGE
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
	ldr	x8, [x8]
	stur	x8, [x29, #-24]
	stur	x0, [x29, #-32]
	stur	x1, [x29, #-40]
	stur	x2, [x29, #-48]
	stur	x3, [x29, #-56]
	stur	s0, [x29, #-60]
	stur	s1, [x29, #-64]
	stur	w4, [x29, #-68]
	ldur	x8, [x29, #-32]
	sub	x9, x29, #16
	stur	x8, [x9, #-256]                 ; 8-byte Folded Spill
	ldur	x0, [x29, #-40]
	ldur	x8, [x29, #-48]
	sub	sp, sp, #16
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #1
	adrp	x2, l_.str.90@PAGE
	add	x2, x2, l_.str.90@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	add	sp, sp, #16
	ldur	x0, [x29, #-48]
	bl	_strlen
	stur	x0, [x29, #-80]
	ldur	x8, [x29, #-80]
	add	x1, x8, #100
	stur	x1, [x29, #-240]                ; 8-byte Folded Spill
	mov	x8, sp
	stur	x8, [x29, #-88]
	lsr	x8, x1, #0
	add	x8, x8, #15
	and	x9, x8, #0xfffffffffffffff0
	mov	x8, sp
	subs	x0, x8, x9
	sub	x8, x29, #8
	stur	x0, [x8, #-256]                 ; 8-byte Folded Spill
	mov	sp, x0
	stur	x1, [x29, #-96]
	ldur	x8, [x29, #-80]
	add	x8, x8, #100
	stur	x8, [x29, #-256]                ; 8-byte Folded Spill
	lsr	x9, x8, #0
	add	x9, x9, #15
	and	x10, x9, #0xfffffffffffffff0
	mov	x9, sp
	subs	x2, x9, x10
	stur	x2, [x29, #-248]                ; 8-byte Folded Spill
	mov	sp, x2
	stur	x8, [x29, #-104]
	ldur	x10, [x29, #-48]
	ldur	w8, [x29, #-68]
	subs	w8, w8, #0
	cset	w8, ne
	and	w11, w8, #0x1
	adrp	x9, l_.str.93@PAGE
	add	x9, x9, l_.str.93@PAGEOFF
	adrp	x8, l_.str.92@PAGE
	add	x8, x8, l_.str.92@PAGEOFF
	ands	w11, w11, #0x1
	csel	x8, x8, x9, ne
	sub	sp, sp, #16
	mov	x9, sp
	str	x10, [x9]
	str	x8, [x9, #8]
	adrp	x2, l_.str.91@PAGE
	add	x2, x2, l_.str.91@PAGEOFF
	bl	_snprintf
	ldur	x9, [x29, #-240]                ; 8-byte Folded Reload
	add	sp, sp, #16
	stur	w0, [x29, #-108]
	ldur	w8, [x29, #-108]
                                        ; kill: def $w9 killed $w9 killed $x9
	subs	w8, w8, w9
	cset	w8, lt
	tbnz	w8, #0, LBB39_2
	b	LBB39_1
LBB39_1:
	adrp	x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGE
	add	x0, x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #146
	adrp	x3, l_.str.95@PAGE
	add	x3, x3, l_.str.95@PAGEOFF
	bl	___assert_rtn
LBB39_2:
	b	LBB39_3
LBB39_3:
	ldur	x1, [x29, #-256]                ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]                ; 8-byte Folded Reload
	ldur	x10, [x29, #-48]
	ldur	w8, [x29, #-68]
	subs	w8, w8, #0
	cset	w8, ne
	and	w11, w8, #0x1
	adrp	x9, l_.str.93@PAGE
	add	x9, x9, l_.str.93@PAGEOFF
	adrp	x8, l_.str.92@PAGE
	add	x8, x8, l_.str.92@PAGEOFF
	ands	w11, w11, #0x1
	csel	x8, x8, x9, ne
	sub	sp, sp, #16
	mov	x9, sp
	str	x10, [x9]
	str	x8, [x9, #8]
	adrp	x2, l_.str.96@PAGE
	add	x2, x2, l_.str.96@PAGEOFF
	bl	_snprintf
	ldur	x9, [x29, #-256]                ; 8-byte Folded Reload
	add	sp, sp, #16
	stur	w0, [x29, #-108]
	ldur	w8, [x29, #-108]
	subs	w8, w8, w9
	cset	w8, lt
	tbnz	w8, #0, LBB39_5
	b	LBB39_4
LBB39_4:
	adrp	x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGE
	add	x0, x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #149
	adrp	x3, l_.str.97@PAGE
	add	x3, x3, l_.str.97@PAGEOFF
	bl	___assert_rtn
LBB39_5:
	b	LBB39_6
LBB39_6:
	sub	x8, x29, #8
	ldur	x0, [x8, #-256]                 ; 8-byte Folded Reload
	sub	x8, x29, #144
	bl	__ZL26read_pascal_vincent_formatPKc
	ldur	x0, [x29, #-248]                ; 8-byte Folded Reload
	sub	x8, x29, #176
	bl	__ZL26read_pascal_vincent_formatPKc
	ldur	w8, [x29, #-176]
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB39_8
	b	LBB39_7
LBB39_7:
	adrp	x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGE
	add	x0, x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #152
	adrp	x3, l_.str.98@PAGE
	add	x3, x3, l_.str.98@PAGEOFF
	bl	___assert_rtn
LBB39_8:
	b	LBB39_9
LBB39_9:
	sub	x8, x29, #16
	ldur	x9, [x8, #-256]                 ; 8-byte Folded Reload
	ldur	x8, [x29, #-168]
	ldrsw	x8, [x8]
	str	x8, [x9, #8]
	ldursw	x8, [x29, #-144]
	stur	x8, [x29, #-184]
	ldur	x8, [x29, #-184]
	subs	x8, x8, #3
	cset	w8, eq
	mov	w9, #1
	sub	x10, x29, #20
	stur	w9, [x10, #-256]                ; 4-byte Folded Spill
	tbnz	w8, #0, LBB39_11
	b	LBB39_10
LBB39_10:
	ldur	x8, [x29, #-184]
	subs	x8, x8, #4
	cset	w8, eq
	sub	x9, x29, #20
	stur	w8, [x9, #-256]                 ; 4-byte Folded Spill
	b	LBB39_11
LBB39_11:
	sub	x8, x29, #20
	ldur	w8, [x8, #-256]                 ; 4-byte Folded Reload
	tbnz	w8, #0, LBB39_13
	b	LBB39_12
LBB39_12:
	adrp	x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGE
	add	x0, x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #156
	adrp	x3, l_.str.99@PAGE
	add	x3, x3, l_.str.99@PAGEOFF
	bl	___assert_rtn
LBB39_13:
	b	LBB39_14
LBB39_14:
	sub	x8, x29, #16
	ldur	x9, [x8, #-256]                 ; 8-byte Folded Reload
	ldur	x8, [x29, #-136]
	ldrsw	x8, [x8]
	ldr	x9, [x9, #8]
	subs	x8, x8, x9
	cset	w8, eq
	tbnz	w8, #0, LBB39_16
	b	LBB39_15
LBB39_15:
	adrp	x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGE
	add	x0, x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #157
	adrp	x3, l_.str.100@PAGE
	add	x3, x3, l_.str.100@PAGEOFF
	bl	___assert_rtn
LBB39_16:
	b	LBB39_17
LBB39_17:
	ldur	x8, [x29, #-136]
	ldur	x9, [x29, #-184]
	subs	x9, x9, #2
	ldr	w8, [x8, x9, lsl #2]
	subs	w8, w8, #28
	cset	w8, eq
	tbnz	w8, #0, LBB39_19
	b	LBB39_18
LBB39_18:
	adrp	x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGE
	add	x0, x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #158
	adrp	x3, l_.str.101@PAGE
	add	x3, x3, l_.str.101@PAGEOFF
	bl	___assert_rtn
LBB39_19:
	b	LBB39_20
LBB39_20:
	ldur	x8, [x29, #-136]
	ldur	x9, [x29, #-184]
	subs	x9, x9, #1
	ldr	w8, [x8, x9, lsl #2]
	subs	w8, w8, #28
	cset	w8, eq
	tbnz	w8, #0, LBB39_22
	b	LBB39_21
LBB39_21:
	adrp	x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGE
	add	x0, x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #159
	adrp	x3, l_.str.102@PAGE
	add	x3, x3, l_.str.102@PAGEOFF
	bl	___assert_rtn
LBB39_22:
	b	LBB39_23
LBB39_23:
	sub	x8, x29, #16
	ldur	x9, [x8, #-256]                 ; 8-byte Folded Reload
	ldur	x8, [x29, #-128]
	ldr	x9, [x9, #8]
	lsr	x9, x9, #0
	mov	x10, #28
	mul	x9, x9, x10
	mul	x9, x9, x10
	subs	x8, x8, x9
	cset	w8, eq
	tbnz	w8, #0, LBB39_25
	b	LBB39_24
LBB39_24:
	adrp	x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGE
	add	x0, x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #160
	adrp	x3, l_.str.103@PAGE
	add	x3, x3, l_.str.103@PAGEOFF
	bl	___assert_rtn
LBB39_25:
	b	LBB39_26
LBB39_26:
	sub	x8, x29, #16
	ldur	x8, [x8, #-256]                 ; 8-byte Folded Reload
	ldr	x8, [x8, #8]
	mov	x10, #3928
	umulh	x9, x8, x10
	mul	x8, x8, x10
	subs	x9, x9, #0
	cset	w9, ne
	and	w9, w9, #0x1
	ands	w9, w9, #0x1
	csinv	x0, x8, xzr, eq
	bl	__Znam
	sub	x8, x29, #16
	ldur	x8, [x8, #-256]                 ; 8-byte Folded Reload
	str	x0, [x8, #16]
	ldur	x8, [x29, #-120]
	stur	x8, [x29, #-192]
	ldur	x8, [x29, #-152]
	stur	x8, [x29, #-200]
	stur	wzr, [x29, #-204]
	b	LBB39_27
LBB39_27:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB39_29 Depth 2
                                        ;       Child Loop BB39_31 Depth 3
                                        ;         Child Loop BB39_33 Depth 4
	sub	x8, x29, #16
	ldur	x9, [x8, #-256]                 ; 8-byte Folded Reload
	ldursw	x8, [x29, #-204]
	ldr	x9, [x9, #8]
	subs	x8, x8, x9
	cset	w8, ge
	tbnz	w8, #0, LBB39_42
	b	LBB39_28
LBB39_28:                               ;   in Loop: Header=BB39_27 Depth=1
	sub	x8, x29, #16
	ldur	x9, [x8, #-256]                 ; 8-byte Folded Reload
	ldur	w8, [x29, #-204]
	ldr	x10, [x9, #16]
	ldursw	x12, [x29, #-204]
	mov	x11, #3928
	mul	x12, x12, x11
	str	w8, [x10, x12]
	ldur	x8, [x29, #-200]
	ldursw	x10, [x29, #-204]
	add	x8, x8, x10
	ldrb	w8, [x8]
	ldr	x9, [x9, #16]
	ldursw	x10, [x29, #-204]
	mul	x10, x10, x11
	add	x9, x9, x10
	strb	w8, [x9, #3924]
	stur	wzr, [x29, #-208]
	b	LBB39_29
LBB39_29:                               ;   Parent Loop BB39_27 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB39_31 Depth 3
                                        ;         Child Loop BB39_33 Depth 4
	ldur	w8, [x29, #-208]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB39_40
	b	LBB39_30
LBB39_30:                               ;   in Loop: Header=BB39_29 Depth=2
	stur	wzr, [x29, #-212]
	b	LBB39_31
LBB39_31:                               ;   Parent Loop BB39_27 Depth=1
                                        ;     Parent Loop BB39_29 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB39_33 Depth 4
	ldur	w8, [x29, #-212]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB39_38
	b	LBB39_32
LBB39_32:                               ;   in Loop: Header=BB39_31 Depth=3
	stur	wzr, [x29, #-216]
	b	LBB39_33
LBB39_33:                               ;   Parent Loop BB39_27 Depth=1
                                        ;     Parent Loop BB39_29 Depth=2
                                        ;       Parent Loop BB39_31 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldur	w8, [x29, #-216]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB39_36
	b	LBB39_34
LBB39_34:                               ;   in Loop: Header=BB39_33 Depth=4
	sub	x8, x29, #16
	ldur	x8, [x8, #-256]                 ; 8-byte Folded Reload
	ldur	x9, [x29, #-192]
	ldursw	x10, [x29, #-204]
	mov	x14, #784
	mul	x10, x10, x14
	add	x9, x9, x10
	ldursw	x10, [x29, #-208]
	mul	x10, x10, x14
	add	x9, x9, x10
	ldursw	x10, [x29, #-212]
	mov	x13, #28
	mul	x10, x10, x13
	add	x9, x9, x10
	ldursw	x10, [x29, #-216]
	add	x9, x9, x10
	ldrb	w9, [x9]
	sturb	w9, [x29, #-217]
	ldurb	w9, [x29, #-217]
	ldr	x11, [x8, #16]
	ldursw	x12, [x29, #-204]
	mov	x10, #3928
	mul	x12, x12, x10
	add	x11, x11, x12
	add	x11, x11, #4
	ldursw	x12, [x29, #-208]
	mul	x12, x12, x14
	add	x11, x11, x12
	ldursw	x12, [x29, #-212]
	mul	x12, x12, x13
	add	x11, x11, x12
	ldursw	x12, [x29, #-216]
	add	x11, x11, x12
	strb	w9, [x11]
	ldurb	w9, [x29, #-217]
	scvtf	d0, w9
	adrp	x9, lCPI39_0@PAGE
	ldr	d1, [x9, lCPI39_0@PAGEOFF]
	fdiv	d0, d0, d1
	ldur	s1, [x29, #-60]
	fcvt	d1, s1
	fsub	d0, d0, d1
	ldur	s1, [x29, #-64]
	fcvt	d1, s1
	fdiv	d0, d0, d1
	fcvt	s0, d0
	sub	x9, x29, #24
	stur	s0, [x9, #-256]                 ; 4-byte Folded Spill
	ldr	x8, [x8, #16]
	ldursw	x9, [x29, #-204]
	mul	x9, x9, x10
	add	x0, x8, x9
	ldur	w1, [x29, #-208]
	ldur	w2, [x29, #-212]
	ldur	w3, [x29, #-216]
	bl	__ZN9data_itemILi1ELi28ELi28EEclEiii
	sub	x8, x29, #24
	ldur	s0, [x8, #-256]                 ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB39_35
LBB39_35:                               ;   in Loop: Header=BB39_33 Depth=4
	ldur	w8, [x29, #-216]
	add	w8, w8, #1
	stur	w8, [x29, #-216]
	b	LBB39_33
LBB39_36:                               ;   in Loop: Header=BB39_31 Depth=3
	b	LBB39_37
LBB39_37:                               ;   in Loop: Header=BB39_31 Depth=3
	ldur	w8, [x29, #-212]
	add	w8, w8, #1
	stur	w8, [x29, #-212]
	b	LBB39_31
LBB39_38:                               ;   in Loop: Header=BB39_29 Depth=2
	b	LBB39_39
LBB39_39:                               ;   in Loop: Header=BB39_29 Depth=2
	ldur	w8, [x29, #-208]
	add	w8, w8, #1
	stur	w8, [x29, #-208]
	b	LBB39_29
LBB39_40:                               ;   in Loop: Header=BB39_27 Depth=1
	b	LBB39_41
LBB39_41:                               ;   in Loop: Header=BB39_27 Depth=1
	ldur	w8, [x29, #-204]
	add	w8, w8, #1
	stur	w8, [x29, #-204]
	b	LBB39_27
LBB39_42:
	ldur	x8, [x29, #-56]
	subs	x8, x8, #0
	cset	w8, ge
	tbnz	w8, #0, LBB39_44
	b	LBB39_43
LBB39_43:
	sub	x8, x29, #16
	ldur	x8, [x8, #-256]                 ; 8-byte Folded Reload
	ldr	x8, [x8, #8]
	sub	x9, x29, #32
	stur	x8, [x9, #-256]                 ; 8-byte Folded Spill
	b	LBB39_45
LBB39_44:
	sub	x8, x29, #16
	ldur	x8, [x8, #-256]                 ; 8-byte Folded Reload
	ldr	x8, [x8, #8]
	mov	x0, x8
	ldur	x8, [x29, #-56]
	mov	x1, x8
	bl	__ZL5min_iii
                                        ; implicit-def: $x8
	mov	x8, x0
	sxtw	x8, w8
	sub	x9, x29, #32
	stur	x8, [x9, #-256]                 ; 8-byte Folded Spill
	b	LBB39_45
LBB39_45:
	sub	x8, x29, #16
	ldur	x8, [x8, #-256]                 ; 8-byte Folded Reload
	sub	x9, x29, #32
	ldur	x9, [x9, #-256]                 ; 8-byte Folded Reload
	stur	x9, [x29, #-232]
	ldur	x0, [x29, #-40]
	ldur	x10, [x29, #-232]
	ldr	x8, [x8, #8]
	sub	sp, sp, #16
	mov	x9, sp
	str	x10, [x9]
	str	x8, [x9, #8]
	mov	w1, #1
	adrp	x2, l_.str.104@PAGE
	add	x2, x2, l_.str.104@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	sub	x8, x29, #16
	ldur	x8, [x8, #-256]                 ; 8-byte Folded Reload
	add	sp, sp, #16
	ldur	x9, [x29, #-232]
	str	x9, [x8, #8]
	str	xzr, [x8]
	ldur	x0, [x29, #-120]
	bl	_free
	ldur	x8, [x29, #-136]
	sub	x9, x29, #40
	stur	x8, [x9, #-256]                 ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB39_47
	b	LBB39_46
LBB39_46:
	sub	x8, x29, #40
	ldur	x0, [x8, #-256]                 ; 8-byte Folded Reload
	bl	__ZdaPv
	b	LBB39_47
LBB39_47:
	ldur	x0, [x29, #-152]
	bl	_free
	ldur	x8, [x29, #-168]
	sub	x9, x29, #48
	stur	x8, [x9, #-256]                 ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB39_49
	b	LBB39_48
LBB39_48:
	sub	x8, x29, #48
	ldur	x0, [x8, #-256]                 ; 8-byte Folded Reload
	bl	__ZdaPv
	b	LBB39_49
LBB39_49:
	ldur	x8, [x29, #-88]
	sub	x9, x29, #56
	stur	x8, [x9, #-256]                 ; 8-byte Folded Spill
	ldur	x9, [x29, #-24]
	adrp	x8, ___stack_chk_guard@GOTPAGE
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
	ldr	x8, [x8]
	subs	x8, x8, x9
	cset	w8, eq
	tbnz	w8, #0, LBB39_51
	b	LBB39_50
LBB39_50:
	bl	___stack_chk_fail
LBB39_51:
	sub	x8, x29, #56
	ldur	x8, [x8, #-256]                 ; 8-byte Folded Reload
	mov	sp, x8
	mov	w0, #1
	sub	sp, x29, #16
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi28ELi28EE10init_constEif ; -- Begin function _ZN6tensorIfLi64ELi1ELi28ELi28EE10init_constEif
	.weak_definition	__ZN6tensorIfLi64ELi1ELi28ELi28EE10init_constEif
	.p2align	2
__ZN6tensorIfLi64ELi1ELi28ELi28EE10init_constEif: ; @_ZN6tensorIfLi64ELi1ELi28ELi28EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=64 N1=1 N2=28 N3=28
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB40_1
LBB40_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB40_3 Depth 2
                                        ;       Child Loop BB40_5 Depth 3
                                        ;         Child Loop BB40_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB40_16
	b	LBB40_2
LBB40_2:                                ;   in Loop: Header=BB40_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB40_3
LBB40_3:                                ;   Parent Loop BB40_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB40_5 Depth 3
                                        ;         Child Loop BB40_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB40_14
	b	LBB40_4
LBB40_4:                                ;   in Loop: Header=BB40_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB40_5
LBB40_5:                                ;   Parent Loop BB40_1 Depth=1
                                        ;     Parent Loop BB40_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB40_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB40_12
	b	LBB40_6
LBB40_6:                                ;   in Loop: Header=BB40_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB40_7
LBB40_7:                                ;   Parent Loop BB40_1 Depth=1
                                        ;     Parent Loop BB40_3 Depth=2
                                        ;       Parent Loop BB40_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB40_10
	b	LBB40_8
LBB40_8:                                ;   in Loop: Header=BB40_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB40_9
LBB40_9:                                ;   in Loop: Header=BB40_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB40_7
LBB40_10:                               ;   in Loop: Header=BB40_5 Depth=3
	b	LBB40_11
LBB40_11:                               ;   in Loop: Header=BB40_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB40_5
LBB40_12:                               ;   in Loop: Header=BB40_3 Depth=2
	b	LBB40_13
LBB40_13:                               ;   in Loop: Header=BB40_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB40_3
LBB40_14:                               ;   in Loop: Header=BB40_1 Depth=1
	b	LBB40_15
LBB40_15:                               ;   in Loop: Header=BB40_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB40_1
LBB40_16:
	; InlineAsm Start
	; init_const ends N0=64 N1=1 N2=28 N3=28
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIiLi64ELi1ELi1ELi1EE10init_constEii ; -- Begin function _ZN6tensorIiLi64ELi1ELi1ELi1EE10init_constEii
	.weak_definition	__ZN6tensorIiLi64ELi1ELi1ELi1EE10init_constEii
	.p2align	2
__ZN6tensorIiLi64ELi1ELi1ELi1EE10init_constEii: ; @_ZN6tensorIiLi64ELi1ELi1ELi1EE10init_constEii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	w2, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=64 N1=1 N2=1 N3=1
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB41_1
LBB41_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB41_3 Depth 2
                                        ;       Child Loop BB41_5 Depth 3
                                        ;         Child Loop BB41_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB41_16
	b	LBB41_2
LBB41_2:                                ;   in Loop: Header=BB41_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB41_3
LBB41_3:                                ;   Parent Loop BB41_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB41_5 Depth 3
                                        ;         Child Loop BB41_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB41_14
	b	LBB41_4
LBB41_4:                                ;   in Loop: Header=BB41_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB41_5
LBB41_5:                                ;   Parent Loop BB41_1 Depth=1
                                        ;     Parent Loop BB41_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB41_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB41_12
	b	LBB41_6
LBB41_6:                                ;   in Loop: Header=BB41_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB41_7
LBB41_7:                                ;   Parent Loop BB41_1 Depth=1
                                        ;     Parent Loop BB41_3 Depth=2
                                        ;       Parent Loop BB41_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB41_10
	b	LBB41_8
LBB41_8:                                ;   in Loop: Header=BB41_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB41_9
LBB41_9:                                ;   in Loop: Header=BB41_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB41_7
LBB41_10:                               ;   in Loop: Header=BB41_5 Depth=3
	b	LBB41_11
LBB41_11:                               ;   in Loop: Header=BB41_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB41_5
LBB41_12:                               ;   in Loop: Header=BB41_3 Depth=2
	b	LBB41_13
LBB41_13:                               ;   in Loop: Header=BB41_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB41_3
LBB41_14:                               ;   in Loop: Header=BB41_1 Depth=1
	b	LBB41_15
LBB41_15:                               ;   in Loop: Header=BB41_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB41_1
LBB41_16:
	; InlineAsm Start
	; init_const ends N0=64 N1=1 N2=1 N3=1
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii ; -- Begin function _ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii
	.weak_definition	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii
	.p2align	2
__ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii: ; @_ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #128]            ; 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	stur	w4, [x29, #-36]
	stur	w5, [x29, #-40]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	w8, [x29, #-36]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB42_2
	b	LBB42_1
LBB42_1:
	adrp	x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii@PAGE
	add	x0, x0, l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #216
	adrp	x3, l_.str.114@PAGE
	add	x3, x3, l_.str.114@PAGEOFF
	bl	___assert_rtn
LBB42_2:
	b	LBB42_3
LBB42_3:
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x8, [x9, #8]
	ldr	x9, [x9]
	subs	x8, x8, x9
	ldursw	x9, [x29, #-36]
	subs	x8, x8, x9
	cset	w8, ge
	tbnz	w8, #0, LBB42_5
	b	LBB42_4
LBB42_4:
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x8, [x9, #8]
	ldr	x9, [x9]
	subs	x8, x8, x9
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB42_6
LBB42_5:
	ldursw	x8, [x29, #-36]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB42_6
LBB42_6:
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
                                        ; kill: def $w8 killed $w8 killed $x8
	stur	w8, [x29, #-44]
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-44]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE6set_n0Ei
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-44]
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EE6set_n0Ei
	ldur	x0, [x29, #-32]
	ldur	w1, [x29, #-44]
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EE6set_n0Ei
	stur	xzr, [x29, #-56]
	b	LBB42_7
LBB42_7:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB42_9 Depth 2
                                        ;       Child Loop BB42_11 Depth 3
                                        ;         Child Loop BB42_13 Depth 4
	ldur	x8, [x29, #-56]
	ldursw	x9, [x29, #-44]
	subs	x8, x8, x9
	cset	w8, ge
	tbnz	w8, #0, LBB42_22
	b	LBB42_8
LBB42_8:                                ;   in Loop: Header=BB42_7 Depth=1
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x9, [x8]
	str	x9, [sp, #64]
	ldr	x8, [x8, #16]
	ldr	x9, [sp, #64]
	mov	x10, #3928
	mul	x9, x9, x10
	add	x8, x8, x9
	str	x8, [sp, #56]
	ldr	x8, [sp, #56]
	ldr	w8, [x8]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldur	x8, [x29, #-56]
	mov	x1, x8
	mov	w4, #0
	str	w4, [sp, #16]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	ldr	w4, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	ldr	x8, [sp, #56]
	ldrsb	w8, [x8, #3924]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	x8, [x29, #-56]
	mov	x1, x8
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	str	w8, [x0]
	str	wzr, [sp, #52]
	b	LBB42_9
LBB42_9:                                ;   Parent Loop BB42_7 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB42_11 Depth 3
                                        ;         Child Loop BB42_13 Depth 4
	ldr	w8, [sp, #52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB42_20
	b	LBB42_10
LBB42_10:                               ;   in Loop: Header=BB42_9 Depth=2
	str	wzr, [sp, #48]
	b	LBB42_11
LBB42_11:                               ;   Parent Loop BB42_7 Depth=1
                                        ;     Parent Loop BB42_9 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB42_13 Depth 4
	ldr	w8, [sp, #48]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB42_18
	b	LBB42_12
LBB42_12:                               ;   in Loop: Header=BB42_11 Depth=3
	str	wzr, [sp, #44]
	b	LBB42_13
LBB42_13:                               ;   Parent Loop BB42_7 Depth=1
                                        ;     Parent Loop BB42_9 Depth=2
                                        ;       Parent Loop BB42_11 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #44]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB42_16
	b	LBB42_14
LBB42_14:                               ;   in Loop: Header=BB42_13 Depth=4
	ldr	x0, [sp, #56]
	ldr	w1, [sp, #52]
	ldr	w2, [sp, #48]
	ldr	w3, [sp, #44]
	bl	__ZN9data_itemILi1ELi28ELi28EEclEiii
	ldr	w8, [x0]
	str	w8, [sp, #8]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	x8, [x29, #-56]
	mov	x1, x8
	ldr	w2, [sp, #52]
	ldr	w3, [sp, #48]
	ldr	w4, [sp, #44]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	w8, [sp, #8]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB42_15
LBB42_15:                               ;   in Loop: Header=BB42_13 Depth=4
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB42_13
LBB42_16:                               ;   in Loop: Header=BB42_11 Depth=3
	b	LBB42_17
LBB42_17:                               ;   in Loop: Header=BB42_11 Depth=3
	ldr	w8, [sp, #48]
	add	w8, w8, #1
	str	w8, [sp, #48]
	b	LBB42_11
LBB42_18:                               ;   in Loop: Header=BB42_9 Depth=2
	b	LBB42_19
LBB42_19:                               ;   in Loop: Header=BB42_9 Depth=2
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB42_9
LBB42_20:                               ;   in Loop: Header=BB42_7 Depth=1
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x8, [x9]
	add	x8, x8, #1
	str	x8, [x9]
	b	LBB42_21
LBB42_21:                               ;   in Loop: Header=BB42_7 Depth=1
	ldur	x8, [x29, #-56]
	add	x8, x8, #1
	stur	x8, [x29, #-56]
	b	LBB42_7
LBB42_22:
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-40]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-40]
	bl	__Z6to_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	ldur	x0, [x29, #-32]
	ldur	w1, [x29, #-40]
	bl	__Z6to_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	ldur	w0, [x29, #-44]
	.cfi_def_cfa wsp, 144
	ldp	x29, x30, [sp, #128]            ; 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6logger7end_logEv           ; -- Begin function _ZN6logger7end_logEv
	.weak_definition	__ZN6logger7end_logEv
	.p2align	2
__ZN6logger7end_logEv:                  ; @_ZN6logger7end_logEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldr	x8, [x8, #120]
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB43_2
	b	LBB43_1
LBB43_1:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZN6logger12cur_time_strEv
	mov	x8, x0
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #2
	adrp	x2, l_.str.115@PAGE
	add	x2, x2, l_.str.115@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x0, [x8, #120]
	bl	_fclose
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
                                        ; kill: def $x9 killed $xzr
	str	xzr, [x8, #120]
	b	LBB43_2
LBB43_2:
	mov	w0, #1
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6loggerC2Ev                 ; -- Begin function _ZN6loggerC2Ev
	.weak_def_can_be_hidden	__ZN6loggerC2Ev
	.p2align	2
__ZN6loggerC2Ev:                        ; @_ZN6loggerC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL7get_tscv
__ZL7get_tscv:                          ; @_ZL7get_tscv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x8, ___stack_chk_guard@GOTPAGE
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
	ldr	x8, [x8]
	stur	x8, [x29, #-8]
	mov	w0, #0
	add	x1, sp, #24
	bl	_clock_gettime
	adds	w8, w0, #1
	cset	w8, ne
	tbnz	w8, #0, LBB45_2
	b	LBB45_1
LBB45_1:
	adrp	x0, l_.str.41@PAGE
	add	x0, x0, l_.str.41@PAGEOFF
	bl	_perror
	bl	__ZL4bailv
	b	LBB45_2
LBB45_2:
	ldr	x8, [sp, #24]
	mov	x9, #51712
	movk	x9, #15258, lsl #16
	mul	x8, x8, x9
	ldr	x9, [sp, #32]
	add	x8, x8, x9
	str	x8, [sp, #16]
	ldr	x8, [sp, #16]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	x9, [x29, #-8]
	adrp	x8, ___stack_chk_guard@GOTPAGE
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
	ldr	x8, [x8]
	subs	x8, x8, x9
	cset	w8, eq
	tbnz	w8, #0, LBB45_4
	b	LBB45_3
LBB45_3:
	bl	___stack_chk_fail
LBB45_4:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6logger3logEiPKcz           ; -- Begin function _ZN6logger3logEiPKcz
	.weak_definition	__ZN6logger3logEiPKcz
	.p2align	2
__ZN6logger3logEiPKcz:                  ; @_ZN6logger3logEiPKcz
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x8, ___stdoutp@GOTPAGE
	ldr	x8, [x8, ___stdoutp@GOTPAGEOFF]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	bl	__ZL7get_tscv
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldur	x9, [x29, #-32]
	ldr	x10, [x8, #128]
	subs	x9, x9, x10
	str	x9, [sp, #40]
	ldr	x8, [x8, #120]
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB46_2
	b	LBB46_1
LBB46_1:
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x0, [x8, #120]
	ldr	x8, [sp, #40]
	mov	x9, sp
	str	x8, [x9]
	adrp	x1, l_.str.42@PAGE
	add	x1, x1, l_.str.42@PAGEOFF
	bl	_fprintf
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x10, sp, #32
	add	x9, x29, #16
	str	x9, [x10]
	ldr	x0, [x8, #120]
	ldur	x1, [x29, #-24]
	ldr	x2, [sp, #32]
	bl	_vfprintf
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x0, [x8, #120]
	adrp	x1, l_.str.43@PAGE
	add	x1, x1, l_.str.43@PAGEOFF
	bl	_fprintf
	b	LBB46_2
LBB46_2:
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w8, [x8]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, lt
	tbnz	w8, #0, LBB46_4
	b	LBB46_3
LBB46_3:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x0, [x8]
	ldr	x8, [sp, #40]
	mov	x9, sp
	str	x8, [x9]
	adrp	x1, l_.str.42@PAGE
	add	x1, x1, l_.str.42@PAGEOFF
	bl	_fprintf
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x10, sp, #24
	add	x9, x29, #16
	str	x9, [x10]
	ldr	x0, [x8]
	ldur	x1, [x29, #-24]
	ldr	x2, [sp, #24]
	bl	_vfprintf
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x0, [x8]
	adrp	x1, l_.str.43@PAGE
	add	x1, x1, l_.str.43@PAGEOFF
	bl	_fprintf
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x0, [x8]
	bl	_fflush
	b	LBB46_4
LBB46_4:
	mov	w0, #1
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6logger12cur_time_strEv     ; -- Begin function _ZN6logger12cur_time_strEv
	.weak_definition	__ZN6logger12cur_time_strEv
	.p2align	2
__ZN6logger12cur_time_strEv:            ; @_ZN6logger12cur_time_strEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	mov	x0, #0
	bl	_time
	mov	x8, x0
	add	x0, sp, #16
	str	x8, [sp, #16]
	bl	_ctime
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB47_2
	b	LBB47_1
LBB47_1:
	adrp	x0, l_.str.44@PAGE
	add	x0, x0, l_.str.44@PAGEOFF
	bl	_perror
	mov	w0, #1
	bl	_exit
LBB47_2:
	ldr	x0, [sp, #8]
	bl	_strlen
	mov	x8, x0
	str	w8, [sp, #4]
	ldr	x8, [sp, #8]
	ldr	w9, [sp, #4]
	subs	w9, w9, #1
	add	x8, x8, w9, sxtw
	strb	wzr, [x8]
	ldr	x0, [sp, #8]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6logger7log_optEv           ; -- Begin function _ZN6logger7log_optEv
	.weak_definition	__ZN6logger7log_optEv
	.p2align	2
__ZN6logger7log_optEv:                  ; @_ZN6logger7log_optEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldr	w9, [x0]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #2
	str	w1, [sp, #12]                   ; 4-byte Folded Spill
	adrp	x2, l_.str.45@PAGE
	add	x2, x2, l_.str.45@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x8, [x0, #8]
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.46@PAGE
	add	x2, x2, l_.str.46@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #16]
	fcvt	d0, s0
	mov	x8, sp
	str	d0, [x8]
	adrp	x2, l_.str.47@PAGE
	add	x2, x2, l_.str.47@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x8, [x0, #24]
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.48@PAGE
	add	x2, x2, l_.str.48@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w9, [x0, #32]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.49@PAGE
	add	x2, x2, l_.str.49@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w9, [x0, #36]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.50@PAGE
	add	x2, x2, l_.str.50@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w9, [x0, #40]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.51@PAGE
	add	x2, x2, l_.str.51@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x8, [x0, #56]
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.52@PAGE
	add	x2, x2, l_.str.52@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x8, [x0, #64]
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.53@PAGE
	add	x2, x2, l_.str.53@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x8, [x0, #72]
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.54@PAGE
	add	x2, x2, l_.str.54@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w9, [x0, #80]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.55@PAGE
	add	x2, x2, l_.str.55@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w9, [x0, #96]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.56@PAGE
	add	x2, x2, l_.str.56@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x8, [x0, #88]
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.57@PAGE
	add	x2, x2, l_.str.57@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w9, [x0, #100]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.58@PAGE
	add	x2, x2, l_.str.58@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x8, [x0, #104]
	mov	x9, sp
	str	x8, [x9]
	adrp	x2, l_.str.59@PAGE
	add	x2, x2, l_.str.59@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	mov	w0, #1
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6logger8log_hostEv          ; -- Begin function _ZN6logger8log_hostEv
	.weak_definition	__ZN6logger8log_hostEv
	.p2align	2
__ZN6logger8log_hostEv:                 ; @_ZN6logger8log_hostEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x8, ___stack_chk_guard@GOTPAGE
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
	ldr	x8, [x8]
	stur	x8, [x29, #-8]
	str	x0, [sp, #24]
	ldr	x8, [sp, #24]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	add	x0, sp, #39
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	strb	wzr, [sp, #39]
	mov	x1, #65
	bl	_gethostname
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #2
	adrp	x2, l_.str.60@PAGE
	add	x2, x2, l_.str.60@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldur	x9, [x29, #-8]
	adrp	x8, ___stack_chk_guard@GOTPAGE
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
	ldr	x8, [x8]
	subs	x8, x8, x9
	cset	w8, eq
	tbnz	w8, #0, LBB49_2
	b	LBB49_1
LBB49_1:
	bl	___stack_chk_fail
LBB49_2:
	mov	w0, #1
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6logger8log_envsEv          ; -- Begin function _ZN6logger8log_envsEv
	.weak_definition	__ZN6logger8log_envsEv
	.p2align	2
__ZN6logger8log_envsEv:                 ; @_ZN6logger8log_envsEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	adrp	x1, l_.str.61@PAGE
	add	x1, x1, l_.str.61@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.62@PAGE
	add	x1, x1, l_.str.62@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.63@PAGE
	add	x1, x1, l_.str.63@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.64@PAGE
	add	x1, x1, l_.str.64@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.65@PAGE
	add	x1, x1, l_.str.65@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.66@PAGE
	add	x1, x1, l_.str.66@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.67@PAGE
	add	x1, x1, l_.str.67@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.68@PAGE
	add	x1, x1, l_.str.68@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.69@PAGE
	add	x1, x1, l_.str.69@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.70@PAGE
	add	x1, x1, l_.str.70@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.71@PAGE
	add	x1, x1, l_.str.71@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.72@PAGE
	add	x1, x1, l_.str.72@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.73@PAGE
	add	x1, x1, l_.str.73@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.74@PAGE
	add	x1, x1, l_.str.74@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.75@PAGE
	add	x1, x1, l_.str.75@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.76@PAGE
	add	x1, x1, l_.str.76@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.77@PAGE
	add	x1, x1, l_.str.77@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.78@PAGE
	add	x1, x1, l_.str.78@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.79@PAGE
	add	x1, x1, l_.str.79@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.80@PAGE
	add	x1, x1, l_.str.80@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.81@PAGE
	add	x1, x1, l_.str.81@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.82@PAGE
	add	x1, x1, l_.str.82@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.83@PAGE
	add	x1, x1, l_.str.83@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.84@PAGE
	add	x1, x1, l_.str.84@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.85@PAGE
	add	x1, x1, l_.str.85@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.86@PAGE
	add	x1, x1, l_.str.86@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	adrp	x1, l_.str.87@PAGE
	add	x1, x1, l_.str.87@PAGEOFF
	bl	__ZN6logger7log_envEPKc
	mov	w0, #1
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6logger7log_envEPKc         ; -- Begin function _ZN6logger7log_envEPKc
	.weak_definition	__ZN6logger7log_envEPKc
	.p2align	2
__ZN6logger7log_envEPKc:                ; @_ZN6logger7log_envEPKc
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x0, [x29, #-16]
	bl	_getenv
	str	x0, [sp, #24]
	ldr	x8, [sp, #24]
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB51_2
	b	LBB51_1
LBB51_1:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x10, [x29, #-16]
	ldr	x8, [sp, #24]
	mov	x9, sp
	str	x10, [x9]
	str	x8, [x9, #8]
	mov	w1, #2
	adrp	x2, l_.str.88@PAGE
	add	x2, x2, l_.str.88@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	b	LBB51_3
LBB51_2:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #2
	adrp	x2, l_.str.89@PAGE
	add	x2, x2, l_.str.89@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	b	LBB51_3
LBB51_3:
	mov	w0, #1
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL26read_pascal_vincent_formatPKc
__ZL26read_pascal_vincent_formatPKc:    ; @_ZL26read_pascal_vincent_formatPKc
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x0, [x29, #-8]
	ldur	x0, [x29, #-8]
	adrp	x1, l_.str.105@PAGE
	add	x1, x1, l_.str.105@PAGEOFF
	bl	_fopen
	stur	x0, [x29, #-16]
	ldur	x8, [x29, #-16]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB52_2
	b	LBB52_1
LBB52_1:
	ldur	x8, [x29, #-8]
	mov	x9, sp
	str	x8, [x9]
	mov	w0, #1
	adrp	x1, l_.str.106@PAGE
	add	x1, x1, l_.str.106@PAGEOFF
	bl	_err
LBB52_2:
	ldur	x0, [x29, #-16]
	mov	x1, #0
	mov	w2, #2
	bl	_fseek
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB52_4
	b	LBB52_3
LBB52_3:
	mov	w0, #1
	adrp	x1, l_.str.107@PAGE
	add	x1, x1, l_.str.107@PAGEOFF
	bl	_err
LBB52_4:
	ldur	x0, [x29, #-16]
	bl	_ftell
	stur	x0, [x29, #-24]
	ldur	x8, [x29, #-24]
	adds	x8, x8, #1
	cset	w8, ne
	tbnz	w8, #0, LBB52_6
	b	LBB52_5
LBB52_5:
	mov	w0, #1
	adrp	x1, l_.str.108@PAGE
	add	x1, x1, l_.str.108@PAGEOFF
	bl	_err
LBB52_6:
	ldur	x0, [x29, #-16]
	bl	_rewind
	ldur	x0, [x29, #-16]
	bl	__ZL10read_int32P7__sFILE
	stur	w0, [x29, #-28]
	ldur	w8, [x29, #-28]
	mov	w9, #256
	sdiv	w10, w8, w9
	mul	w10, w10, w9
	subs	w8, w8, w10
	stur	w8, [x29, #-32]
	ldur	w8, [x29, #-28]
	sdiv	w8, w8, w9
	stur	w8, [x29, #-36]
	ldur	w8, [x29, #-32]
	subs	w8, w8, #1
	cset	w8, eq
	mov	w9, #1
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	tbnz	w8, #0, LBB52_9
	b	LBB52_7
LBB52_7:
	ldur	w8, [x29, #-32]
	subs	w8, w8, #3
	cset	w8, eq
	mov	w9, #1
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	tbnz	w8, #0, LBB52_9
	b	LBB52_8
LBB52_8:
	ldur	w8, [x29, #-32]
	subs	w8, w8, #4
	cset	w8, eq
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	b	LBB52_9
LBB52_9:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	tbnz	w8, #0, LBB52_11
	b	LBB52_10
LBB52_10:
	adrp	x0, l___func__._ZL26read_pascal_vincent_formatPKc@PAGE
	add	x0, x0, l___func__._ZL26read_pascal_vincent_formatPKc@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #71
	adrp	x3, l_.str.109@PAGE
	add	x3, x3, l_.str.109@PAGEOFF
	bl	___assert_rtn
LBB52_11:
	b	LBB52_12
LBB52_12:
	ldur	w8, [x29, #-36]
	subs	w8, w8, #8
	cset	w8, eq
	tbnz	w8, #0, LBB52_14
	b	LBB52_13
LBB52_13:
	adrp	x0, l___func__._ZL26read_pascal_vincent_formatPKc@PAGE
	add	x0, x0, l___func__._ZL26read_pascal_vincent_formatPKc@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #72
	adrp	x3, l_.str.110@PAGE
	add	x3, x3, l_.str.110@PAGEOFF
	bl	___assert_rtn
LBB52_14:
	b	LBB52_15
LBB52_15:
	ldursw	x8, [x29, #-32]
	mov	x10, #4
	umulh	x9, x8, x10
	mul	x8, x8, x10
	subs	x9, x9, #0
	cset	w9, ne
	and	w9, w9, #0x1
	ands	w9, w9, #0x1
	csinv	x0, x8, xzr, eq
	bl	__Znam
	stur	x0, [x29, #-48]
	mov	x8, #1
	str	x8, [sp, #56]
	str	wzr, [sp, #52]
	b	LBB52_16
LBB52_16:                               ; =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #52]
	ldur	w9, [x29, #-32]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB52_19
	b	LBB52_17
LBB52_17:                               ;   in Loop: Header=BB52_16 Depth=1
	ldur	x0, [x29, #-16]
	bl	__ZL10read_int32P7__sFILE
	ldur	x8, [x29, #-48]
	ldrsw	x9, [sp, #52]
	str	w0, [x8, x9, lsl #2]
	ldur	x8, [x29, #-48]
	ldrsw	x9, [sp, #52]
	ldrsw	x9, [x8, x9, lsl #2]
	ldr	x8, [sp, #56]
	mul	x8, x8, x9
	str	x8, [sp, #56]
	b	LBB52_18
LBB52_18:                               ;   in Loop: Header=BB52_16 Depth=1
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB52_16
LBB52_19:
	ldur	x0, [x29, #-16]
	bl	_ftell
	str	x0, [sp, #40]
	ldr	x8, [sp, #40]
	adds	x8, x8, #1
	cset	w8, ne
	tbnz	w8, #0, LBB52_21
	b	LBB52_20
LBB52_20:
	mov	w0, #1
	adrp	x1, l_.str.108@PAGE
	add	x1, x1, l_.str.108@PAGEOFF
	bl	_err
LBB52_21:
	ldr	x8, [sp, #40]
	ldr	x9, [sp, #56]
	add	x8, x8, x9
	ldur	x9, [x29, #-24]
	subs	x8, x8, x9
	cset	w8, eq
	tbnz	w8, #0, LBB52_23
	b	LBB52_22
LBB52_22:
	adrp	x0, l___func__._ZL26read_pascal_vincent_formatPKc@PAGE
	add	x0, x0, l___func__._ZL26read_pascal_vincent_formatPKc@PAGEOFF
	adrp	x1, l_.str.94@PAGE
	add	x1, x1, l_.str.94@PAGEOFF
	mov	w2, #83
	adrp	x3, l_.str.111@PAGE
	add	x3, x3, l_.str.111@PAGEOFF
	bl	___assert_rtn
LBB52_23:
	b	LBB52_24
LBB52_24:
	ldr	x0, [sp, #56]
	bl	_malloc
	str	x0, [sp, #32]
	ldr	x8, [sp, #32]
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB52_26
	b	LBB52_25
LBB52_25:
	mov	w0, #1
	adrp	x1, l_.str.112@PAGE
	add	x1, x1, l_.str.112@PAGEOFF
	bl	_err
LBB52_26:
	ldr	x0, [sp, #32]
	ldr	x1, [sp, #56]
	ldur	x3, [x29, #-16]
	mov	x2, #1
	bl	_fread
	str	x0, [sp, #24]
	ldr	x8, [sp, #24]
	subs	x8, x8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB52_28
	b	LBB52_27
LBB52_27:
	mov	w0, #1
	adrp	x1, l_.str.113@PAGE
	add	x1, x1, l_.str.113@PAGEOFF
	bl	_err
LBB52_28:
	ldur	x0, [x29, #-16]
	bl	_fclose
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w1, [x29, #-32]
	ldur	w2, [x29, #-36]
	ldur	x3, [x29, #-48]
	ldr	x4, [sp, #56]
	ldr	x5, [sp, #32]
	bl	__ZN14pascal_vincentC1EiiPilPv
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN9data_itemILi1ELi28ELi28EEclEiii ; -- Begin function _ZN9data_itemILi1ELi28ELi28EEclEiii
	.weak_definition	__ZN9data_itemILi1ELi28ELi28EEclEiii
	.p2align	2
__ZN9data_itemILi1ELi28ELi28EEclEiii:   ; @_ZN9data_itemILi1ELi28ELi28EEclEiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	ldr	x8, [sp, #24]
	add	x8, x8, #788
	ldrsw	x9, [sp, #20]
	mov	x10, #3136
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	mov	x10, #112
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #12]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL10read_int32P7__sFILE
__ZL10read_int32P7__sFILE:              ; @_ZL10read_int32P7__sFILE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x3, [x29, #-8]
	sub	x0, x29, #12
	mov	x1, #4
	mov	x2, #1
	bl	_fread
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	subs	x8, x8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB54_2
	b	LBB54_1
LBB54_1:
	mov	w0, #1
	adrp	x1, l_.str.113@PAGE
	add	x1, x1, l_.str.113@PAGEOFF
	bl	_err
LBB54_2:
	str	wzr, [sp, #4]
	b	LBB54_3
LBB54_3:                                ; =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #4]
	subs	w8, w8, #4
	cset	w8, ge
	tbnz	w8, #0, LBB54_6
	b	LBB54_4
LBB54_4:                                ;   in Loop: Header=BB54_3 Depth=1
	ldr	w9, [sp, #4]
	mov	w8, #3
	subs	w9, w8, w9
	sub	x8, x29, #12
	add	x8, x8, w9, sxtw
	ldrb	w8, [x8]
	ldrsw	x10, [sp, #4]
	add	x9, sp, #16
	add	x9, x9, x10
	strb	w8, [x9]
	b	LBB54_5
LBB54_5:                                ;   in Loop: Header=BB54_3 Depth=1
	ldr	w8, [sp, #4]
	add	w8, w8, #1
	str	w8, [sp, #4]
	b	LBB54_3
LBB54_6:
	ldr	w0, [sp, #16]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN14pascal_vincentC1EiiPilPv  ; -- Begin function _ZN14pascal_vincentC1EiiPilPv
	.weak_def_can_be_hidden	__ZN14pascal_vincentC1EiiPilPv
	.p2align	2
__ZN14pascal_vincentC1EiiPilPv:         ; @_ZN14pascal_vincentC1EiiPilPv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	w2, [x29, #-16]
	str	x3, [sp, #24]
	str	x4, [sp, #16]
	str	x5, [sp, #8]
	ldur	x0, [x29, #-8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	ldur	w2, [x29, #-16]
	ldr	x3, [sp, #24]
	ldr	x4, [sp, #16]
	ldr	x5, [sp, #8]
	bl	__ZN14pascal_vincentC2EiiPilPv
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN14pascal_vincentC2EiiPilPv  ; -- Begin function _ZN14pascal_vincentC2EiiPilPv
	.weak_def_can_be_hidden	__ZN14pascal_vincentC2EiiPilPv
	.p2align	2
__ZN14pascal_vincentC2EiiPilPv:         ; @_ZN14pascal_vincentC2EiiPilPv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	str	x0, [sp, #40]
	str	w1, [sp, #36]
	str	w2, [sp, #32]
	str	x3, [sp, #24]
	str	x4, [sp, #16]
	str	x5, [sp, #8]
	ldr	x0, [sp, #40]
	ldr	w8, [sp, #36]
	str	w8, [x0]
	ldr	w8, [sp, #32]
	str	w8, [x0, #4]
	ldr	x8, [sp, #24]
	str	x8, [x0, #8]
	ldr	x8, [sp, #16]
	str	x8, [x0, #16]
	ldr	x8, [sp, #8]
	str	x8, [x0, #24]
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi28ELi28EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi1ELi28ELi28EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi1ELi28ELi28EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi1ELi28ELi28EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi1ELi28ELi28EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB57_2
	b	LBB57_1
LBB57_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB57_2:
	b	LBB57_3
LBB57_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii: ; @_ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	mov	x10, #3136
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #12]
	mov	x10, #112
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIiLi64ELi1ELi1ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIiLi64ELi1ELi1ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIiLi64ELi1ELi1ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIiLi64ELi1ELi1ELi1EE6set_n0Ei: ; @_ZN6tensorIiLi64ELi1ELi1ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB59_2
	b	LBB59_1
LBB59_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB59_2:
	b	LBB59_3
LBB59_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii ; -- Begin function _ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	.weak_definition	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	.p2align	2
__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii: ; @_ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i ; -- Begin function _Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	.weak_definition	__Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	.p2align	2
__Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i: ; @_Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i ; -- Begin function _Z6to_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	.weak_definition	__Z6to_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	.p2align	2
__Z6to_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i: ; @_Z6to_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z14ada_delta_mainiPPc         ; -- Begin function _Z14ada_delta_mainiPPc
	.p2align	2
__Z14ada_delta_mainiPPc:                ; @_Z14ada_delta_mainiPPc
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #368
	.cfi_def_cfa_offset 368
	stp	x28, x27, [sp, #336]            ; 16-byte Folded Spill
	stp	x29, x30, [sp, #352]            ; 16-byte Folded Spill
	add	x29, sp, #352
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	stur	w0, [x29, #-20]
	stur	x1, [x29, #-32]
	ldur	w0, [x29, #-20]
	ldur	x1, [x29, #-32]
	sub	x8, x29, #152
	bl	__ZL10parse_argsiPPc
	ldur	w8, [x29, #-36]
	subs	w8, w8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB63_2
	b	LBB63_1
LBB63_1:
	ldur	w8, [x29, #-40]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB63_3
	b	LBB63_2
LBB63_2:
	ldur	x8, [x29, #-32]
	ldr	x0, [x8]
	bl	__ZL5usagePKc
	b	LBB63_3
LBB63_3:
	mov	w1, #2
	str	w1, [sp, #92]                   ; 4-byte Folded Spill
	stur	w1, [x29, #-156]
	sub	x0, x29, #168
	fmov	s0, #10.00000000
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE10init_constEif
	ldr	w1, [sp, #92]                   ; 4-byte Folded Reload
	add	x0, sp, #172
	movi	d0, #0000000000000000
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE10init_constEif
	ldur	s0, [x29, #-136]
	add	x0, sp, #112
	mov	w8, #26214
	movk	w8, #16230, lsl #16
	fmov	s1, w8
	mov	w8, #14269
	movk	w8, #13702, lsl #16
	fmov	s2, w8
	bl	__ZN8AdaDeltaILi2ELi1ELi1ELi1EE4initEfff
	str	wzr, [sp, #108]
	b	LBB63_4
LBB63_4:                                ; =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #108]
	subs	w8, w8, #100
	cset	w8, ge
	tbnz	w8, #0, LBB63_7
	b	LBB63_5
LBB63_5:                                ;   in Loop: Header=BB63_4 Depth=1
	fmov	s0, #10.00000000
	str	s0, [sp, #104]
	fmov	s0, #1.00000000
	str	s0, [sp, #100]
	sub	x0, x29, #168
	str	x0, [sp, #72]                   ; 8-byte Folded Spill
	mov	w4, #0
	str	w4, [sp, #60]                   ; 4-byte Folded Spill
	mov	x1, x4
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	w4, [sp, #60]                   ; 4-byte Folded Reload
	mov	x8, x0
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	ldr	s0, [x8]
	ldr	s1, [sp, #104]
	fdiv	s0, s0, s1
	str	s0, [sp, #40]                   ; 4-byte Folded Spill
	mov	x1, x4
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	w4, [sp, #60]                   ; 4-byte Folded Reload
	mov	x8, x0
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	ldr	s0, [x8]
	ldr	s1, [sp, #104]
	fdiv	s0, s0, s1
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	mov	w1, #1
	str	w1, [sp, #56]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	w1, [sp, #56]                   ; 4-byte Folded Reload
	ldr	w4, [sp, #60]                   ; 4-byte Folded Reload
	mov	x8, x0
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	ldr	s0, [x8]
	ldr	s1, [sp, #100]
	fdiv	s0, s0, s1
	str	s0, [sp, #32]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s2, [sp, #32]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #36]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #40]                   ; 4-byte Folded Reload
	ldr	w4, [sp, #60]                   ; 4-byte Folded Reload
	mov	x8, x0
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	ldr	s3, [x8]
	ldr	s4, [sp, #100]
	fdiv	s3, s3, s4
	fmul	s2, s2, s3
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #96]
	mov	x1, x4
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	w4, [sp, #60]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmov	s0, #2.00000000
	str	s0, [sp, #48]                   ; 4-byte Folded Spill
	fmul	s0, s0, s1
	ldr	s1, [sp, #104]
	ldr	s2, [sp, #104]
	fmul	s1, s1, s2
	fdiv	s0, s0, s1
	str	s0, [sp, #44]                   ; 4-byte Folded Spill
	add	x0, sp, #172
	str	x0, [sp, #80]                   ; 8-byte Folded Spill
	mov	x1, x4
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #44]                   ; 4-byte Folded Reload
	ldr	w1, [sp, #56]                   ; 4-byte Folded Reload
	ldr	w4, [sp, #60]                   ; 4-byte Folded Reload
	mov	x8, x0
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	str	s0, [x8]
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #48]                   ; 4-byte Folded Reload
	ldr	w1, [sp, #56]                   ; 4-byte Folded Reload
	ldr	w4, [sp, #60]                   ; 4-byte Folded Reload
	mov	x8, x0
	ldr	x0, [sp, #80]                   ; 8-byte Folded Reload
	ldr	s1, [x8]
	fmul	s0, s0, s1
	ldr	s1, [sp, #100]
	ldr	s2, [sp, #100]
	fmul	s1, s1, s2
	fdiv	s0, s0, s1
	str	s0, [sp, #52]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #52]                   ; 4-byte Folded Reload
	ldr	w4, [sp, #60]                   ; 4-byte Folded Reload
	mov	x8, x0
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	str	s0, [x8]
	mov	x1, x4
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	w1, [sp, #56]                   ; 4-byte Folded Reload
	ldr	w4, [sp, #60]                   ; 4-byte Folded Reload
	mov	x8, x0
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	ldr	s0, [x8]
	fcvt	d0, s0
	str	d0, [sp, #64]                   ; 8-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	d2, [sp, #64]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	fcvt	d1, s0
	ldr	s0, [sp, #96]
	fcvt	d0, s0
	mov	x8, sp
	str	d2, [x8]
	str	d1, [x8, #8]
	str	d0, [x8, #16]
	adrp	x0, l_.str.116@PAGE
	add	x0, x0, l_.str.116@PAGEOFF
	bl	_printf
	ldr	x1, [sp, #72]                   ; 8-byte Folded Reload
	ldr	x2, [sp, #80]                   ; 8-byte Folded Reload
	add	x0, sp, #112
	bl	__ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_
	b	LBB63_6
LBB63_6:                                ;   in Loop: Header=BB63_4 Depth=1
	ldr	w8, [sp, #108]
	add	w8, w8, #1
	str	w8, [sp, #108]
	b	LBB63_4
LBB63_7:
	mov	w0, #0
	.cfi_def_cfa wsp, 368
	ldp	x29, x30, [sp, #352]            ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #336]            ; 16-byte Folded Reload
	add	sp, sp, #368
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi2ELi1ELi1ELi1EE4initEfff ; -- Begin function _ZN8AdaDeltaILi2ELi1ELi1ELi1EE4initEfff
	.weak_definition	__ZN8AdaDeltaILi2ELi1ELi1ELi1EE4initEfff
	.p2align	2
__ZN8AdaDeltaILi2ELi1ELi1ELi1EE4initEfff: ; @_ZN8AdaDeltaILi2ELi1ELi1ELi1EE4initEfff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	s1, [x29, #-16]
	stur	s2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w9, [x29, #-12]
	str	w9, [x8, #48]
	ldur	w9, [x29, #-16]
	str	w9, [x8, #52]
	ldur	w9, [x29, #-20]
	str	w9, [x8, #56]
	add	x0, x8, #12
	mov	w1, #2
	str	w1, [sp, #24]                   ; 4-byte Folded Spill
	movi	d0, #0000000000000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE10init_constEif
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE10init_constEif
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #24
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #36
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_ ; -- Begin function _ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_
	.weak_definition	__ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_
	.p2align	2
__ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_: ; @_ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	str	x2, [sp, #24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #2
	cset	w8, eq
	tbnz	w8, #0, LBB65_2
	b	LBB65_1
LBB65_1:
	adrp	x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGE
	add	x0, x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGEOFF
	adrp	x1, l_.str.117@PAGE
	add	x1, x1, l_.str.117@PAGEOFF
	mov	w2, #49
	adrp	x3, l_.str.118@PAGE
	add	x3, x3, l_.str.118@PAGEOFF
	bl	___assert_rtn
LBB65_2:
	b	LBB65_3
LBB65_3:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #52]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #52]
	fmov	s0, #1.00000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	fsub	s0, s0, s1
	ldr	x1, [sp, #24]
	ldr	x2, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #56]
	add	x1, x0, #24
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #12
	ldr	s0, [x8, #56]
	add	x1, x8, #36
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x1, x8, #24
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_
	ldr	x1, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_ERS0_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #12
	ldr	s0, [x8, #52]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #52]
	fsub	s0, s0, s1
	add	x1, x8, #36
	add	x2, x8, #36
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x0, [x29, #-16]
	ldr	s0, [x8, #48]
	fneg	s0, s0
	add	x1, x8, #36
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef:  ; @_ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB66_2
	b	LBB66_1
LBB66_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #218
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB66_2:
	b	LBB66_3
LBB66_3:
	stur	wzr, [x29, #-28]
	b	LBB66_4
LBB66_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB66_6 Depth 2
                                        ;       Child Loop BB66_8 Depth 3
                                        ;         Child Loop BB66_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB66_19
	b	LBB66_5
LBB66_5:                                ;   in Loop: Header=BB66_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB66_6
LBB66_6:                                ;   Parent Loop BB66_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB66_8 Depth 3
                                        ;         Child Loop BB66_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB66_17
	b	LBB66_7
LBB66_7:                                ;   in Loop: Header=BB66_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB66_8
LBB66_8:                                ;   Parent Loop BB66_4 Depth=1
                                        ;     Parent Loop BB66_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB66_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB66_15
	b	LBB66_9
LBB66_9:                                ;   in Loop: Header=BB66_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB66_10
LBB66_10:                               ;   Parent Loop BB66_4 Depth=1
                                        ;     Parent Loop BB66_6 Depth=2
                                        ;       Parent Loop BB66_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB66_13
	b	LBB66_11
LBB66_11:                               ;   in Loop: Header=BB66_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB66_12
LBB66_12:                               ;   in Loop: Header=BB66_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB66_10
LBB66_13:                               ;   in Loop: Header=BB66_8 Depth=3
	b	LBB66_14
LBB66_14:                               ;   in Loop: Header=BB66_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB66_8
LBB66_15:                               ;   in Loop: Header=BB66_6 Depth=2
	b	LBB66_16
LBB66_16:                               ;   in Loop: Header=BB66_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB66_6
LBB66_17:                               ;   in Loop: Header=BB66_4 Depth=1
	b	LBB66_18
LBB66_18:                               ;   in Loop: Header=BB66_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB66_4
LBB66_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_ ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_: ; @_ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	stur	x2, [x29, #-32]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	str	x8, [sp, #40]
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB67_2
	b	LBB67_1
LBB67_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #290
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB67_2:
	b	LBB67_3
LBB67_3:
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB67_5
	b	LBB67_4
LBB67_4:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #291
	adrp	x3, l_.str.120@PAGE
	add	x3, x3, l_.str.120@PAGEOFF
	bl	___assert_rtn
LBB67_5:
	b	LBB67_6
LBB67_6:
	str	wzr, [sp, #36]
	b	LBB67_7
LBB67_7:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB67_9 Depth 2
                                        ;       Child Loop BB67_11 Depth 3
                                        ;         Child Loop BB67_13 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB67_22
	b	LBB67_8
LBB67_8:                                ;   in Loop: Header=BB67_7 Depth=1
	str	wzr, [sp, #32]
	b	LBB67_9
LBB67_9:                                ;   Parent Loop BB67_7 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB67_11 Depth 3
                                        ;         Child Loop BB67_13 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB67_20
	b	LBB67_10
LBB67_10:                               ;   in Loop: Header=BB67_9 Depth=2
	str	wzr, [sp, #28]
	b	LBB67_11
LBB67_11:                               ;   Parent Loop BB67_7 Depth=1
                                        ;     Parent Loop BB67_9 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB67_13 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB67_18
	b	LBB67_12
LBB67_12:                               ;   in Loop: Header=BB67_11 Depth=3
	str	wzr, [sp, #24]
	b	LBB67_13
LBB67_13:                               ;   Parent Loop BB67_7 Depth=1
                                        ;     Parent Loop BB67_9 Depth=2
                                        ;       Parent Loop BB67_11 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB67_16
	b	LBB67_14
LBB67_14:                               ;   in Loop: Header=BB67_13 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB67_15
LBB67_15:                               ;   in Loop: Header=BB67_13 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB67_13
LBB67_16:                               ;   in Loop: Header=BB67_11 Depth=3
	b	LBB67_17
LBB67_17:                               ;   in Loop: Header=BB67_11 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB67_11
LBB67_18:                               ;   in Loop: Header=BB67_9 Depth=2
	b	LBB67_19
LBB67_19:                               ;   in Loop: Header=BB67_9 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB67_9
LBB67_20:                               ;   in Loop: Header=BB67_7 Depth=1
	b	LBB67_21
LBB67_21:                               ;   in Loop: Header=BB67_7 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB67_7
LBB67_22:
	ldr	x0, [sp, #40]
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_ ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_: ; @_ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB68_2
	b	LBB68_1
LBB68_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #309
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB68_2:
	b	LBB68_3
LBB68_3:
	str	wzr, [sp, #28]
	b	LBB68_4
LBB68_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB68_6 Depth 2
                                        ;       Child Loop BB68_8 Depth 3
                                        ;         Child Loop BB68_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB68_19
	b	LBB68_5
LBB68_5:                                ;   in Loop: Header=BB68_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB68_6
LBB68_6:                                ;   Parent Loop BB68_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB68_8 Depth 3
                                        ;         Child Loop BB68_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB68_17
	b	LBB68_7
LBB68_7:                                ;   in Loop: Header=BB68_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB68_8
LBB68_8:                                ;   Parent Loop BB68_4 Depth=1
                                        ;     Parent Loop BB68_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB68_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB68_15
	b	LBB68_9
LBB68_9:                                ;   in Loop: Header=BB68_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB68_10
LBB68_10:                               ;   Parent Loop BB68_4 Depth=1
                                        ;     Parent Loop BB68_6 Depth=2
                                        ;       Parent Loop BB68_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB68_13
	b	LBB68_11
LBB68_11:                               ;   in Loop: Header=BB68_10 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	ldur	s1, [x29, #-12]
	fadd	s0, s0, s1
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB68_12
LBB68_12:                               ;   in Loop: Header=BB68_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB68_10
LBB68_13:                               ;   in Loop: Header=BB68_8 Depth=3
	b	LBB68_14
LBB68_14:                               ;   in Loop: Header=BB68_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB68_8
LBB68_15:                               ;   in Loop: Header=BB68_6 Depth=2
	b	LBB68_16
LBB68_16:                               ;   in Loop: Header=BB68_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB68_6
LBB68_17:                               ;   in Loop: Header=BB68_4 Depth=1
	b	LBB68_18
LBB68_18:                               ;   in Loop: Header=BB68_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB68_4
LBB68_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev: ; @_ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x8, [x29, #-16]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB69_2
	b	LBB69_1
LBB69_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #272
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB69_2:
	b	LBB69_3
LBB69_3:
	stur	wzr, [x29, #-20]
	b	LBB69_4
LBB69_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB69_6 Depth 2
                                        ;       Child Loop BB69_8 Depth 3
                                        ;         Child Loop BB69_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-20]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB69_19
	b	LBB69_5
LBB69_5:                                ;   in Loop: Header=BB69_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB69_6
LBB69_6:                                ;   Parent Loop BB69_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB69_8 Depth 3
                                        ;         Child Loop BB69_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB69_17
	b	LBB69_7
LBB69_7:                                ;   in Loop: Header=BB69_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB69_8
LBB69_8:                                ;   Parent Loop BB69_4 Depth=1
                                        ;     Parent Loop BB69_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB69_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB69_15
	b	LBB69_9
LBB69_9:                                ;   in Loop: Header=BB69_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB69_10
LBB69_10:                               ;   Parent Loop BB69_4 Depth=1
                                        ;     Parent Loop BB69_6 Depth=2
                                        ;       Parent Loop BB69_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB69_13
	b	LBB69_11
LBB69_11:                               ;   in Loop: Header=BB69_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	bl	__Z4sqrtB6v15007f
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB69_12
LBB69_12:                               ;   in Loop: Header=BB69_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB69_10
LBB69_13:                               ;   in Loop: Header=BB69_8 Depth=3
	b	LBB69_14
LBB69_14:                               ;   in Loop: Header=BB69_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB69_8
LBB69_15:                               ;   in Loop: Header=BB69_6 Depth=2
	b	LBB69_16
LBB69_16:                               ;   in Loop: Header=BB69_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB69_6
LBB69_17:                               ;   in Loop: Header=BB69_4 Depth=1
	b	LBB69_18
LBB69_18:                               ;   in Loop: Header=BB69_4 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1
	stur	w8, [x29, #-20]
	b	LBB69_4
LBB69_19:
	ldur	x0, [x29, #-16]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_ ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_: ; @_ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB70_2
	b	LBB70_1
LBB70_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #254
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB70_2:
	b	LBB70_3
LBB70_3:
	stur	wzr, [x29, #-28]
	b	LBB70_4
LBB70_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB70_6 Depth 2
                                        ;       Child Loop BB70_8 Depth 3
                                        ;         Child Loop BB70_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB70_19
	b	LBB70_5
LBB70_5:                                ;   in Loop: Header=BB70_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB70_6
LBB70_6:                                ;   Parent Loop BB70_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB70_8 Depth 3
                                        ;         Child Loop BB70_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB70_17
	b	LBB70_7
LBB70_7:                                ;   in Loop: Header=BB70_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB70_8
LBB70_8:                                ;   Parent Loop BB70_4 Depth=1
                                        ;     Parent Loop BB70_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB70_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB70_15
	b	LBB70_9
LBB70_9:                                ;   in Loop: Header=BB70_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB70_10
LBB70_10:                               ;   Parent Loop BB70_4 Depth=1
                                        ;     Parent Loop BB70_6 Depth=2
                                        ;       Parent Loop BB70_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB70_13
	b	LBB70_11
LBB70_11:                               ;   in Loop: Header=BB70_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fdiv	s0, s0, s1
	str	s0, [x0]
	b	LBB70_12
LBB70_12:                               ;   in Loop: Header=BB70_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB70_10
LBB70_13:                               ;   in Loop: Header=BB70_8 Depth=3
	b	LBB70_14
LBB70_14:                               ;   in Loop: Header=BB70_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB70_8
LBB70_15:                               ;   in Loop: Header=BB70_6 Depth=2
	b	LBB70_16
LBB70_16:                               ;   in Loop: Header=BB70_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB70_6
LBB70_17:                               ;   in Loop: Header=BB70_4 Depth=1
	b	LBB70_18
LBB70_18:                               ;   in Loop: Header=BB70_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB70_4
LBB70_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_ERS0_ ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_ERS0_
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_ERS0_
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_ERS0_: ; @_ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB71_2
	b	LBB71_1
LBB71_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #236
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB71_2:
	b	LBB71_3
LBB71_3:
	stur	wzr, [x29, #-28]
	b	LBB71_4
LBB71_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB71_6 Depth 2
                                        ;       Child Loop BB71_8 Depth 3
                                        ;         Child Loop BB71_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB71_19
	b	LBB71_5
LBB71_5:                                ;   in Loop: Header=BB71_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB71_6
LBB71_6:                                ;   Parent Loop BB71_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB71_8 Depth 3
                                        ;         Child Loop BB71_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB71_17
	b	LBB71_7
LBB71_7:                                ;   in Loop: Header=BB71_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB71_8
LBB71_8:                                ;   Parent Loop BB71_4 Depth=1
                                        ;     Parent Loop BB71_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB71_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB71_15
	b	LBB71_9
LBB71_9:                                ;   in Loop: Header=BB71_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB71_10
LBB71_10:                               ;   Parent Loop BB71_4 Depth=1
                                        ;     Parent Loop BB71_6 Depth=2
                                        ;       Parent Loop BB71_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB71_13
	b	LBB71_11
LBB71_11:                               ;   in Loop: Header=BB71_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB71_12
LBB71_12:                               ;   in Loop: Header=BB71_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB71_10
LBB71_13:                               ;   in Loop: Header=BB71_8 Depth=3
	b	LBB71_14
LBB71_14:                               ;   in Loop: Header=BB71_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB71_8
LBB71_15:                               ;   in Loop: Header=BB71_6 Depth=2
	b	LBB71_16
LBB71_16:                               ;   in Loop: Header=BB71_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB71_6
LBB71_17:                               ;   in Loop: Header=BB71_4 Depth=1
	b	LBB71_18
LBB71_18:                               ;   in Loop: Header=BB71_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB71_4
LBB71_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_: ; @_ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB72_2
	b	LBB72_1
LBB72_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB72_2:
	b	LBB72_3
LBB72_3:
	str	wzr, [sp, #28]
	b	LBB72_4
LBB72_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB72_6 Depth 2
                                        ;       Child Loop BB72_8 Depth 3
                                        ;         Child Loop BB72_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB72_19
	b	LBB72_5
LBB72_5:                                ;   in Loop: Header=BB72_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB72_6
LBB72_6:                                ;   Parent Loop BB72_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB72_8 Depth 3
                                        ;         Child Loop BB72_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB72_17
	b	LBB72_7
LBB72_7:                                ;   in Loop: Header=BB72_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB72_8
LBB72_8:                                ;   Parent Loop BB72_4 Depth=1
                                        ;     Parent Loop BB72_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB72_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB72_15
	b	LBB72_9
LBB72_9:                                ;   in Loop: Header=BB72_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB72_10
LBB72_10:                               ;   Parent Loop BB72_4 Depth=1
                                        ;     Parent Loop BB72_6 Depth=2
                                        ;       Parent Loop BB72_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB72_13
	b	LBB72_11
LBB72_11:                               ;   in Loop: Header=BB72_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi2ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB72_12
LBB72_12:                               ;   in Loop: Header=BB72_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB72_10
LBB72_13:                               ;   in Loop: Header=BB72_8 Depth=3
	b	LBB72_14
LBB72_14:                               ;   in Loop: Header=BB72_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB72_8
LBB72_15:                               ;   in Loop: Header=BB72_6 Depth=2
	b	LBB72_16
LBB72_16:                               ;   in Loop: Header=BB72_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB72_6
LBB72_17:                               ;   in Loop: Header=BB72_4 Depth=1
	b	LBB72_18
LBB72_18:                               ;   in Loop: Header=BB72_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB72_4
LBB72_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.private_extern	__Z4sqrtB6v15007f       ; -- Begin function _Z4sqrtB6v15007f
	.globl	__Z4sqrtB6v15007f
	.weak_definition	__Z4sqrtB6v15007f
	.p2align	2
__Z4sqrtB6v15007f:                      ; @_Z4sqrtB6v15007f
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, #12]
	ldr	s0, [sp, #12]
	fsqrt	s0, s0
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z16convolution_mainiPPc       ; -- Begin function _Z16convolution_mainiPPc
	.p2align	2
__Z16convolution_mainiPPc:              ; @_Z16convolution_mainiPPc
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #640
	add	x8, sp, #184
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	str	w0, [x8, #452]
	str	x1, [x8, #440]
	ldr	w0, [x8, #452]
	ldr	x1, [x8, #440]
	sub	x8, x29, #152
	bl	__ZL10parse_argsiPPc
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w8, [x8, #436]
	subs	w8, w8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB74_2
	b	LBB74_1
LBB74_1:
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w8, [x8, #432]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB74_3
	b	LBB74_2
LBB74_2:
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #440]
	ldr	x0, [x8]
	bl	__ZL5usagePKc
	b	LBB74_3
LBB74_3:
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	mov	w0, #64
	str	w0, [x8, #316]
	sub	x9, x29, #152
	str	x9, [sp, #16]                   ; 8-byte Folded Spill
	ldr	w1, [x8, #352]
	bl	__ZL5min_iii
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	str	w0, [x9, #312]
	mov	w8, #1
	str	w8, [x9, #308]
	mov	w8, #28
	str	w8, [x9, #304]
	str	w8, [x9, #300]
	mov	w8, #3
	str	w8, [x9, #296]
	mov	w8, #32
	str	w8, [x9, #292]
	ldr	x8, [x9, #344]
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [x9, #288]
	add	x0, sp, #336
	str	x0, [sp, #24]                   ; 8-byte Folded Spill
	bl	__ZN6loggerC1Ev
	ldr	x1, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, sp, #216
	str	x0, [sp, #32]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #32]                   ; 8-byte Folded Reload
	bl	__ZN6logger9start_logE11cmdline_opt
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x1, [x8, #376]
	add	x0, sp, #208
	bl	__ZN9rnd_gen_t4seedEy
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	movi	d0, #0000000000000000
	str	d0, [x8, #16]
	str	d0, [x8, #8]
	str	wzr, [x8]
	b	LBB74_4
LBB74_4:                                ; =>This Inner Loop Header: Depth=1
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w8, [x9]
	ldr	w9, [x9, #288]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB74_7
	b	LBB74_5
LBB74_5:                                ;   in Loop: Header=BB74_4 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w9, [x8]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.121@PAGE
	add	x0, x0, l_.str.121@PAGEOFF
	bl	_printf
	add	x0, sp, #56
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	sub	x1, x29, #152
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w3, [x8, #312]
	add	x1, sp, #336
	add	x2, sp, #208
	bl	__ZL10grad_checkI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6tensorIfLi64ELi1ELi28ELi28EES2_IfLi64ELi32ELi26ELi26EE16Convolution2DCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	str	d0, [sp, #176]
	ldr	d0, [x8, #16]
	fcvt	s0, d0
	ldr	d1, [sp, #176]
	fcvt	s1, d1
	bl	__ZL5max_rff
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [x8, #16]
	ldr	d1, [sp, #176]
	ldr	d0, [x8, #8]
	fadd	d0, d0, d1
	str	d0, [x8, #8]
	b	LBB74_6
LBB74_6:                                ;   in Loop: Header=BB74_4 Depth=1
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w8, [x9]
	add	w8, w8, #1
	str	w8, [x9]
	b	LBB74_4
LBB74_7:
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #16]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.122@PAGE
	add	x0, x0, l_.str.122@PAGEOFF
	bl	_printf
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	d0, [x8, #8]
	ldr	s2, [x8, #288]
                                        ; implicit-def: $d1
	fmov	s1, s2
	sshll.2d	v1, v1, #0
                                        ; kill: def $d1 killed $d1 killed $q1
	scvtf	d1, d1
	fdiv	d0, d0, d1
	mov	x8, sp
	str	d0, [x8]
	adrp	x0, l_.str.123@PAGE
	add	x0, x0, l_.str.123@PAGEOFF
	bl	_printf
	add	x0, sp, #336
	bl	__ZN6logger7end_logEv
	mov	w0, #0
	add	sp, sp, #640
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL10grad_checkI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6tensorIfLi64ELi1ELi28ELi28EES2_IfLi64ELi32ELi26ELi26EE16Convolution2DCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
__ZL10grad_checkI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6tensorIfLi64ELi1ELi28ELi28EES2_IfLi64ELi32ELi26ELi26EE16Convolution2DCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i: ; @_ZL10grad_checkI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6tensorIfLi64ELi1ELi28ELi28EES2_IfLi64ELi32ELi26ELi26EE16Convolution2DCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
Lfunc_begin0:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception0
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	.cfi_remember_state
	sub	sp, sp, #496
	str	x0, [sp, #144]                  ; 8-byte Folded Spill
	stur	x1, [x29, #-32]
	stur	x2, [x29, #-40]
	stur	w3, [x29, #-44]
	mov	x0, #44760
	movk	x0, #87, lsl #16
	str	x0, [sp, #152]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #152]                  ; 8-byte Folded Reload
	str	x0, [sp, #160]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #160]                  ; 8-byte Folded Reload
Ltmp19:
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC1Ev
Ltmp20:
	b	LBB75_1
LBB75_1:
	ldr	x1, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #160]                  ; 8-byte Folded Reload
	stur	x8, [x29, #-56]
	ldur	x8, [x29, #-56]
	str	x8, [sp, #56]                   ; 8-byte Folded Spill
	sub	x0, x29, #192
	str	x0, [sp, #64]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #56]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #64]                   ; 8-byte Folded Reload
	ldur	x2, [x29, #-32]
	ldur	x3, [x29, #-40]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg
	mov	x0, #4100
	movk	x0, #3, lsl #16
	str	x0, [sp, #104]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #72]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	stur	x0, [x29, #-208]
	ldur	x0, [x29, #-208]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	fmov	s0, #-1.00000000
	str	s0, [sp, #96]                   ; 4-byte Folded Spill
	fmov	s1, #1.00000000
	str	s1, [sp, #100]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE12init_uniformEiR9rnd_gen_tff
	mov	x0, #32772
	movk	x0, #84, lsl #16
	str	x0, [sp, #80]                   ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #80]                   ; 8-byte Folded Reload
	str	x0, [sp, #88]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #88]                   ; 8-byte Folded Reload
	ldr	s0, [sp, #96]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #100]                  ; 4-byte Folded Reload
	stur	x0, [x29, #-216]
	ldur	x0, [x29, #-216]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE12init_uniformEiR9rnd_gen_tff
	ldr	x0, [sp, #104]                  ; 8-byte Folded Reload
	mov	w8, #4719
	movk	w8, #14979, lsl #16
	fmov	s0, w8
	stur	s0, [x29, #-220]
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #112]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #112]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-232]
	ldur	x0, [x29, #-232]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	ldur	s0, [x29, #-220]
	fneg	s0, s0
	ldur	s1, [x29, #-220]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi1ELi28ELi28EEEPT_S3_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-240]
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi1ELi28ELi28EEEPT_S3_i
	stur	x0, [x29, #-248]
	ldur	x0, [x29, #-240]
	ldur	x1, [x29, #-232]
	fmov	s0, #-0.50000000
	str	s0, [sp, #124]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE4add_EfRS0_
	ldur	x0, [x29, #-248]
	ldur	x1, [x29, #-232]
	fmov	s0, #0.50000000
	str	s0, [sp, #128]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE4add_EfRS0_
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEPT_S3_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #256]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEPT_S3_i
	str	x0, [sp, #248]
	ldr	x0, [sp, #256]
	ldur	x1, [x29, #-40]
	ldur	s0, [x29, #-220]
	fneg	s0, s0
	ldur	s1, [x29, #-220]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9rand_gradER9rnd_gen_tff
	ldr	x0, [sp, #248]
	ldr	x1, [sp, #256]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9copy_gradERS0_
	ldr	s0, [sp, #124]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #256]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8add_gradEf
	ldr	s0, [sp, #128]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #248]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8add_gradEf
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-216]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	ldur	x0, [x29, #-56]
	ldur	x1, [x29, #-208]
	mov	w2, #1
	str	w2, [sp, #132]                  ; 4-byte Folded Spill
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi
	str	x0, [sp, #240]
	ldur	x0, [x29, #-56]
	ldur	x1, [x29, #-216]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	ldr	w2, [sp, #132]                  ; 4-byte Folded Reload
	str	x0, [sp, #232]
	ldr	x0, [sp, #256]
	ldur	x1, [x29, #-240]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi
	ldr	w2, [sp, #132]                  ; 4-byte Folded Reload
	str	x0, [sp, #224]
	ldr	x0, [sp, #248]
	ldur	x1, [x29, #-248]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #216]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #224]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE3dotERS0_
	str	d0, [sp, #208]
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #240]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE3dotERS0_
	str	d0, [sp, #200]
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #216]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE3dotERS0_
	str	d0, [sp, #192]
	ldr	x0, [sp, #232]
	ldur	x1, [x29, #-232]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE3dotERS0_
	str	d0, [sp, #184]
	ldur	x0, [x29, #-56]
	ldr	x1, [sp, #256]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13grad_dot_gradERS0_
	str	d0, [sp, #176]
	ldr	d0, [sp, #184]
	ldr	d1, [sp, #176]
	ldr	d2, [sp, #208]
	ldr	d3, [sp, #200]
	ldr	d4, [sp, #192]
	bl	__ZL10show_errorddddd
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [sp, #168]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-216]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-232]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldur	x8, [x29, #-56]
	str	x8, [sp, #136]                  ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB75_3
	b	LBB75_2
LBB75_2:
	ldr	x0, [sp, #136]                  ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB75_3
LBB75_3:
	ldr	x8, [sp, #256]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB75_5
	b	LBB75_4
LBB75_4:
	ldr	x0, [sp, #48]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB75_5
LBB75_5:
	ldr	x8, [sp, #248]
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB75_7
	b	LBB75_6
LBB75_6:
	ldr	x0, [sp, #40]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB75_7
LBB75_7:
	ldur	x8, [x29, #-216]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB75_9
	b	LBB75_8
LBB75_8:
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB75_9
LBB75_9:
	ldur	x8, [x29, #-208]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB75_11
	b	LBB75_10
LBB75_10:
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB75_11
LBB75_11:
	ldur	x8, [x29, #-232]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB75_13
	b	LBB75_12
LBB75_12:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB75_13
LBB75_13:
	ldur	x8, [x29, #-240]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB75_15
	b	LBB75_14
LBB75_14:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB75_15
LBB75_15:
	ldur	x8, [x29, #-248]
	str	x8, [sp]                        ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB75_17
	b	LBB75_16
LBB75_16:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB75_17
LBB75_17:
	ldr	d0, [sp, #168]
	add	sp, sp, #496
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
LBB75_18:
	.cfi_restore_state
Ltmp21:
	mov	x9, x0
	ldr	x0, [sp, #160]                  ; 8-byte Folded Reload
	mov	x8, x1
	stur	x9, [x29, #-64]
	stur	w8, [x29, #-68]
	bl	__ZdlPv
	b	LBB75_19
LBB75_19:
	ldur	x0, [x29, #-64]
	bl	__Unwind_Resume
Lfunc_end0:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table75:
Lexception0:
	.byte	255                             ; @LPStart Encoding = omit
	.byte	255                             ; @TType Encoding = omit
	.byte	1                               ; Call site Encoding = uleb128
	.uleb128 Lcst_end0-Lcst_begin0
Lcst_begin0:
	.uleb128 Lfunc_begin0-Lfunc_begin0      ; >> Call Site 1 <<
	.uleb128 Ltmp19-Lfunc_begin0            ;   Call between Lfunc_begin0 and Ltmp19
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp19-Lfunc_begin0            ; >> Call Site 2 <<
	.uleb128 Ltmp20-Ltmp19                  ;   Call between Ltmp19 and Ltmp20
	.uleb128 Ltmp21-Lfunc_begin0            ;     jumps to Ltmp21
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp20-Lfunc_begin0            ; >> Call Site 3 <<
	.uleb128 Lfunc_end0-Ltmp20              ;   Call between Ltmp20 and Lfunc_end0
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
Lcst_end0:
	.p2align	2
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC1Ev ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC1Ev
	.weak_def_can_be_hidden	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC1Ev
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC1Ev: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x1, [sp, #24]                   ; 8-byte Folded Spill
	stur	x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	ldur	x0, [x29, #-16]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-24]
	str	x8, [x9, #120]
	mov	w0, #9
	bl	__Z4sqrtB6v15007IiENSt3__19enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	fmov	d1, d0
	fmov	d0, #1.00000000
	fdiv	d0, d0, d1
	fcvt	s0, d0
	stur	s0, [x29, #-36]
	add	x0, x8, #136
	ldur	x2, [x29, #-32]
	ldur	s0, [x29, #-36]
	fneg	s0, s0
	ldur	s1, [x29, #-36]
	mov	w1, #32
	str	w1, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE12init_uniformEiR9rnd_gen_tff
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #1292
	ldur	x2, [x29, #-32]
	ldur	s0, [x29, #-36]
	fneg	s0, s0
	ldur	s1, [x29, #-36]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #39584
	movk	x9, #87, lsl #16
	add	x0, x8, x9
	ldr	s0, [x1, #16]
	mov	w8, #26214
	movk	w8, #16230, lsl #16
	fmov	s1, w8
	str	s1, [sp, #36]                   ; 4-byte Folded Spill
	mov	w8, #14269
	movk	w8, #13702, lsl #16
	fmov	s2, w8
	str	s2, [sp, #40]                   ; 4-byte Folded Spill
	bl	__ZN8AdaDeltaILi32ELi1ELi3ELi3EE4initEfff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s1, [sp, #36]                   ; 4-byte Folded Reload
	ldr	s2, [sp, #40]                   ; 4-byte Folded Reload
	mov	x9, #44220
	movk	x9, #87, lsl #16
	add	x0, x8, x9
	ldr	s0, [x1, #16]
	bl	__ZN8AdaDeltaILi32ELi1ELi1ELi1EE4initEfff
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi28ELi28EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi64ELi1ELi28ELi28EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi64ELi1ELi28ELi28EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi64ELi1ELi28ELi28EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi64ELi1ELi28ELi28EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB78_1
LBB78_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB78_3 Depth 2
                                        ;       Child Loop BB78_5 Depth 3
                                        ;         Child Loop BB78_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB78_16
	b	LBB78_2
LBB78_2:                                ;   in Loop: Header=BB78_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB78_3
LBB78_3:                                ;   Parent Loop BB78_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB78_5 Depth 3
                                        ;         Child Loop BB78_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB78_14
	b	LBB78_4
LBB78_4:                                ;   in Loop: Header=BB78_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB78_5
LBB78_5:                                ;   Parent Loop BB78_1 Depth=1
                                        ;     Parent Loop BB78_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB78_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB78_12
	b	LBB78_6
LBB78_6:                                ;   in Loop: Header=BB78_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB78_7
LBB78_7:                                ;   Parent Loop BB78_1 Depth=1
                                        ;     Parent Loop BB78_3 Depth=2
                                        ;       Parent Loop BB78_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB78_10
	b	LBB78_8
LBB78_8:                                ;   in Loop: Header=BB78_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB78_9
LBB78_9:                                ;   in Loop: Header=BB78_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB78_7
LBB78_10:                               ;   in Loop: Header=BB78_5 Depth=3
	b	LBB78_11
LBB78_11:                               ;   in Loop: Header=BB78_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB78_5
LBB78_12:                               ;   in Loop: Header=BB78_3 Depth=2
	b	LBB78_13
LBB78_13:                               ;   in Loop: Header=BB78_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB78_3
LBB78_14:                               ;   in Loop: Header=BB78_1 Depth=1
	b	LBB78_15
LBB78_15:                               ;   in Loop: Header=BB78_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB78_1
LBB78_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi26ELi26EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi64ELi32ELi26ELi26EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi64ELi32ELi26ELi26EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi64ELi32ELi26ELi26EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi64ELi32ELi26ELi26EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB79_1
LBB79_1:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB79_3 Depth 2
                                        ;       Child Loop BB79_5 Depth 3
                                        ;         Child Loop BB79_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB79_16
	b	LBB79_2
LBB79_2:                                ;   in Loop: Header=BB79_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB79_3
LBB79_3:                                ;   Parent Loop BB79_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB79_5 Depth 3
                                        ;         Child Loop BB79_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB79_14
	b	LBB79_4
LBB79_4:                                ;   in Loop: Header=BB79_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB79_5
LBB79_5:                                ;   Parent Loop BB79_1 Depth=1
                                        ;     Parent Loop BB79_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB79_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB79_12
	b	LBB79_6
LBB79_6:                                ;   in Loop: Header=BB79_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB79_7
LBB79_7:                                ;   Parent Loop BB79_1 Depth=1
                                        ;     Parent Loop BB79_3 Depth=2
                                        ;       Parent Loop BB79_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB79_10
	b	LBB79_8
LBB79_8:                                ;   in Loop: Header=BB79_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB79_9
LBB79_9:                                ;   in Loop: Header=BB79_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB79_7
LBB79_10:                               ;   in Loop: Header=BB79_5 Depth=3
	b	LBB79_11
LBB79_11:                               ;   in Loop: Header=BB79_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB79_5
LBB79_12:                               ;   in Loop: Header=BB79_3 Depth=2
	b	LBB79_13
LBB79_13:                               ;   in Loop: Header=BB79_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB79_3
LBB79_14:                               ;   in Loop: Header=BB79_1 Depth=1
	b	LBB79_15
LBB79_15:                               ;   in Loop: Header=BB79_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB79_1
LBB79_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI6tensorIfLi64ELi1ELi28ELi28EEEPT_S3_i ; -- Begin function _Z9make_copyI6tensorIfLi64ELi1ELi28ELi28EEEPT_S3_i
	.weak_definition	__Z9make_copyI6tensorIfLi64ELi1ELi28ELi28EEEPT_S3_i
	.p2align	2
__Z9make_copyI6tensorIfLi64ELi1ELi28ELi28EEEPT_S3_i: ; @_Z9make_copyI6tensorIfLi64ELi1ELi28ELi28EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #4100
	movk	x0, #3, lsl #16
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi28ELi28EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi28ELi28EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi28ELi28EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi28ELi28EE4add_EfRS0_: ; @_ZN6tensorIfLi64ELi1ELi28ELi28EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB81_2
	b	LBB81_1
LBB81_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB81_2:
	b	LBB81_3
LBB81_3:
	str	wzr, [sp, #28]
	b	LBB81_4
LBB81_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB81_6 Depth 2
                                        ;       Child Loop BB81_8 Depth 3
                                        ;         Child Loop BB81_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB81_19
	b	LBB81_5
LBB81_5:                                ;   in Loop: Header=BB81_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB81_6
LBB81_6:                                ;   Parent Loop BB81_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB81_8 Depth 3
                                        ;         Child Loop BB81_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB81_17
	b	LBB81_7
LBB81_7:                                ;   in Loop: Header=BB81_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB81_8
LBB81_8:                                ;   Parent Loop BB81_4 Depth=1
                                        ;     Parent Loop BB81_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB81_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB81_15
	b	LBB81_9
LBB81_9:                                ;   in Loop: Header=BB81_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB81_10
LBB81_10:                               ;   Parent Loop BB81_4 Depth=1
                                        ;     Parent Loop BB81_6 Depth=2
                                        ;       Parent Loop BB81_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB81_13
	b	LBB81_11
LBB81_11:                               ;   in Loop: Header=BB81_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB81_12
LBB81_12:                               ;   in Loop: Header=BB81_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB81_10
LBB81_13:                               ;   in Loop: Header=BB81_8 Depth=3
	b	LBB81_14
LBB81_14:                               ;   in Loop: Header=BB81_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB81_8
LBB81_15:                               ;   in Loop: Header=BB81_6 Depth=2
	b	LBB81_16
LBB81_16:                               ;   in Loop: Header=BB81_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB81_6
LBB81_17:                               ;   in Loop: Header=BB81_4 Depth=1
	b	LBB81_18
LBB81_18:                               ;   in Loop: Header=BB81_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB81_4
LBB81_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEPT_S3_i ; -- Begin function _Z9make_copyI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEPT_S3_i
	.weak_definition	__Z9make_copyI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEPT_S3_i
	.p2align	2
__Z9make_copyI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEPT_S3_i: ; @_Z9make_copyI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #44760
	movk	x0, #87, lsl #16
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9rand_gradER9rnd_gen_tff ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9rand_gradER9rnd_gen_tff
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9rand_gradER9rnd_gen_tff
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9rand_gradER9rnd_gen_tff: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9rand_gradER9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	s0, [x29, #-20]
	str	s1, [sp, #24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, #34196
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldur	x2, [x29, #-16]
	ldur	s0, [x29, #-20]
	ldr	s1, [sp, #24]
	mov	w1, #32
	str	w1, [sp, #20]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w1, [sp, #20]                   ; 4-byte Folded Reload
	mov	x9, #35352
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldur	x2, [x29, #-16]
	ldur	s0, [x29, #-20]
	ldr	s1, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9copy_gradERS0_ ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9copy_gradERS0_
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9copy_gradERS0_
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9copy_gradERS0_: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9copy_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x10, [sp, #16]
	mov	x9, #34196
	movk	x9, #84, lsl #16
	add	x1, x10, x9
	add	x0, x8, x9
	mov	x2, #1156
	bl	_memcpy
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x10, [sp, #16]
	mov	x9, #35352
	movk	x9, #84, lsl #16
	add	x1, x10, x9
	add	x0, x8, x9
	mov	x2, #132
	bl	_memcpy
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8add_gradEf ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8add_gradEf
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8add_gradEf
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8add_gradEf: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8add_gradEf
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, x8
	add	x0, x9, #136
	ldur	s0, [x29, #-12]
	mov	x9, #34196
	movk	x9, #84, lsl #16
	add	x1, x8, x9
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE4add_EfRS0_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, x8
	add	x0, x9, #1292
	ldur	s0, [x29, #-12]
	mov	x9, #35352
	movk	x9, #84, lsl #16
	add	x1, x8, x9
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i ; -- Begin function _Z6to_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i
	.weak_definition	__Z6to_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i
	.p2align	2
__Z6to_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i: ; @_Z6to_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i ; -- Begin function _Z6to_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	.weak_definition	__Z6to_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	.p2align	2
__Z6to_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i: ; @_Z6to_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB88_4
	b	LBB88_1
LBB88_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB88_5
	b	LBB88_2
LBB88_2:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #2
	cset	w8, ne
	tbnz	w8, #0, LBB88_6
	b	LBB88_3
LBB88_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15forward_cpu_ompER6tensorIfLi64ELi1ELi28ELi28EEi
	b	LBB88_10
LBB88_4:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16forward_cpu_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	b	LBB88_10
LBB88_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17forward_cuda_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	b	LBB88_10
LBB88_6:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB88_8
	b	LBB88_7
LBB88_7:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17forward_cuda_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	b	LBB88_9
LBB88_8:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16forward_cpu_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	b	LBB88_9
LBB88_9:
	b	LBB88_10
LBB88_10:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #1424
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB89_4
	b	LBB89_1
LBB89_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB89_5
	b	LBB89_2
LBB89_2:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #2
	cset	w8, ne
	tbnz	w8, #0, LBB89_6
	b	LBB89_3
LBB89_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16backward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EE
	b	LBB89_10
LBB89_4:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE
	b	LBB89_10
LBB89_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE
	b	LBB89_10
LBB89_6:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB89_8
	b	LBB89_7
LBB89_7:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE
	b	LBB89_9
LBB89_8:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE
	b	LBB89_9
LBB89_9:
	b	LBB89_10
LBB89_10:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #35484
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7to_hostI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i ; -- Begin function _Z7to_hostI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	.weak_definition	__Z7to_hostI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	.p2align	2
__Z7to_hostI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i: ; @_Z7to_hostI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi26ELi26EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi64ELi32ELi26ELi26EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi64ELi32ELi26ELi26EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi64ELi32ELi26ELi26EE3dotERS0_: ; @_ZN6tensorIfLi64ELi32ELi26ELi26EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB91_2
	b	LBB91_1
LBB91_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB91_2:
	b	LBB91_3
LBB91_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB91_4
LBB91_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB91_6 Depth 2
                                        ;       Child Loop BB91_8 Depth 3
                                        ;         Child Loop BB91_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB91_19
	b	LBB91_5
LBB91_5:                                ;   in Loop: Header=BB91_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB91_6
LBB91_6:                                ;   Parent Loop BB91_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB91_8 Depth 3
                                        ;         Child Loop BB91_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB91_17
	b	LBB91_7
LBB91_7:                                ;   in Loop: Header=BB91_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB91_8
LBB91_8:                                ;   Parent Loop BB91_4 Depth=1
                                        ;     Parent Loop BB91_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB91_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB91_15
	b	LBB91_9
LBB91_9:                                ;   in Loop: Header=BB91_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB91_10
LBB91_10:                               ;   Parent Loop BB91_4 Depth=1
                                        ;     Parent Loop BB91_6 Depth=2
                                        ;       Parent Loop BB91_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB91_13
	b	LBB91_11
LBB91_11:                               ;   in Loop: Header=BB91_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB91_12
LBB91_12:                               ;   in Loop: Header=BB91_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB91_10
LBB91_13:                               ;   in Loop: Header=BB91_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB91_14
LBB91_14:                               ;   in Loop: Header=BB91_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB91_8
LBB91_15:                               ;   in Loop: Header=BB91_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB91_16
LBB91_16:                               ;   in Loop: Header=BB91_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB91_6
LBB91_17:                               ;   in Loop: Header=BB91_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB91_18
LBB91_18:                               ;   in Loop: Header=BB91_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB91_4
LBB91_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi28ELi28EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi28ELi28EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi28ELi28EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi28ELi28EE3dotERS0_: ; @_ZN6tensorIfLi64ELi1ELi28ELi28EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB92_2
	b	LBB92_1
LBB92_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB92_2:
	b	LBB92_3
LBB92_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB92_4
LBB92_4:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB92_6 Depth 2
                                        ;       Child Loop BB92_8 Depth 3
                                        ;         Child Loop BB92_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB92_19
	b	LBB92_5
LBB92_5:                                ;   in Loop: Header=BB92_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB92_6
LBB92_6:                                ;   Parent Loop BB92_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB92_8 Depth 3
                                        ;         Child Loop BB92_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB92_17
	b	LBB92_7
LBB92_7:                                ;   in Loop: Header=BB92_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB92_8
LBB92_8:                                ;   Parent Loop BB92_4 Depth=1
                                        ;     Parent Loop BB92_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB92_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB92_15
	b	LBB92_9
LBB92_9:                                ;   in Loop: Header=BB92_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB92_10
LBB92_10:                               ;   Parent Loop BB92_4 Depth=1
                                        ;     Parent Loop BB92_6 Depth=2
                                        ;       Parent Loop BB92_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB92_13
	b	LBB92_11
LBB92_11:                               ;   in Loop: Header=BB92_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB92_12
LBB92_12:                               ;   in Loop: Header=BB92_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB92_10
LBB92_13:                               ;   in Loop: Header=BB92_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB92_14
LBB92_14:                               ;   in Loop: Header=BB92_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB92_8
LBB92_15:                               ;   in Loop: Header=BB92_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB92_16
LBB92_16:                               ;   in Loop: Header=BB92_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB92_6
LBB92_17:                               ;   in Loop: Header=BB92_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB92_18
LBB92_18:                               ;   in Loop: Header=BB92_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB92_4
LBB92_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13grad_dot_gradERS0_ ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13grad_dot_gradERS0_
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13grad_dot_gradERS0_
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13grad_dot_gradERS0_: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13grad_dot_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #34196
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE3dotERS0_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	d0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, #35352
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE3dotERS0_
	fmov	d1, d0
	ldr	d0, [sp, #8]                    ; 8-byte Folded Reload
	fadd	d0, d0, d1
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL10show_errorddddd
__ZL10show_errorddddd:                  ; @_ZL10show_errorddddd
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #96]             ; 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	d0, [x29, #-8]
	stur	d1, [x29, #-16]
	stur	d2, [x29, #-24]
	stur	d3, [x29, #-32]
	stur	d4, [x29, #-40]
	ldur	x8, [x29, #-8]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.131@PAGE
	add	x0, x0, l_.str.131@PAGEOFF
	bl	_printf
	ldur	x8, [x29, #-16]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.132@PAGE
	add	x0, x0, l_.str.132@PAGEOFF
	bl	_printf
	ldur	x8, [x29, #-24]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.133@PAGE
	add	x0, x0, l_.str.133@PAGEOFF
	bl	_printf
	ldur	x8, [x29, #-32]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.134@PAGE
	add	x0, x0, l_.str.134@PAGEOFF
	bl	_printf
	ldur	x8, [x29, #-40]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.135@PAGE
	add	x0, x0, l_.str.135@PAGEOFF
	bl	_printf
	ldur	d0, [x29, #-40]
	ldur	d1, [x29, #-24]
	fsub	d0, d0, d1
	str	d0, [sp, #48]
	ldur	d0, [x29, #-8]
	ldur	d1, [x29, #-16]
	fadd	d0, d0, d1
	str	d0, [sp, #40]
	ldr	x8, [sp, #48]
	str	x8, [sp, #32]
	ldr	d0, [sp, #40]
	ldr	d1, [sp, #32]
	fcmp	d0, d1
	cset	w8, ne
	tbnz	w8, #0, LBB94_2
	b	LBB94_1
LBB94_1:
	movi	d0, #0000000000000000
	str	d0, [sp, #16]                   ; 8-byte Folded Spill
	b	LBB94_3
LBB94_2:
	ldr	d0, [sp, #40]
	ldr	d1, [sp, #32]
	fabd	d0, d0, d1
	str	d0, [sp, #8]                    ; 8-byte Folded Spill
	ldr	d0, [sp, #40]
	fabs	d0, d0
	fcvt	s0, d0
	ldr	d1, [sp, #32]
	fabs	d1, d1
	fcvt	s1, d1
	bl	__ZL5max_rff
	fmov	s1, s0
	ldr	d0, [sp, #8]                    ; 8-byte Folded Reload
	fcvt	d1, s1
	fdiv	d0, d0, d1
	str	d0, [sp, #16]                   ; 8-byte Folded Spill
	b	LBB94_3
LBB94_3:
	ldr	d0, [sp, #16]                   ; 8-byte Folded Reload
	str	d0, [sp, #24]
	ldur	d0, [x29, #-8]
	ldur	d1, [x29, #-16]
	fadd	d0, d0, d1
	mov	x8, sp
	str	d0, [x8]
	adrp	x0, l_.str.136@PAGE
	add	x0, x0, l_.str.136@PAGEOFF
	bl	_printf
	ldr	x8, [sp, #48]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.137@PAGE
	add	x0, x0, l_.str.137@PAGEOFF
	bl	_printf
	ldr	x8, [sp, #24]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.138@PAGE
	add	x0, x0, l_.str.138@PAGEOFF
	bl	_printf
	ldr	d0, [sp, #24]
	fcvt	s0, d0
	.cfi_def_cfa wsp, 112
	ldp	x29, x30, [sp, #96]             ; 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i ; -- Begin function _Z7del_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	.weak_definition	__Z7del_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	.p2align	2
__Z7del_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i: ; @_Z7del_devI13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i ; -- Begin function _Z7del_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i
	.weak_definition	__Z7del_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i
	.p2align	2
__Z7del_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i: ; @_Z7del_devI6tensorIfLi64ELi32ELi26ELi26EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i ; -- Begin function _Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	.weak_definition	__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	.p2align	2
__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i: ; @_Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC2Ev ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC2Ev
	.weak_def_can_be_hidden	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC2Ev
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC2Ev: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.private_extern	__Z4sqrtB6v15007IiENSt3__19enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_ ; -- Begin function _Z4sqrtB6v15007IiENSt3__19enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_
	.globl	__Z4sqrtB6v15007IiENSt3__19enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_
	.weak_definition	__Z4sqrtB6v15007IiENSt3__19enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_
	.p2align	2
__Z4sqrtB6v15007IiENSt3__19enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_: ; @_Z4sqrtB6v15007IiENSt3__19enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, #12]
	ldr	s1, [sp, #12]
                                        ; implicit-def: $d0
	fmov	s0, s1
	sshll.2d	v0, v0, #0
                                        ; kill: def $d0 killed $d0 killed $q0
	scvtf	d0, d0
	fsqrt	d0, d0
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB100_1
LBB100_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB100_3 Depth 2
                                        ;       Child Loop BB100_5 Depth 3
                                        ;         Child Loop BB100_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB100_16
	b	LBB100_2
LBB100_2:                               ;   in Loop: Header=BB100_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB100_3
LBB100_3:                               ;   Parent Loop BB100_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB100_5 Depth 3
                                        ;         Child Loop BB100_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB100_14
	b	LBB100_4
LBB100_4:                               ;   in Loop: Header=BB100_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB100_5
LBB100_5:                               ;   Parent Loop BB100_1 Depth=1
                                        ;     Parent Loop BB100_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB100_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB100_12
	b	LBB100_6
LBB100_6:                               ;   in Loop: Header=BB100_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB100_7
LBB100_7:                               ;   Parent Loop BB100_1 Depth=1
                                        ;     Parent Loop BB100_3 Depth=2
                                        ;       Parent Loop BB100_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB100_10
	b	LBB100_8
LBB100_8:                               ;   in Loop: Header=BB100_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB100_9
LBB100_9:                               ;   in Loop: Header=BB100_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB100_7
LBB100_10:                              ;   in Loop: Header=BB100_5 Depth=3
	b	LBB100_11
LBB100_11:                              ;   in Loop: Header=BB100_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB100_5
LBB100_12:                              ;   in Loop: Header=BB100_3 Depth=2
	b	LBB100_13
LBB100_13:                              ;   in Loop: Header=BB100_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB100_3
LBB100_14:                              ;   in Loop: Header=BB100_1 Depth=1
	b	LBB100_15
LBB100_15:                              ;   in Loop: Header=BB100_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB100_1
LBB100_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB101_1
LBB101_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB101_3 Depth 2
                                        ;       Child Loop BB101_5 Depth 3
                                        ;         Child Loop BB101_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB101_16
	b	LBB101_2
LBB101_2:                               ;   in Loop: Header=BB101_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB101_3
LBB101_3:                               ;   Parent Loop BB101_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB101_5 Depth 3
                                        ;         Child Loop BB101_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB101_14
	b	LBB101_4
LBB101_4:                               ;   in Loop: Header=BB101_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB101_5
LBB101_5:                               ;   Parent Loop BB101_1 Depth=1
                                        ;     Parent Loop BB101_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB101_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB101_12
	b	LBB101_6
LBB101_6:                               ;   in Loop: Header=BB101_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB101_7
LBB101_7:                               ;   Parent Loop BB101_1 Depth=1
                                        ;     Parent Loop BB101_3 Depth=2
                                        ;       Parent Loop BB101_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB101_10
	b	LBB101_8
LBB101_8:                               ;   in Loop: Header=BB101_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB101_9
LBB101_9:                               ;   in Loop: Header=BB101_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB101_7
LBB101_10:                              ;   in Loop: Header=BB101_5 Depth=3
	b	LBB101_11
LBB101_11:                              ;   in Loop: Header=BB101_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB101_5
LBB101_12:                              ;   in Loop: Header=BB101_3 Depth=2
	b	LBB101_13
LBB101_13:                              ;   in Loop: Header=BB101_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB101_3
LBB101_14:                              ;   in Loop: Header=BB101_1 Depth=1
	b	LBB101_15
LBB101_15:                              ;   in Loop: Header=BB101_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB101_1
LBB101_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi32ELi1ELi3ELi3EE4initEfff ; -- Begin function _ZN8AdaDeltaILi32ELi1ELi3ELi3EE4initEfff
	.weak_definition	__ZN8AdaDeltaILi32ELi1ELi3ELi3EE4initEfff
	.p2align	2
__ZN8AdaDeltaILi32ELi1ELi3ELi3EE4initEfff: ; @_ZN8AdaDeltaILi32ELi1ELi3ELi3EE4initEfff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	s1, [x29, #-16]
	stur	s2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w9, [x29, #-12]
	str	w9, [x8, #4624]
	ldur	w9, [x29, #-16]
	str	w9, [x8, #4628]
	ldur	w9, [x29, #-20]
	str	w9, [x8, #4632]
	add	x0, x8, #1156
	mov	w1, #32
	str	w1, [sp, #24]                   ; 4-byte Folded Spill
	movi	d0, #0000000000000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE10init_constEif
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE10init_constEif
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #2312
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #3468
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi32ELi1ELi1ELi1EE4initEfff ; -- Begin function _ZN8AdaDeltaILi32ELi1ELi1ELi1EE4initEfff
	.weak_definition	__ZN8AdaDeltaILi32ELi1ELi1ELi1EE4initEfff
	.p2align	2
__ZN8AdaDeltaILi32ELi1ELi1ELi1EE4initEfff: ; @_ZN8AdaDeltaILi32ELi1ELi1ELi1EE4initEfff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	s1, [x29, #-16]
	stur	s2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w9, [x29, #-12]
	str	w9, [x8, #528]
	ldur	w9, [x29, #-16]
	str	w9, [x8, #532]
	ldur	w9, [x29, #-20]
	str	w9, [x8, #536]
	add	x0, x8, #132
	mov	w1, #32
	str	w1, [sp, #24]                   ; 4-byte Folded Spill
	movi	d0, #0000000000000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE10init_constEif
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE10init_constEif
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #264
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #396
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #32
	cset	w8, le
	tbnz	w8, #0, LBB104_2
	b	LBB104_1
LBB104_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB104_2:
	b	LBB104_3
LBB104_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN9rnd_gen_t4randEdd          ; -- Begin function _ZN9rnd_gen_t4randEdd
	.weak_definition	__ZN9rnd_gen_t4randEdd
	.p2align	2
__ZN9rnd_gen_t4randEdd:                 ; @_ZN9rnd_gen_t4randEdd
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	d0, [x29, #-16]
	str	d1, [sp, #24]
	ldur	x0, [x29, #-8]
	ldur	d0, [x29, #-16]
	str	d0, [sp, #8]                    ; 8-byte Folded Spill
	ldr	d0, [sp, #24]
	ldur	d1, [x29, #-16]
	fsub	d0, d0, d1
	str	d0, [sp, #16]                   ; 8-byte Folded Spill
	bl	__ZN9rnd_gen_t6rand01Ev
	ldr	d2, [sp, #8]                    ; 8-byte Folded Reload
	fmov	d1, d0
	ldr	d0, [sp, #16]                   ; 8-byte Folded Reload
	fmadd	d0, d0, d1, d2
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	mov	x10, #36
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #12]
	mov	x10, #12
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3                               ; -- Begin function _ZN9rnd_gen_t6rand01Ev
lCPI107_0:
	.quad	0x42f0000000000000              ; double 281474976710656
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN9rnd_gen_t6rand01Ev
	.weak_definition	__ZN9rnd_gen_t6rand01Ev
	.p2align	2
__ZN9rnd_gen_t6rand01Ev:                ; @_ZN9rnd_gen_t6rand01Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN9rnd_gen_t4nextEv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	d0, [x8]
	ucvtf	d0, d0
	adrp	x8, lCPI107_0@PAGE
	ldr	d1, [x8, lCPI107_0@PAGEOFF]
	fdiv	d0, d0, d1
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #32
	cset	w8, le
	tbnz	w8, #0, LBB108_2
	b	LBB108_1
LBB108_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB108_2:
	b	LBB108_3
LBB108_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE10init_constEif ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE10init_constEif
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE10init_constEif
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE10init_constEif: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=32 N1=1 N2=3 N3=3
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB110_1
LBB110_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB110_3 Depth 2
                                        ;       Child Loop BB110_5 Depth 3
                                        ;         Child Loop BB110_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB110_16
	b	LBB110_2
LBB110_2:                               ;   in Loop: Header=BB110_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB110_3
LBB110_3:                               ;   Parent Loop BB110_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB110_5 Depth 3
                                        ;         Child Loop BB110_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB110_14
	b	LBB110_4
LBB110_4:                               ;   in Loop: Header=BB110_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB110_5
LBB110_5:                               ;   Parent Loop BB110_1 Depth=1
                                        ;     Parent Loop BB110_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB110_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB110_12
	b	LBB110_6
LBB110_6:                               ;   in Loop: Header=BB110_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB110_7
LBB110_7:                               ;   Parent Loop BB110_1 Depth=1
                                        ;     Parent Loop BB110_3 Depth=2
                                        ;       Parent Loop BB110_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB110_10
	b	LBB110_8
LBB110_8:                               ;   in Loop: Header=BB110_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB110_9
LBB110_9:                               ;   in Loop: Header=BB110_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB110_7
LBB110_10:                              ;   in Loop: Header=BB110_5 Depth=3
	b	LBB110_11
LBB110_11:                              ;   in Loop: Header=BB110_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB110_5
LBB110_12:                              ;   in Loop: Header=BB110_3 Depth=2
	b	LBB110_13
LBB110_13:                              ;   in Loop: Header=BB110_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB110_3
LBB110_14:                              ;   in Loop: Header=BB110_1 Depth=1
	b	LBB110_15
LBB110_15:                              ;   in Loop: Header=BB110_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB110_1
LBB110_16:
	; InlineAsm Start
	; init_const ends N0=32 N1=1 N2=3 N3=3
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE10init_constEif ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE10init_constEif
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE10init_constEif
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE10init_constEif: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=32 N1=1 N2=1 N3=1
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB111_1
LBB111_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB111_3 Depth 2
                                        ;       Child Loop BB111_5 Depth 3
                                        ;         Child Loop BB111_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB111_16
	b	LBB111_2
LBB111_2:                               ;   in Loop: Header=BB111_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB111_3
LBB111_3:                               ;   Parent Loop BB111_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB111_5 Depth 3
                                        ;         Child Loop BB111_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB111_14
	b	LBB111_4
LBB111_4:                               ;   in Loop: Header=BB111_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB111_5
LBB111_5:                               ;   Parent Loop BB111_1 Depth=1
                                        ;     Parent Loop BB111_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB111_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB111_12
	b	LBB111_6
LBB111_6:                               ;   in Loop: Header=BB111_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB111_7
LBB111_7:                               ;   Parent Loop BB111_1 Depth=1
                                        ;     Parent Loop BB111_3 Depth=2
                                        ;       Parent Loop BB111_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB111_10
	b	LBB111_8
LBB111_8:                               ;   in Loop: Header=BB111_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB111_9
LBB111_9:                               ;   in Loop: Header=BB111_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB111_7
LBB111_10:                              ;   in Loop: Header=BB111_5 Depth=3
	b	LBB111_11
LBB111_11:                              ;   in Loop: Header=BB111_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB111_5
LBB111_12:                              ;   in Loop: Header=BB111_3 Depth=2
	b	LBB111_13
LBB111_13:                              ;   in Loop: Header=BB111_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB111_3
LBB111_14:                              ;   in Loop: Header=BB111_1 Depth=1
	b	LBB111_15
LBB111_15:                              ;   in Loop: Header=BB111_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB111_1
LBB111_16:
	; InlineAsm Start
	; init_const ends N0=32 N1=1 N2=1 N3=1
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB112_2
	b	LBB112_1
LBB112_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB112_2:
	b	LBB112_3
LBB112_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii: ; @_ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	mov	x10, #20992
	movk	x10, #1, lsl #16
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	mov	x10, #2704
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #12]
	mov	x10, #104
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE4add_EfRS0_: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB114_2
	b	LBB114_1
LBB114_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB114_2:
	b	LBB114_3
LBB114_3:
	str	wzr, [sp, #28]
	b	LBB114_4
LBB114_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB114_6 Depth 2
                                        ;       Child Loop BB114_8 Depth 3
                                        ;         Child Loop BB114_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB114_19
	b	LBB114_5
LBB114_5:                               ;   in Loop: Header=BB114_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB114_6
LBB114_6:                               ;   Parent Loop BB114_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB114_8 Depth 3
                                        ;         Child Loop BB114_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB114_17
	b	LBB114_7
LBB114_7:                               ;   in Loop: Header=BB114_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB114_8
LBB114_8:                               ;   Parent Loop BB114_4 Depth=1
                                        ;     Parent Loop BB114_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB114_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB114_15
	b	LBB114_9
LBB114_9:                               ;   in Loop: Header=BB114_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB114_10
LBB114_10:                              ;   Parent Loop BB114_4 Depth=1
                                        ;     Parent Loop BB114_6 Depth=2
                                        ;       Parent Loop BB114_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB114_13
	b	LBB114_11
LBB114_11:                              ;   in Loop: Header=BB114_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB114_12
LBB114_12:                              ;   in Loop: Header=BB114_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB114_10
LBB114_13:                              ;   in Loop: Header=BB114_8 Depth=3
	b	LBB114_14
LBB114_14:                              ;   in Loop: Header=BB114_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB114_8
LBB114_15:                              ;   in Loop: Header=BB114_6 Depth=2
	b	LBB114_16
LBB114_16:                              ;   in Loop: Header=BB114_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB114_6
LBB114_17:                              ;   in Loop: Header=BB114_4 Depth=1
	b	LBB114_18
LBB114_18:                              ;   in Loop: Header=BB114_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB114_4
LBB114_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE4add_EfRS0_: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB115_2
	b	LBB115_1
LBB115_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB115_2:
	b	LBB115_3
LBB115_3:
	str	wzr, [sp, #28]
	b	LBB115_4
LBB115_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB115_6 Depth 2
                                        ;       Child Loop BB115_8 Depth 3
                                        ;         Child Loop BB115_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB115_19
	b	LBB115_5
LBB115_5:                               ;   in Loop: Header=BB115_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB115_6
LBB115_6:                               ;   Parent Loop BB115_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB115_8 Depth 3
                                        ;         Child Loop BB115_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB115_17
	b	LBB115_7
LBB115_7:                               ;   in Loop: Header=BB115_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB115_8
LBB115_8:                               ;   Parent Loop BB115_4 Depth=1
                                        ;     Parent Loop BB115_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB115_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB115_15
	b	LBB115_9
LBB115_9:                               ;   in Loop: Header=BB115_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB115_10
LBB115_10:                              ;   Parent Loop BB115_4 Depth=1
                                        ;     Parent Loop BB115_6 Depth=2
                                        ;       Parent Loop BB115_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB115_13
	b	LBB115_11
LBB115_11:                              ;   in Loop: Header=BB115_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB115_12
LBB115_12:                              ;   in Loop: Header=BB115_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB115_10
LBB115_13:                              ;   in Loop: Header=BB115_8 Depth=3
	b	LBB115_14
LBB115_14:                              ;   in Loop: Header=BB115_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB115_8
LBB115_15:                              ;   in Loop: Header=BB115_6 Depth=2
	b	LBB115_16
LBB115_16:                              ;   in Loop: Header=BB115_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB115_6
LBB115_17:                              ;   in Loop: Header=BB115_4 Depth=1
	b	LBB115_18
LBB115_18:                              ;   in Loop: Header=BB115_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB115_4
LBB115_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6logger14log_start_fun_EPKc ; -- Begin function _ZN6logger14log_start_fun_EPKc
	.weak_definition	__ZN6logger14log_start_fun_EPKc
	.p2align	2
__ZN6logger14log_start_fun_EPKc:        ; @_ZN6logger14log_start_fun_EPKc
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x0, [x29, #-8]
	ldr	x8, [sp, #16]
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #4
	adrp	x2, l_.str.124@PAGE
	add	x2, x2, l_.str.124@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15forward_cpu_ompER6tensorIfLi64ELi1ELi28ELi28EEi ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15forward_cpu_ompER6tensorIfLi64ELi1ELi28ELi28EEi
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15forward_cpu_ompER6tensorIfLi64ELi1ELi28ELi28EEi
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15forward_cpu_ompER6tensorIfLi64ELi1ELi28ELi28EEi: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15forward_cpu_ompER6tensorIfLi64ELi1ELi28ELi28EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	sub	x10, x29, #24
	str	x10, [sp, #24]                  ; 8-byte Folded Spill
	stur	w9, [x29, #-24]
	add	x0, x8, #1424
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei
	ldr	x11, [sp, #24]                  ; 8-byte Folded Reload
	ldr	x10, [sp, #32]                  ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x10, #128]
	ldur	x8, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_1@PAGE
	add	x0, x0, l___unnamed_1@PAGEOFF
	mov	w1, #3
	adrp	x2, _.omp_outlined.@PAGE
	add	x2, x2, _.omp_outlined.@PAGEOFF
	bl	___kmpc_fork_call
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16forward_cpu_baseER6tensorIfLi64ELi1ELi28ELi28EEi ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16forward_cpu_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16forward_cpu_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16forward_cpu_baseER6tensorIfLi64ELi1ELi28ELi28EEi: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16forward_cpu_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE12forward_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17forward_cuda_baseER6tensorIfLi64ELi1ELi28ELi28EEi ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17forward_cuda_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17forward_cuda_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17forward_cuda_baseER6tensorIfLi64ELi1ELi28ELi28EEi: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17forward_cuda_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.125@PAGE
	add	x0, x0, l_.str.125@PAGEOFF
	mov	w1, #290
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_ ; -- Begin function _ZN6logger12log_end_fun_EPKc5tsc_tS2_
	.weak_definition	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	.p2align	2
__ZN6logger12log_end_fun_EPKc5tsc_tS2_: ; @_ZN6logger12log_end_fun_EPKc5tsc_tS2_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x2, [x29, #-8]
	stur	x3, [x29, #-16]
	str	x0, [sp, #24]
	str	x1, [sp, #16]
	ldr	x0, [sp, #24]
	ldr	x10, [sp, #16]
	ldur	x8, [x29, #-16]
	ldur	x9, [x29, #-8]
	subs	x8, x8, x9
	mov	x9, sp
	str	x10, [x9]
	str	x8, [x9, #8]
	mov	w1, #4
	adrp	x2, l_.str.127@PAGE
	add	x2, x2, l_.str.127@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined.
_.omp_outlined.:                        ; @.omp_outlined.
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #320
	.cfi_def_cfa_offset 320
	stp	x28, x27, [sp, #288]            ; 16-byte Folded Spill
	stp	x29, x30, [sp, #304]            ; 16-byte Folded Spill
	add	x29, sp, #304
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	x9, x29, #48
	str	x9, [sp, #104]                  ; 8-byte Folded Spill
	str	x0, [x9, #24]
	str	x1, [x9, #16]
	str	x2, [x9, #8]
	str	x3, [x9]
	stur	x4, [x29, #-56]
	ldr	x8, [x9, #8]
	ldr	x9, [x9]
	str	x9, [sp, #112]                  ; 8-byte Folded Spill
	ldur	x9, [x29, #-56]
	stur	x9, [x29, #-64]
	ldr	w8, [x8]
	stur	w8, [x29, #-92]
	ldur	w9, [x29, #-92]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w10, w9, w10
                                        ; implicit-def: $x9
	mov	x9, x10
	sxtw	x9, w9
	lsl	x9, x9, #5
	mov	x10, #26
	mul	x9, x9, x10
	mul	x9, x9, x10
	subs	x9, x9, #1
	stur	x9, [x29, #-104]
	stur	wzr, [x29, #-108]
	stur	wzr, [x29, #-112]
	stur	wzr, [x29, #-116]
	stur	wzr, [x29, #-120]
	ldur	w9, [x29, #-92]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB121_23
	b	LBB121_1
LBB121_1:
	ldr	x8, [sp, #104]                  ; 8-byte Folded Reload
	sub	x4, x29, #128
	stur	xzr, [x29, #-128]
	ldur	x9, [x29, #-104]
	sub	x5, x29, #136
	stur	x9, [x29, #-136]
	sub	x6, x29, #144
	mov	x7, #1
	stur	x7, [x29, #-144]
	sub	x3, x29, #148
	stur	wzr, [x29, #-148]
	ldr	x8, [x8, #24]
	ldr	w1, [x8]
	mov	x8, sp
	str	x7, [x8]
	adrp	x0, l___unnamed_2@PAGE
	add	x0, x0, l___unnamed_2@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_8
	ldur	x8, [x29, #-136]
	ldur	x9, [x29, #-104]
	subs	x8, x8, x9
	cset	w8, le
	tbnz	w8, #0, LBB121_3
	b	LBB121_2
LBB121_2:
	ldur	x8, [x29, #-104]
	str	x8, [sp, #96]                   ; 8-byte Folded Spill
	b	LBB121_4
LBB121_3:
	ldur	x8, [x29, #-136]
	str	x8, [sp, #96]                   ; 8-byte Folded Spill
	b	LBB121_4
LBB121_4:
	ldr	x8, [sp, #96]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-136]
	ldur	x8, [x29, #-128]
	stur	x8, [x29, #-72]
	b	LBB121_5
LBB121_5:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB121_7 Depth 2
                                        ;       Child Loop BB121_9 Depth 3
                                        ;         Child Loop BB121_11 Depth 4
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-136]
	subs	x8, x8, x9
	cset	w8, gt
	tbnz	w8, #0, LBB121_21
	b	LBB121_6
LBB121_6:                               ;   in Loop: Header=BB121_5 Depth=1
	ldur	x8, [x29, #-72]
	mov	x14, #21632
	str	x14, [sp, #88]                  ; 8-byte Folded Spill
	sdiv	x8, x8, x14
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #152]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	mov	x12, #676
	sdiv	x8, x8, x12
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #148]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x10, [x29, #-72]
	sdiv	x10, x10, x14
	mul	x10, x10, x14
	subs	x9, x9, x10
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	mov	x10, #26
	sdiv	x8, x8, x10
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #144]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x11, [x29, #-72]
	sdiv	x11, x11, x14
	mul	x11, x11, x14
	subs	x9, x9, x11
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x11, [x29, #-72]
	sdiv	x11, x11, x14
	mul	x11, x11, x14
	subs	x9, x9, x11
	ldur	x11, [x29, #-72]
	ldur	x13, [x29, #-72]
	sdiv	x13, x13, x14
	mul	x13, x13, x14
	subs	x11, x11, x13
	sdiv	x11, x11, x12
	mul	x11, x11, x12
	subs	x9, x9, x11
	sdiv	x9, x9, x10
	mul	x9, x9, x10
	subs	x8, x8, x9
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #140]
	movi	d0, #0000000000000000
	str	s0, [sp, #136]
	str	wzr, [sp, #132]
	b	LBB121_7
LBB121_7:                               ;   Parent Loop BB121_5 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB121_9 Depth 3
                                        ;         Child Loop BB121_11 Depth 4
	ldr	w8, [sp, #132]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB121_18
	b	LBB121_8
LBB121_8:                               ;   in Loop: Header=BB121_7 Depth=2
	str	wzr, [sp, #128]
	b	LBB121_9
LBB121_9:                               ;   Parent Loop BB121_5 Depth=1
                                        ;     Parent Loop BB121_7 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB121_11 Depth 4
	ldr	w8, [sp, #128]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB121_16
	b	LBB121_10
LBB121_10:                              ;   in Loop: Header=BB121_9 Depth=3
	str	wzr, [sp, #124]
	b	LBB121_11
LBB121_11:                              ;   Parent Loop BB121_5 Depth=1
                                        ;     Parent Loop BB121_7 Depth=2
                                        ;       Parent Loop BB121_9 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #124]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB121_14
	b	LBB121_12
LBB121_12:                              ;   in Loop: Header=BB121_11 Depth=4
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w3, [sp, #128]
	ldr	w4, [sp, #124]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #32]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w3, [sp, #128]
	ldr	w8, [sp, #124]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #28]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #28]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #32]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #36]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s3, [x0]
	fmul	s2, s2, s3
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #40]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w3, [sp, #128]
	ldr	w8, [sp, #124]
	add	w4, w8, #2
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #44]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #40]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #44]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #48]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w3, [sp, #128]
	ldr	w8, [sp, #124]
	add	w4, w8, #3
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #52]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #3
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #48]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #52]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #56]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #128]
	add	w3, w8, #1
	ldr	w4, [sp, #124]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #60]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w8, w8, w9
	add	w3, w8, #1
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #56]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #60]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #64]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #128]
	add	w3, w8, #1
	ldr	w8, [sp, #124]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #68]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w8, w8, w9
	add	w3, w8, #1
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #64]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #68]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #72]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #128]
	add	w3, w8, #1
	ldr	w8, [sp, #124]
	add	w4, w8, #2
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #76]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w8, w8, w9
	add	w3, w8, #1
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #72]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #76]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #80]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #128]
	add	w3, w8, #1
	ldr	w8, [sp, #124]
	add	w4, w8, #3
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #84]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w8, w8, w9
	add	w3, w8, #1
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #3
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #80]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #84]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s1, s0, s1, s2
	ldr	s0, [sp, #136]
	fadd	s0, s0, s1
	str	s0, [sp, #136]
	b	LBB121_13
LBB121_13:                              ;   in Loop: Header=BB121_11 Depth=4
	ldr	w8, [sp, #124]
	add	w8, w8, #4
	str	w8, [sp, #124]
	b	LBB121_11
LBB121_14:                              ;   in Loop: Header=BB121_9 Depth=3
	b	LBB121_15
LBB121_15:                              ;   in Loop: Header=BB121_9 Depth=3
	ldr	w8, [sp, #128]
	add	w8, w8, #2
	str	w8, [sp, #128]
	b	LBB121_9
LBB121_16:                              ;   in Loop: Header=BB121_7 Depth=2
	b	LBB121_17
LBB121_17:                              ;   in Loop: Header=BB121_7 Depth=2
	ldr	w8, [sp, #132]
	add	w8, w8, #1
	str	w8, [sp, #132]
	b	LBB121_7
LBB121_18:                              ;   in Loop: Header=BB121_5 Depth=1
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s0, [sp, #136]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	add	x0, x8, #1292
	ldr	w1, [sp, #148]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #24]                   ; 4-byte Folded Spill
	add	x0, x8, #1424
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #148]
	ldr	w3, [sp, #144]
	ldr	w4, [sp, #140]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp, #24]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB121_19
LBB121_19:                              ;   in Loop: Header=BB121_5 Depth=1
	b	LBB121_20
LBB121_20:                              ;   in Loop: Header=BB121_5 Depth=1
	ldur	x8, [x29, #-72]
	add	x8, x8, #1
	stur	x8, [x29, #-72]
	b	LBB121_5
LBB121_21:
	b	LBB121_22
LBB121_22:
	ldr	x8, [sp, #104]                  ; 8-byte Folded Reload
	ldr	x8, [x8, #24]
	ldr	w1, [x8]
	adrp	x0, l___unnamed_3@PAGE
	add	x0, x0, l___unnamed_3@PAGEOFF
	bl	___kmpc_for_static_fini
	b	LBB121_23
LBB121_23:
	.cfi_def_cfa wsp, 320
	ldp	x29, x30, [sp, #304]            ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #288]            ; 16-byte Folded Reload
	add	sp, sp, #320
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE12forward_baseER6tensorIfLi64ELi1ELi28ELi28EEi ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE12forward_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE12forward_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE12forward_baseER6tensorIfLi64ELi1ELi28ELi28EEi: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE12forward_baseER6tensorIfLi64ELi1ELi28ELi28EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	add	x0, x8, #1424
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x9, #128]
	stur	wzr, [x29, #-28]
	b	LBB122_1
LBB122_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB122_3 Depth 2
                                        ;       Child Loop BB122_5 Depth 3
                                        ;         Child Loop BB122_7 Depth 4
                                        ;           Child Loop BB122_9 Depth 5
                                        ;             Child Loop BB122_11 Depth 6
                                        ;               Child Loop BB122_13 Depth 7
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB122_28
	b	LBB122_2
LBB122_2:                               ;   in Loop: Header=BB122_1 Depth=1
	stur	wzr, [x29, #-32]
	b	LBB122_3
LBB122_3:                               ;   Parent Loop BB122_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB122_5 Depth 3
                                        ;         Child Loop BB122_7 Depth 4
                                        ;           Child Loop BB122_9 Depth 5
                                        ;             Child Loop BB122_11 Depth 6
                                        ;               Child Loop BB122_13 Depth 7
	ldur	w8, [x29, #-32]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB122_26
	b	LBB122_4
LBB122_4:                               ;   in Loop: Header=BB122_3 Depth=2
	stur	wzr, [x29, #-36]
	b	LBB122_5
LBB122_5:                               ;   Parent Loop BB122_1 Depth=1
                                        ;     Parent Loop BB122_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB122_7 Depth 4
                                        ;           Child Loop BB122_9 Depth 5
                                        ;             Child Loop BB122_11 Depth 6
                                        ;               Child Loop BB122_13 Depth 7
	ldur	w8, [x29, #-36]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB122_24
	b	LBB122_6
LBB122_6:                               ;   in Loop: Header=BB122_5 Depth=3
	str	wzr, [sp, #40]
	b	LBB122_7
LBB122_7:                               ;   Parent Loop BB122_1 Depth=1
                                        ;     Parent Loop BB122_3 Depth=2
                                        ;       Parent Loop BB122_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB122_9 Depth 5
                                        ;             Child Loop BB122_11 Depth 6
                                        ;               Child Loop BB122_13 Depth 7
	ldr	w8, [sp, #40]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB122_22
	b	LBB122_8
LBB122_8:                               ;   in Loop: Header=BB122_7 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #36]
	str	wzr, [sp, #32]
	b	LBB122_9
LBB122_9:                               ;   Parent Loop BB122_1 Depth=1
                                        ;     Parent Loop BB122_3 Depth=2
                                        ;       Parent Loop BB122_5 Depth=3
                                        ;         Parent Loop BB122_7 Depth=4
                                        ; =>        This Loop Header: Depth=5
                                        ;             Child Loop BB122_11 Depth 6
                                        ;               Child Loop BB122_13 Depth 7
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB122_20
	b	LBB122_10
LBB122_10:                              ;   in Loop: Header=BB122_9 Depth=5
	str	wzr, [sp, #28]
	b	LBB122_11
LBB122_11:                              ;   Parent Loop BB122_1 Depth=1
                                        ;     Parent Loop BB122_3 Depth=2
                                        ;       Parent Loop BB122_5 Depth=3
                                        ;         Parent Loop BB122_7 Depth=4
                                        ;           Parent Loop BB122_9 Depth=5
                                        ; =>          This Loop Header: Depth=6
                                        ;               Child Loop BB122_13 Depth 7
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB122_18
	b	LBB122_12
LBB122_12:                              ;   in Loop: Header=BB122_11 Depth=6
	str	wzr, [sp, #24]
	b	LBB122_13
LBB122_13:                              ;   Parent Loop BB122_1 Depth=1
                                        ;     Parent Loop BB122_3 Depth=2
                                        ;       Parent Loop BB122_5 Depth=3
                                        ;         Parent Loop BB122_7 Depth=4
                                        ;           Parent Loop BB122_9 Depth=5
                                        ;             Parent Loop BB122_11 Depth=6
                                        ; =>            This Inner Loop Header: Depth=7
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB122_16
	b	LBB122_14
LBB122_14:                              ;   in Loop: Header=BB122_13 Depth=7
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #136
	ldur	w1, [x29, #-32]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldur	w8, [x29, #-36]
	ldr	w9, [sp, #28]
	add	w3, w8, w9
	ldr	w8, [sp, #40]
	ldr	w9, [sp, #24]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #36]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #36]
	b	LBB122_15
LBB122_15:                              ;   in Loop: Header=BB122_13 Depth=7
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB122_13
LBB122_16:                              ;   in Loop: Header=BB122_11 Depth=6
	b	LBB122_17
LBB122_17:                              ;   in Loop: Header=BB122_11 Depth=6
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB122_11
LBB122_18:                              ;   in Loop: Header=BB122_9 Depth=5
	b	LBB122_19
LBB122_19:                              ;   in Loop: Header=BB122_9 Depth=5
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB122_9
LBB122_20:                              ;   in Loop: Header=BB122_7 Depth=4
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [sp, #36]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	add	x0, x8, #1292
	ldur	w1, [x29, #-32]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	add	x0, x8, #1424
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-36]
	ldr	w4, [sp, #40]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB122_21
LBB122_21:                              ;   in Loop: Header=BB122_7 Depth=4
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB122_7
LBB122_22:                              ;   in Loop: Header=BB122_5 Depth=3
	b	LBB122_23
LBB122_23:                              ;   in Loop: Header=BB122_5 Depth=3
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB122_5
LBB122_24:                              ;   in Loop: Header=BB122_3 Depth=2
	b	LBB122_25
LBB122_25:                              ;   in Loop: Header=BB122_3 Depth=2
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB122_3
LBB122_26:                              ;   in Loop: Header=BB122_1 Depth=1
	b	LBB122_27
LBB122_27:                              ;   in Loop: Header=BB122_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB122_1
LBB122_28:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL32err_cuda_code_non_cuda_compiler_PKciS0_
__ZL32err_cuda_code_non_cuda_compiler_PKciS0_: ; @_ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	str	x2, [sp, #24]
	adrp	x8, ___stderrp@GOTPAGE
	ldr	x8, [x8, ___stderrp@GOTPAGEOFF]
	ldr	x0, [x8]
	ldur	x11, [x29, #-8]
	ldur	w8, [x29, #-12]
                                        ; implicit-def: $x10
	mov	x10, x8
	ldr	x8, [sp, #24]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x1, l_.str.126@PAGE
	add	x1, x1, l_.str.126@PAGEOFF
	bl	_fprintf
	bl	__ZL4bailv
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16backward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EE ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16backward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EE
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16backward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EE
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16backward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EE: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16backward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #96]             ; 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	sub	x10, x29, #20
	str	x10, [sp, #40]                  ; 8-byte Folded Spill
	stur	w9, [x29, #-20]
	mov	x9, #34196
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	mov	w1, #32
	str	w1, [sp, #36]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei
	ldr	w1, [sp, #36]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	mov	x9, #35352
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	mov	x9, #35484
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE6set_n0Ei
	ldr	x12, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x9, [x8, #128]
	stur	x9, [x29, #-32]
	ldur	x11, [x29, #-16]
	ldur	x10, [x29, #-32]
	mov	x9, sp
	str	x12, [x9]
	str	x11, [x9, #8]
	str	x10, [x9, #16]
	str	x8, [x9, #24]
	adrp	x0, l___unnamed_4@PAGE
	add	x0, x0, l___unnamed_4@PAGEOFF
	mov	w1, #4
	adrp	x2, _.omp_outlined..128@PAGE
	add	x2, x2, _.omp_outlined..128@PAGEOFF
	bl	___kmpc_fork_call
	ldr	x11, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldur	x10, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_5@PAGE
	add	x0, x0, l___unnamed_5@PAGEOFF
	mov	w1, #3
	stur	w1, [x29, #-36]                 ; 4-byte Folded Spill
	adrp	x2, _.omp_outlined..129@PAGE
	add	x2, x2, _.omp_outlined..129@PAGEOFF
	bl	___kmpc_fork_call
	ldr	x11, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldur	w1, [x29, #-36]                 ; 4-byte Folded Reload
	ldur	x10, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_6@PAGE
	add	x0, x0, l___unnamed_6@PAGEOFF
	adrp	x2, _.omp_outlined..130@PAGE
	add	x2, x2, _.omp_outlined..130@PAGEOFF
	bl	___kmpc_fork_call
	.cfi_def_cfa wsp, 112
	ldp	x29, x30, [sp, #96]             ; 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.125@PAGE
	add	x0, x0, l_.str.125@PAGEOFF
	mov	w1, #517
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..128
_.omp_outlined..128:                    ; @.omp_outlined..128
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #272
	.cfi_def_cfa_offset 272
	stp	x28, x27, [sp, #240]            ; 16-byte Folded Spill
	stp	x29, x30, [sp, #256]            ; 16-byte Folded Spill
	add	x29, sp, #256
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	stur	x0, [x29, #-24]
	stur	x1, [x29, #-32]
	stur	x2, [x29, #-40]
	stur	x3, [x29, #-48]
	stur	x4, [x29, #-56]
	stur	x5, [x29, #-64]
	ldur	x8, [x29, #-40]
	str	x8, [sp, #88]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-48]
	ldur	x8, [x29, #-56]
	ldur	x10, [x29, #-64]
	str	x10, [sp, #96]                  ; 8-byte Folded Spill
	stur	x9, [x29, #-72]
	stur	x8, [x29, #-80]
	sub	x4, x29, #104
	stur	wzr, [x29, #-104]
	sub	x5, x29, #108
	mov	w8, #287
	stur	w8, [x29, #-108]
	sub	x6, x29, #112
	mov	w7, #1
	stur	w7, [x29, #-112]
	sub	x3, x29, #116
	stur	wzr, [x29, #-116]
	ldur	x8, [x29, #-24]
	ldr	w1, [x8]
	str	w1, [sp, #104]                  ; 4-byte Folded Spill
	mov	x8, sp
	str	w7, [x8]
	adrp	x0, l___unnamed_7@PAGE
	add	x0, x0, l___unnamed_7@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_4
	ldur	w8, [x29, #-108]
	subs	w8, w8, #287
	cset	w8, le
	tbnz	w8, #0, LBB127_2
	b	LBB127_1
LBB127_1:
	mov	w8, #287
	str	w8, [sp, #84]                   ; 4-byte Folded Spill
	b	LBB127_3
LBB127_2:
	ldur	w8, [x29, #-108]
	str	w8, [sp, #84]                   ; 4-byte Folded Spill
	b	LBB127_3
LBB127_3:
	ldr	w8, [sp, #84]                   ; 4-byte Folded Reload
	stur	w8, [x29, #-108]
	ldur	w8, [x29, #-104]
	stur	w8, [x29, #-84]
	b	LBB127_4
LBB127_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB127_6 Depth 2
                                        ;       Child Loop BB127_8 Depth 3
                                        ;         Child Loop BB127_10 Depth 4
	ldur	w8, [x29, #-84]
	ldur	w9, [x29, #-108]
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB127_20
	b	LBB127_5
LBB127_5:                               ;   in Loop: Header=BB127_4 Depth=1
	ldur	w8, [x29, #-84]
	mov	w12, #9
	str	w12, [sp, #80]                  ; 4-byte Folded Spill
	sdiv	w8, w8, w12
	lsr	w8, w8, #0
	add	w8, w8, #0
	stur	w8, [x29, #-120]
	ldur	w8, [x29, #-84]
	ldur	w9, [x29, #-84]
	sdiv	w9, w9, w12
	mul	w9, w9, w12
	subs	w8, w8, w9
	sdiv	w8, w8, w12
	lsr	w8, w8, #0
	add	w8, w8, #0
	stur	w8, [x29, #-124]
	ldur	w8, [x29, #-84]
	ldur	w9, [x29, #-84]
	sdiv	w9, w9, w12
	mul	w9, w9, w12
	subs	w8, w8, w9
	ldur	w9, [x29, #-84]
	ldur	w10, [x29, #-84]
	sdiv	w10, w10, w12
	mul	w10, w10, w12
	subs	w9, w9, w10
	sdiv	w9, w9, w12
	mul	w9, w9, w12
	subs	w8, w8, w9
	mov	w10, #3
	sdiv	w8, w8, w10
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #128]
	ldur	w8, [x29, #-84]
	ldur	w9, [x29, #-84]
	sdiv	w9, w9, w12
	mul	w9, w9, w12
	subs	w8, w8, w9
	ldur	w9, [x29, #-84]
	ldur	w11, [x29, #-84]
	sdiv	w11, w11, w12
	mul	w11, w11, w12
	subs	w9, w9, w11
	sdiv	w9, w9, w12
	mul	w9, w9, w12
	subs	w8, w8, w9
	ldur	w9, [x29, #-84]
	ldur	w11, [x29, #-84]
	sdiv	w11, w11, w12
	mul	w11, w11, w12
	subs	w9, w9, w11
	ldur	w11, [x29, #-84]
	ldur	w13, [x29, #-84]
	sdiv	w13, w13, w12
	mul	w13, w13, w12
	subs	w11, w11, w13
	sdiv	w11, w11, w12
	mul	w11, w11, w12
	subs	w9, w9, w11
	sdiv	w9, w9, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #124]
	movi	d0, #0000000000000000
	str	s0, [sp, #120]
	str	wzr, [sp, #116]
	b	LBB127_6
LBB127_6:                               ;   Parent Loop BB127_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB127_8 Depth 3
                                        ;         Child Loop BB127_10 Depth 4
	ldr	x9, [sp, #88]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #116]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB127_17
	b	LBB127_7
LBB127_7:                               ;   in Loop: Header=BB127_6 Depth=2
	str	wzr, [sp, #112]
	b	LBB127_8
LBB127_8:                               ;   Parent Loop BB127_4 Depth=1
                                        ;     Parent Loop BB127_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB127_10 Depth 4
	ldr	w8, [sp, #112]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB127_15
	b	LBB127_9
LBB127_9:                               ;   in Loop: Header=BB127_8 Depth=3
	str	wzr, [sp, #108]
	b	LBB127_10
LBB127_10:                              ;   Parent Loop BB127_4 Depth=1
                                        ;     Parent Loop BB127_6 Depth=2
                                        ;       Parent Loop BB127_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #108]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB127_13
	b	LBB127_11
LBB127_11:                              ;   in Loop: Header=BB127_10 Depth=4
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w3, [sp, #112]
	ldr	w4, [sp, #108]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #28]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #24]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w3, [sp, #112]
	ldr	w8, [sp, #108]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #1
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #28]                   ; 4-byte Folded Reload
	ldr	s3, [x0]
	fmul	s2, s2, s3
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #32]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w3, [sp, #112]
	ldr	w8, [sp, #108]
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #2
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #32]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #36]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #40]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w3, [sp, #112]
	ldr	w8, [sp, #108]
	add	w4, w8, #3
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #44]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #3
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #40]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #44]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #48]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w8, [sp, #112]
	add	w3, w8, #1
	ldr	w4, [sp, #108]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #52]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	add	w8, w8, #1
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #48]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #52]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #56]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w8, [sp, #112]
	add	w3, w8, #1
	ldr	w8, [sp, #108]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #60]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	add	w8, w8, #1
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #1
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #56]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #60]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #64]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w8, [sp, #112]
	add	w3, w8, #1
	ldr	w8, [sp, #108]
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #68]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	add	w8, w8, #1
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #2
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #64]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #68]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #72]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w8, [sp, #112]
	add	w3, w8, #1
	ldr	w8, [sp, #108]
	add	w4, w8, #3
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #76]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	add	w8, w8, #1
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #3
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s2, [sp, #72]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #76]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s1, s0, s1, s2
	ldr	s0, [sp, #120]
	fadd	s0, s0, s1
	str	s0, [sp, #120]
	b	LBB127_12
LBB127_12:                              ;   in Loop: Header=BB127_10 Depth=4
	ldr	w8, [sp, #108]
	add	w8, w8, #4
	str	w8, [sp, #108]
	b	LBB127_10
LBB127_13:                              ;   in Loop: Header=BB127_8 Depth=3
	b	LBB127_14
LBB127_14:                              ;   in Loop: Header=BB127_8 Depth=3
	ldr	w8, [sp, #112]
	add	w8, w8, #2
	str	w8, [sp, #112]
	b	LBB127_8
LBB127_15:                              ;   in Loop: Header=BB127_6 Depth=2
	b	LBB127_16
LBB127_16:                              ;   in Loop: Header=BB127_6 Depth=2
	ldr	w8, [sp, #116]
	add	w8, w8, #1
	str	w8, [sp, #116]
	b	LBB127_6
LBB127_17:                              ;   in Loop: Header=BB127_4 Depth=1
	ldr	x8, [sp, #96]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #120]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #34196
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-120]
	ldur	w2, [x29, #-124]
	ldr	w3, [sp, #128]
	ldr	w4, [sp, #124]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB127_18
LBB127_18:                              ;   in Loop: Header=BB127_4 Depth=1
	b	LBB127_19
LBB127_19:                              ;   in Loop: Header=BB127_4 Depth=1
	ldur	w8, [x29, #-84]
	add	w8, w8, #1
	stur	w8, [x29, #-84]
	b	LBB127_4
LBB127_20:
	b	LBB127_21
LBB127_21:
	ldr	w1, [sp, #104]                  ; 4-byte Folded Reload
	adrp	x0, l___unnamed_8@PAGE
	add	x0, x0, l___unnamed_8@PAGEOFF
	bl	___kmpc_for_static_fini
	.cfi_def_cfa wsp, 272
	ldp	x29, x30, [sp, #256]            ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #240]            ; 16-byte Folded Reload
	add	sp, sp, #272
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..129
_.omp_outlined..129:                    ; @.omp_outlined..129
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	x29, x30, [sp, #144]            ; 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-32]
	ldur	x9, [x29, #-40]
	str	x9, [sp, #40]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-48]
	sub	x4, x29, #60
	stur	wzr, [x29, #-60]
	sub	x5, x29, #64
	mov	w8, #31
	stur	w8, [x29, #-64]
	sub	x6, x29, #68
	mov	w7, #1
	stur	w7, [x29, #-68]
	add	x3, sp, #72
	str	wzr, [sp, #72]
	ldur	x8, [x29, #-8]
	ldr	w1, [x8]
	str	w1, [sp, #48]                   ; 4-byte Folded Spill
	mov	x8, sp
	str	w7, [x8]
	adrp	x0, l___unnamed_9@PAGE
	add	x0, x0, l___unnamed_9@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_4
	ldur	w8, [x29, #-64]
	subs	w8, w8, #31
	cset	w8, le
	tbnz	w8, #0, LBB128_2
	b	LBB128_1
LBB128_1:
	mov	w8, #31
	str	w8, [sp, #28]                   ; 4-byte Folded Spill
	b	LBB128_3
LBB128_2:
	ldur	w8, [x29, #-64]
	str	w8, [sp, #28]                   ; 4-byte Folded Spill
	b	LBB128_3
LBB128_3:
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	stur	w8, [x29, #-64]
	ldur	w8, [x29, #-60]
	stur	w8, [x29, #-52]
	b	LBB128_4
LBB128_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB128_6 Depth 2
                                        ;       Child Loop BB128_8 Depth 3
                                        ;         Child Loop BB128_10 Depth 4
	ldur	w8, [x29, #-52]
	ldur	w9, [x29, #-64]
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB128_20
	b	LBB128_5
LBB128_5:                               ;   in Loop: Header=BB128_4 Depth=1
	ldur	w8, [x29, #-52]
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #68]
	movi	d0, #0000000000000000
	str	s0, [sp, #64]
	str	wzr, [sp, #60]
	b	LBB128_6
LBB128_6:                               ;   Parent Loop BB128_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB128_8 Depth 3
                                        ;         Child Loop BB128_10 Depth 4
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #60]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB128_17
	b	LBB128_7
LBB128_7:                               ;   in Loop: Header=BB128_6 Depth=2
	str	wzr, [sp, #56]
	b	LBB128_8
LBB128_8:                               ;   Parent Loop BB128_4 Depth=1
                                        ;     Parent Loop BB128_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB128_10 Depth 4
	ldr	w8, [sp, #56]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB128_15
	b	LBB128_9
LBB128_9:                               ;   in Loop: Header=BB128_8 Depth=3
	str	wzr, [sp, #52]
	b	LBB128_10
LBB128_10:                              ;   Parent Loop BB128_4 Depth=1
                                        ;     Parent Loop BB128_6 Depth=2
                                        ;       Parent Loop BB128_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #52]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB128_13
	b	LBB128_11
LBB128_11:                              ;   in Loop: Header=BB128_10 Depth=4
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #60]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #56]
	ldr	w4, [sp, #52]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #16]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #60]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #56]
	ldr	w8, [sp, #52]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp, #16]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #60]
	ldr	w2, [sp, #68]
	ldr	w8, [sp, #56]
	add	w3, w8, #1
	ldr	w4, [sp, #52]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #24]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #60]
	ldr	w2, [sp, #68]
	ldr	w8, [sp, #56]
	add	w3, w8, #1
	ldr	w8, [sp, #52]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s1, s0, s1
	ldr	s0, [sp, #64]
	fadd	s0, s0, s1
	str	s0, [sp, #64]
	b	LBB128_12
LBB128_12:                              ;   in Loop: Header=BB128_10 Depth=4
	ldr	w8, [sp, #52]
	add	w8, w8, #2
	str	w8, [sp, #52]
	b	LBB128_10
LBB128_13:                              ;   in Loop: Header=BB128_8 Depth=3
	b	LBB128_14
LBB128_14:                              ;   in Loop: Header=BB128_8 Depth=3
	ldr	w8, [sp, #56]
	add	w8, w8, #2
	str	w8, [sp, #56]
	b	LBB128_8
LBB128_15:                              ;   in Loop: Header=BB128_6 Depth=2
	b	LBB128_16
LBB128_16:                              ;   in Loop: Header=BB128_6 Depth=2
	ldr	w8, [sp, #60]
	add	w8, w8, #1
	str	w8, [sp, #60]
	b	LBB128_6
LBB128_17:                              ;   in Loop: Header=BB128_4 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #64]
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #35352
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #68]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB128_18
LBB128_18:                              ;   in Loop: Header=BB128_4 Depth=1
	b	LBB128_19
LBB128_19:                              ;   in Loop: Header=BB128_4 Depth=1
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB128_4
LBB128_20:
	b	LBB128_21
LBB128_21:
	ldr	w1, [sp, #48]                   ; 4-byte Folded Reload
	adrp	x0, l___unnamed_10@PAGE
	add	x0, x0, l___unnamed_10@PAGEOFF
	bl	___kmpc_for_static_fini
	.cfi_def_cfa wsp, 160
	ldp	x29, x30, [sp, #144]            ; 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..130
_.omp_outlined..130:                    ; @.omp_outlined..130
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #272
	.cfi_def_cfa_offset 272
	stp	x28, x27, [sp, #240]            ; 16-byte Folded Spill
	stp	x29, x30, [sp, #256]            ; 16-byte Folded Spill
	add	x29, sp, #256
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	x9, x29, #48
	str	x9, [sp, #56]                   ; 8-byte Folded Spill
	str	x0, [x9, #24]
	str	x1, [x9, #16]
	str	x2, [x9, #8]
	str	x3, [x9]
	stur	x4, [x29, #-56]
	ldr	x8, [x9, #8]
	ldr	x9, [x9]
	ldur	x10, [x29, #-56]
	str	x10, [sp, #64]                  ; 8-byte Folded Spill
	stur	x9, [x29, #-64]
	ldr	w8, [x8]
	stur	w8, [x29, #-92]
	ldur	w9, [x29, #-92]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w10, w9, w10
                                        ; implicit-def: $x9
	mov	x9, x10
	sxtw	x9, w9
	lsr	x9, x9, #0
	mov	x10, #28
	mul	x9, x9, x10
	mul	x9, x9, x10
	subs	x9, x9, #1
	stur	x9, [x29, #-104]
	stur	wzr, [x29, #-108]
	stur	wzr, [x29, #-112]
	stur	wzr, [x29, #-116]
	stur	wzr, [x29, #-120]
	ldur	w9, [x29, #-92]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB129_28
	b	LBB129_1
LBB129_1:
	ldr	x8, [sp, #56]                   ; 8-byte Folded Reload
	add	x4, sp, #128
	str	xzr, [sp, #128]
	ldur	x9, [x29, #-104]
	add	x5, sp, #120
	str	x9, [sp, #120]
	add	x6, sp, #112
	mov	x7, #1
	str	x7, [sp, #112]
	add	x3, sp, #108
	str	wzr, [sp, #108]
	ldr	x8, [x8, #24]
	ldr	w1, [x8]
	mov	x8, sp
	str	x7, [x8]
	adrp	x0, l___unnamed_11@PAGE
	add	x0, x0, l___unnamed_11@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_8
	ldr	x8, [sp, #120]
	ldur	x9, [x29, #-104]
	subs	x8, x8, x9
	cset	w8, le
	tbnz	w8, #0, LBB129_3
	b	LBB129_2
LBB129_2:
	ldur	x8, [x29, #-104]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	b	LBB129_4
LBB129_3:
	ldr	x8, [sp, #120]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	b	LBB129_4
LBB129_4:
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	str	x8, [sp, #120]
	ldr	x8, [sp, #128]
	stur	x8, [x29, #-72]
	b	LBB129_5
LBB129_5:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB129_7 Depth 2
                                        ;       Child Loop BB129_9 Depth 3
                                        ;         Child Loop BB129_11 Depth 4
	ldur	x8, [x29, #-72]
	ldr	x9, [sp, #120]
	subs	x8, x8, x9
	cset	w8, gt
	tbnz	w8, #0, LBB129_26
	b	LBB129_6
LBB129_6:                               ;   in Loop: Header=BB129_5 Depth=1
	ldur	x8, [x29, #-72]
	mov	x12, #784
	str	x12, [sp, #40]                  ; 8-byte Folded Spill
	sdiv	x8, x8, x12
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #104]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	sdiv	x8, x8, x12
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #100]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x10, [x29, #-72]
	sdiv	x10, x10, x12
	mul	x10, x10, x12
	subs	x9, x9, x10
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	mov	x10, #28
	sdiv	x8, x8, x10
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #96]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x11, [x29, #-72]
	sdiv	x11, x11, x12
	mul	x11, x11, x12
	subs	x9, x9, x11
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x11, [x29, #-72]
	sdiv	x11, x11, x12
	mul	x11, x11, x12
	subs	x9, x9, x11
	ldur	x11, [x29, #-72]
	ldur	x13, [x29, #-72]
	sdiv	x13, x13, x12
	mul	x13, x13, x12
	subs	x11, x11, x13
	sdiv	x11, x11, x12
	mul	x11, x11, x12
	subs	x9, x9, x11
	sdiv	x9, x9, x10
	mul	x9, x9, x10
	subs	x8, x8, x9
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #92]
	movi	d0, #0000000000000000
	str	s0, [sp, #88]
	str	wzr, [sp, #84]
	b	LBB129_7
LBB129_7:                               ;   Parent Loop BB129_5 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB129_9 Depth 3
                                        ;         Child Loop BB129_11 Depth 4
	ldr	w8, [sp, #84]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB129_23
	b	LBB129_8
LBB129_8:                               ;   in Loop: Header=BB129_7 Depth=2
	str	wzr, [sp, #80]
	b	LBB129_9
LBB129_9:                               ;   Parent Loop BB129_5 Depth=1
                                        ;     Parent Loop BB129_7 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB129_11 Depth 4
	ldr	w8, [sp, #80]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB129_21
	b	LBB129_10
LBB129_10:                              ;   in Loop: Header=BB129_9 Depth=3
	str	wzr, [sp, #76]
	b	LBB129_11
LBB129_11:                              ;   Parent Loop BB129_5 Depth=1
                                        ;     Parent Loop BB129_7 Depth=2
                                        ;       Parent Loop BB129_9 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #76]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB129_19
	b	LBB129_12
LBB129_12:                              ;   in Loop: Header=BB129_11 Depth=4
	ldr	w8, [sp, #96]
	ldr	w9, [sp, #80]
	subs	w9, w8, w9
	mov	w8, #0
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB129_17
	b	LBB129_13
LBB129_13:                              ;   in Loop: Header=BB129_11 Depth=4
	ldr	w8, [sp, #96]
	ldr	w9, [sp, #80]
	subs	w8, w8, w9
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB129_17
	b	LBB129_14
LBB129_14:                              ;   in Loop: Header=BB129_11 Depth=4
	ldr	w8, [sp, #92]
	ldr	w9, [sp, #76]
	subs	w9, w8, w9
	mov	w8, #0
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB129_17
	b	LBB129_15
LBB129_15:                              ;   in Loop: Header=BB129_11 Depth=4
	ldr	w8, [sp, #92]
	ldr	w9, [sp, #76]
	subs	w8, w8, w9
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB129_17
	b	LBB129_16
LBB129_16:                              ;   in Loop: Header=BB129_11 Depth=4
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #104]
	ldr	w2, [sp, #84]
	ldr	w8, [sp, #96]
	ldr	w9, [sp, #80]
	subs	w3, w8, w9
	ldr	w8, [sp, #92]
	ldr	w9, [sp, #76]
	subs	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	x8, [sp, #64]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #28]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #84]
	ldr	w2, [sp, #100]
	ldr	w3, [sp, #80]
	ldr	w4, [sp, #76]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #24]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #104]
	ldr	w2, [sp, #84]
	ldr	w8, [sp, #96]
	ldr	w9, [sp, #80]
	subs	w3, w8, w9
	ldr	w8, [sp, #92]
	ldr	w9, [sp, #76]
	subs	w8, w8, w9
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	x8, [sp, #64]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #84]
	ldr	w2, [sp, #100]
	ldr	w3, [sp, #80]
	ldr	w8, [sp, #76]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s2, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #28]                   ; 4-byte Folded Reload
	ldr	s3, [x0]
	fmul	s2, s2, s3
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #32]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #104]
	ldr	w2, [sp, #84]
	ldr	w8, [sp, #96]
	ldr	w9, [sp, #80]
	subs	w3, w8, w9
	ldr	w8, [sp, #92]
	ldr	w9, [sp, #76]
	subs	w8, w8, w9
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	x8, [sp, #64]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #84]
	ldr	w2, [sp, #100]
	ldr	w3, [sp, #80]
	ldr	w8, [sp, #76]
	add	w4, w8, #2
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s2, [sp, #32]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #36]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s1, s0, s1, s2
	ldr	s0, [sp, #88]
	fadd	s0, s0, s1
	str	s0, [sp, #88]
	b	LBB129_17
LBB129_17:                              ;   in Loop: Header=BB129_11 Depth=4
	b	LBB129_18
LBB129_18:                              ;   in Loop: Header=BB129_11 Depth=4
	ldr	w8, [sp, #76]
	add	w8, w8, #3
	str	w8, [sp, #76]
	b	LBB129_11
LBB129_19:                              ;   in Loop: Header=BB129_9 Depth=3
	b	LBB129_20
LBB129_20:                              ;   in Loop: Header=BB129_9 Depth=3
	ldr	w8, [sp, #80]
	add	w8, w8, #1
	str	w8, [sp, #80]
	b	LBB129_9
LBB129_21:                              ;   in Loop: Header=BB129_7 Depth=2
	b	LBB129_22
LBB129_22:                              ;   in Loop: Header=BB129_7 Depth=2
	ldr	w8, [sp, #84]
	add	w8, w8, #1
	str	w8, [sp, #84]
	b	LBB129_7
LBB129_23:                              ;   in Loop: Header=BB129_5 Depth=1
	ldr	x8, [sp, #64]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #88]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #35484
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #104]
	ldr	w2, [sp, #100]
	ldr	w3, [sp, #96]
	ldr	w4, [sp, #92]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB129_24
LBB129_24:                              ;   in Loop: Header=BB129_5 Depth=1
	b	LBB129_25
LBB129_25:                              ;   in Loop: Header=BB129_5 Depth=1
	ldur	x8, [x29, #-72]
	add	x8, x8, #1
	stur	x8, [x29, #-72]
	b	LBB129_5
LBB129_26:
	b	LBB129_27
LBB129_27:
	ldr	x8, [sp, #56]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #24]
	ldr	w1, [x8]
	adrp	x0, l___unnamed_12@PAGE
	add	x0, x0, l___unnamed_12@PAGEOFF
	bl	___kmpc_for_static_fini
	b	LBB129_28
LBB129_28:
	.cfi_def_cfa wsp, 272
	ldp	x29, x30, [sp, #256]            ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #240]            ; 16-byte Folded Reload
	add	sp, sp, #272
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #160]            ; 16-byte Folded Spill
	add	x29, sp, #160
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #34196
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	mov	w1, #32
	str	w1, [sp, #28]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE6set_n0Ei
	ldr	w1, [sp, #28]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	mov	x9, #35352
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	mov	x9, #35484
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE6set_n0Ei
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #128]
	stur	x8, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB130_1
LBB130_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB130_3 Depth 2
                                        ;       Child Loop BB130_5 Depth 3
                                        ;         Child Loop BB130_7 Depth 4
                                        ;           Child Loop BB130_9 Depth 5
                                        ;             Child Loop BB130_11 Depth 6
                                        ;               Child Loop BB130_13 Depth 7
	ldur	w8, [x29, #-36]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB130_28
	b	LBB130_2
LBB130_2:                               ;   in Loop: Header=BB130_1 Depth=1
	stur	wzr, [x29, #-40]
	b	LBB130_3
LBB130_3:                               ;   Parent Loop BB130_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB130_5 Depth 3
                                        ;         Child Loop BB130_7 Depth 4
                                        ;           Child Loop BB130_9 Depth 5
                                        ;             Child Loop BB130_11 Depth 6
                                        ;               Child Loop BB130_13 Depth 7
	ldur	w8, [x29, #-40]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB130_26
	b	LBB130_4
LBB130_4:                               ;   in Loop: Header=BB130_3 Depth=2
	stur	wzr, [x29, #-44]
	b	LBB130_5
LBB130_5:                               ;   Parent Loop BB130_1 Depth=1
                                        ;     Parent Loop BB130_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB130_7 Depth 4
                                        ;           Child Loop BB130_9 Depth 5
                                        ;             Child Loop BB130_11 Depth 6
                                        ;               Child Loop BB130_13 Depth 7
	ldur	w8, [x29, #-44]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB130_24
	b	LBB130_6
LBB130_6:                               ;   in Loop: Header=BB130_5 Depth=3
	stur	wzr, [x29, #-48]
	b	LBB130_7
LBB130_7:                               ;   Parent Loop BB130_1 Depth=1
                                        ;     Parent Loop BB130_3 Depth=2
                                        ;       Parent Loop BB130_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB130_9 Depth 5
                                        ;             Child Loop BB130_11 Depth 6
                                        ;               Child Loop BB130_13 Depth 7
	ldur	w8, [x29, #-48]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB130_22
	b	LBB130_8
LBB130_8:                               ;   in Loop: Header=BB130_7 Depth=4
	movi	d0, #0000000000000000
	stur	s0, [x29, #-52]
	stur	wzr, [x29, #-56]
	b	LBB130_9
LBB130_9:                               ;   Parent Loop BB130_1 Depth=1
                                        ;     Parent Loop BB130_3 Depth=2
                                        ;       Parent Loop BB130_5 Depth=3
                                        ;         Parent Loop BB130_7 Depth=4
                                        ; =>        This Loop Header: Depth=5
                                        ;             Child Loop BB130_11 Depth 6
                                        ;               Child Loop BB130_13 Depth 7
	ldur	w8, [x29, #-56]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB130_20
	b	LBB130_10
LBB130_10:                              ;   in Loop: Header=BB130_9 Depth=5
	stur	wzr, [x29, #-60]
	b	LBB130_11
LBB130_11:                              ;   Parent Loop BB130_1 Depth=1
                                        ;     Parent Loop BB130_3 Depth=2
                                        ;       Parent Loop BB130_5 Depth=3
                                        ;         Parent Loop BB130_7 Depth=4
                                        ;           Parent Loop BB130_9 Depth=5
                                        ; =>          This Loop Header: Depth=6
                                        ;               Child Loop BB130_13 Depth 7
	ldur	w8, [x29, #-60]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB130_18
	b	LBB130_12
LBB130_12:                              ;   in Loop: Header=BB130_11 Depth=6
	stur	wzr, [x29, #-64]
	b	LBB130_13
LBB130_13:                              ;   Parent Loop BB130_1 Depth=1
                                        ;     Parent Loop BB130_3 Depth=2
                                        ;       Parent Loop BB130_5 Depth=3
                                        ;         Parent Loop BB130_7 Depth=4
                                        ;           Parent Loop BB130_9 Depth=5
                                        ;             Parent Loop BB130_11 Depth=6
                                        ; =>            This Inner Loop Header: Depth=7
	ldur	w8, [x29, #-64]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB130_16
	b	LBB130_14
LBB130_14:                              ;   in Loop: Header=BB130_13 Depth=7
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-56]
	ldur	w2, [x29, #-36]
	ldur	w3, [x29, #-60]
	ldur	w4, [x29, #-64]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #24]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldur	w1, [x29, #-56]
	ldur	w2, [x29, #-40]
	ldur	w8, [x29, #-60]
	ldur	w9, [x29, #-44]
	add	w3, w8, w9
	ldur	w8, [x29, #-64]
	ldur	w9, [x29, #-48]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	s0, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldur	s2, [x29, #-52]
	fmadd	s0, s0, s1, s2
	stur	s0, [x29, #-52]
	b	LBB130_15
LBB130_15:                              ;   in Loop: Header=BB130_13 Depth=7
	ldur	w8, [x29, #-64]
	add	w8, w8, #1
	stur	w8, [x29, #-64]
	b	LBB130_13
LBB130_16:                              ;   in Loop: Header=BB130_11 Depth=6
	b	LBB130_17
LBB130_17:                              ;   in Loop: Header=BB130_11 Depth=6
	ldur	w8, [x29, #-60]
	add	w8, w8, #1
	stur	w8, [x29, #-60]
	b	LBB130_11
LBB130_18:                              ;   in Loop: Header=BB130_9 Depth=5
	b	LBB130_19
LBB130_19:                              ;   in Loop: Header=BB130_9 Depth=5
	ldur	w8, [x29, #-56]
	add	w8, w8, #1
	stur	w8, [x29, #-56]
	b	LBB130_9
LBB130_20:                              ;   in Loop: Header=BB130_7 Depth=4
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldur	w9, [x29, #-52]
	str	w9, [sp, #20]                   ; 4-byte Folded Spill
	mov	x9, #34196
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-40]
	ldur	w3, [x29, #-44]
	ldur	w4, [x29, #-48]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB130_21
LBB130_21:                              ;   in Loop: Header=BB130_7 Depth=4
	ldur	w8, [x29, #-48]
	add	w8, w8, #1
	stur	w8, [x29, #-48]
	b	LBB130_7
LBB130_22:                              ;   in Loop: Header=BB130_5 Depth=3
	b	LBB130_23
LBB130_23:                              ;   in Loop: Header=BB130_5 Depth=3
	ldur	w8, [x29, #-44]
	add	w8, w8, #1
	stur	w8, [x29, #-44]
	b	LBB130_5
LBB130_24:                              ;   in Loop: Header=BB130_3 Depth=2
	b	LBB130_25
LBB130_25:                              ;   in Loop: Header=BB130_3 Depth=2
	ldur	w8, [x29, #-40]
	add	w8, w8, #1
	stur	w8, [x29, #-40]
	b	LBB130_3
LBB130_26:                              ;   in Loop: Header=BB130_1 Depth=1
	b	LBB130_27
LBB130_27:                              ;   in Loop: Header=BB130_1 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB130_1
LBB130_28:
	stur	wzr, [x29, #-68]
	b	LBB130_29
LBB130_29:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB130_31 Depth 2
                                        ;       Child Loop BB130_33 Depth 3
                                        ;         Child Loop BB130_35 Depth 4
	ldur	w8, [x29, #-68]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB130_44
	b	LBB130_30
LBB130_30:                              ;   in Loop: Header=BB130_29 Depth=1
	movi	d0, #0000000000000000
	stur	s0, [x29, #-72]
	stur	wzr, [x29, #-76]
	b	LBB130_31
LBB130_31:                              ;   Parent Loop BB130_29 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB130_33 Depth 3
                                        ;         Child Loop BB130_35 Depth 4
	ldur	w8, [x29, #-76]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB130_42
	b	LBB130_32
LBB130_32:                              ;   in Loop: Header=BB130_31 Depth=2
	str	wzr, [sp, #80]
	b	LBB130_33
LBB130_33:                              ;   Parent Loop BB130_29 Depth=1
                                        ;     Parent Loop BB130_31 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB130_35 Depth 4
	ldr	w8, [sp, #80]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB130_40
	b	LBB130_34
LBB130_34:                              ;   in Loop: Header=BB130_33 Depth=3
	str	wzr, [sp, #76]
	b	LBB130_35
LBB130_35:                              ;   Parent Loop BB130_29 Depth=1
                                        ;     Parent Loop BB130_31 Depth=2
                                        ;       Parent Loop BB130_33 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #76]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB130_38
	b	LBB130_36
LBB130_36:                              ;   in Loop: Header=BB130_35 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-76]
	ldur	w2, [x29, #-68]
	ldr	w3, [sp, #80]
	ldr	w4, [sp, #76]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s1, [x0]
	ldur	s0, [x29, #-72]
	fadd	s0, s0, s1
	stur	s0, [x29, #-72]
	b	LBB130_37
LBB130_37:                              ;   in Loop: Header=BB130_35 Depth=4
	ldr	w8, [sp, #76]
	add	w8, w8, #1
	str	w8, [sp, #76]
	b	LBB130_35
LBB130_38:                              ;   in Loop: Header=BB130_33 Depth=3
	b	LBB130_39
LBB130_39:                              ;   in Loop: Header=BB130_33 Depth=3
	ldr	w8, [sp, #80]
	add	w8, w8, #1
	str	w8, [sp, #80]
	b	LBB130_33
LBB130_40:                              ;   in Loop: Header=BB130_31 Depth=2
	b	LBB130_41
LBB130_41:                              ;   in Loop: Header=BB130_31 Depth=2
	ldur	w8, [x29, #-76]
	add	w8, w8, #1
	stur	w8, [x29, #-76]
	b	LBB130_31
LBB130_42:                              ;   in Loop: Header=BB130_29 Depth=1
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldur	w9, [x29, #-72]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #35352
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-68]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB130_43
LBB130_43:                              ;   in Loop: Header=BB130_29 Depth=1
	ldur	w8, [x29, #-68]
	add	w8, w8, #1
	stur	w8, [x29, #-68]
	b	LBB130_29
LBB130_44:
	str	wzr, [sp, #72]
	b	LBB130_45
LBB130_45:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB130_47 Depth 2
                                        ;       Child Loop BB130_49 Depth 3
                                        ;         Child Loop BB130_51 Depth 4
                                        ;           Child Loop BB130_53 Depth 5
                                        ;             Child Loop BB130_55 Depth 6
                                        ;               Child Loop BB130_57 Depth 7
	ldr	w8, [sp, #72]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB130_77
	b	LBB130_46
LBB130_46:                              ;   in Loop: Header=BB130_45 Depth=1
	str	wzr, [sp, #68]
	b	LBB130_47
LBB130_47:                              ;   Parent Loop BB130_45 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB130_49 Depth 3
                                        ;         Child Loop BB130_51 Depth 4
                                        ;           Child Loop BB130_53 Depth 5
                                        ;             Child Loop BB130_55 Depth 6
                                        ;               Child Loop BB130_57 Depth 7
	ldr	w8, [sp, #68]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB130_75
	b	LBB130_48
LBB130_48:                              ;   in Loop: Header=BB130_47 Depth=2
	str	wzr, [sp, #64]
	b	LBB130_49
LBB130_49:                              ;   Parent Loop BB130_45 Depth=1
                                        ;     Parent Loop BB130_47 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB130_51 Depth 4
                                        ;           Child Loop BB130_53 Depth 5
                                        ;             Child Loop BB130_55 Depth 6
                                        ;               Child Loop BB130_57 Depth 7
	ldr	w8, [sp, #64]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB130_73
	b	LBB130_50
LBB130_50:                              ;   in Loop: Header=BB130_49 Depth=3
	str	wzr, [sp, #60]
	b	LBB130_51
LBB130_51:                              ;   Parent Loop BB130_45 Depth=1
                                        ;     Parent Loop BB130_47 Depth=2
                                        ;       Parent Loop BB130_49 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB130_53 Depth 5
                                        ;             Child Loop BB130_55 Depth 6
                                        ;               Child Loop BB130_57 Depth 7
	ldr	w8, [sp, #60]
	subs	w8, w8, #28
	cset	w8, ge
	tbnz	w8, #0, LBB130_71
	b	LBB130_52
LBB130_52:                              ;   in Loop: Header=BB130_51 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #56]
	str	wzr, [sp, #52]
	b	LBB130_53
LBB130_53:                              ;   Parent Loop BB130_45 Depth=1
                                        ;     Parent Loop BB130_47 Depth=2
                                        ;       Parent Loop BB130_49 Depth=3
                                        ;         Parent Loop BB130_51 Depth=4
                                        ; =>        This Loop Header: Depth=5
                                        ;             Child Loop BB130_55 Depth 6
                                        ;               Child Loop BB130_57 Depth 7
	ldr	w8, [sp, #52]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB130_69
	b	LBB130_54
LBB130_54:                              ;   in Loop: Header=BB130_53 Depth=5
	str	wzr, [sp, #48]
	b	LBB130_55
LBB130_55:                              ;   Parent Loop BB130_45 Depth=1
                                        ;     Parent Loop BB130_47 Depth=2
                                        ;       Parent Loop BB130_49 Depth=3
                                        ;         Parent Loop BB130_51 Depth=4
                                        ;           Parent Loop BB130_53 Depth=5
                                        ; =>          This Loop Header: Depth=6
                                        ;               Child Loop BB130_57 Depth 7
	ldr	w8, [sp, #48]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB130_67
	b	LBB130_56
LBB130_56:                              ;   in Loop: Header=BB130_55 Depth=6
	str	wzr, [sp, #44]
	b	LBB130_57
LBB130_57:                              ;   Parent Loop BB130_45 Depth=1
                                        ;     Parent Loop BB130_47 Depth=2
                                        ;       Parent Loop BB130_49 Depth=3
                                        ;         Parent Loop BB130_51 Depth=4
                                        ;           Parent Loop BB130_53 Depth=5
                                        ;             Parent Loop BB130_55 Depth=6
                                        ; =>            This Inner Loop Header: Depth=7
	ldr	w8, [sp, #44]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB130_65
	b	LBB130_58
LBB130_58:                              ;   in Loop: Header=BB130_57 Depth=7
	ldr	w8, [sp, #64]
	ldr	w9, [sp, #48]
	subs	w9, w8, w9
	mov	w8, #0
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB130_63
	b	LBB130_59
LBB130_59:                              ;   in Loop: Header=BB130_57 Depth=7
	ldr	w8, [sp, #64]
	ldr	w9, [sp, #48]
	subs	w8, w8, w9
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB130_63
	b	LBB130_60
LBB130_60:                              ;   in Loop: Header=BB130_57 Depth=7
	ldr	w8, [sp, #60]
	ldr	w9, [sp, #44]
	subs	w9, w8, w9
	mov	w8, #0
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB130_63
	b	LBB130_61
LBB130_61:                              ;   in Loop: Header=BB130_57 Depth=7
	ldr	w8, [sp, #60]
	ldr	w9, [sp, #44]
	subs	w8, w8, w9
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB130_63
	b	LBB130_62
LBB130_62:                              ;   in Loop: Header=BB130_57 Depth=7
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #52]
	ldr	w8, [sp, #64]
	ldr	w9, [sp, #48]
	subs	w3, w8, w9
	ldr	w8, [sp, #60]
	ldr	w9, [sp, #44]
	subs	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #52]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #48]
	ldr	w4, [sp, #44]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #56]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #56]
	b	LBB130_63
LBB130_63:                              ;   in Loop: Header=BB130_57 Depth=7
	b	LBB130_64
LBB130_64:                              ;   in Loop: Header=BB130_57 Depth=7
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB130_57
LBB130_65:                              ;   in Loop: Header=BB130_55 Depth=6
	b	LBB130_66
LBB130_66:                              ;   in Loop: Header=BB130_55 Depth=6
	ldr	w8, [sp, #48]
	add	w8, w8, #1
	str	w8, [sp, #48]
	b	LBB130_55
LBB130_67:                              ;   in Loop: Header=BB130_53 Depth=5
	b	LBB130_68
LBB130_68:                              ;   in Loop: Header=BB130_53 Depth=5
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB130_53
LBB130_69:                              ;   in Loop: Header=BB130_51 Depth=4
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #56]
	str	w9, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #35484
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #64]
	ldr	w4, [sp, #60]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EEclEiiii
	ldr	w8, [sp, #8]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB130_70
LBB130_70:                              ;   in Loop: Header=BB130_51 Depth=4
	ldr	w8, [sp, #60]
	add	w8, w8, #1
	str	w8, [sp, #60]
	b	LBB130_51
LBB130_71:                              ;   in Loop: Header=BB130_49 Depth=3
	b	LBB130_72
LBB130_72:                              ;   in Loop: Header=BB130_49 Depth=3
	ldr	w8, [sp, #64]
	add	w8, w8, #1
	str	w8, [sp, #64]
	b	LBB130_49
LBB130_73:                              ;   in Loop: Header=BB130_47 Depth=2
	b	LBB130_74
LBB130_74:                              ;   in Loop: Header=BB130_47 Depth=2
	ldr	w8, [sp, #68]
	add	w8, w8, #1
	str	w8, [sp, #68]
	b	LBB130_47
LBB130_75:                              ;   in Loop: Header=BB130_45 Depth=1
	b	LBB130_76
LBB130_76:                              ;   in Loop: Header=BB130_45 Depth=1
	ldr	w8, [sp, #72]
	add	w8, w8, #1
	str	w8, [sp, #72]
	b	LBB130_45
LBB130_77:
	.cfi_def_cfa wsp, 176
	ldp	x29, x30, [sp, #160]            ; 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE3dotERS0_: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB131_2
	b	LBB131_1
LBB131_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB131_2:
	b	LBB131_3
LBB131_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB131_4
LBB131_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB131_6 Depth 2
                                        ;       Child Loop BB131_8 Depth 3
                                        ;         Child Loop BB131_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB131_19
	b	LBB131_5
LBB131_5:                               ;   in Loop: Header=BB131_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB131_6
LBB131_6:                               ;   Parent Loop BB131_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB131_8 Depth 3
                                        ;         Child Loop BB131_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB131_17
	b	LBB131_7
LBB131_7:                               ;   in Loop: Header=BB131_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB131_8
LBB131_8:                               ;   Parent Loop BB131_4 Depth=1
                                        ;     Parent Loop BB131_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB131_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB131_15
	b	LBB131_9
LBB131_9:                               ;   in Loop: Header=BB131_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB131_10
LBB131_10:                              ;   Parent Loop BB131_4 Depth=1
                                        ;     Parent Loop BB131_6 Depth=2
                                        ;       Parent Loop BB131_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB131_13
	b	LBB131_11
LBB131_11:                              ;   in Loop: Header=BB131_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB131_12
LBB131_12:                              ;   in Loop: Header=BB131_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB131_10
LBB131_13:                              ;   in Loop: Header=BB131_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB131_14
LBB131_14:                              ;   in Loop: Header=BB131_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB131_8
LBB131_15:                              ;   in Loop: Header=BB131_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB131_16
LBB131_16:                              ;   in Loop: Header=BB131_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB131_6
LBB131_17:                              ;   in Loop: Header=BB131_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB131_18
LBB131_18:                              ;   in Loop: Header=BB131_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB131_4
LBB131_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE3dotERS0_: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB132_2
	b	LBB132_1
LBB132_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB132_2:
	b	LBB132_3
LBB132_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB132_4
LBB132_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB132_6 Depth 2
                                        ;       Child Loop BB132_8 Depth 3
                                        ;         Child Loop BB132_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB132_19
	b	LBB132_5
LBB132_5:                               ;   in Loop: Header=BB132_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB132_6
LBB132_6:                               ;   Parent Loop BB132_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB132_8 Depth 3
                                        ;         Child Loop BB132_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB132_17
	b	LBB132_7
LBB132_7:                               ;   in Loop: Header=BB132_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB132_8
LBB132_8:                               ;   Parent Loop BB132_4 Depth=1
                                        ;     Parent Loop BB132_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB132_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB132_15
	b	LBB132_9
LBB132_9:                               ;   in Loop: Header=BB132_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB132_10
LBB132_10:                              ;   Parent Loop BB132_4 Depth=1
                                        ;     Parent Loop BB132_6 Depth=2
                                        ;       Parent Loop BB132_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB132_13
	b	LBB132_11
LBB132_11:                              ;   in Loop: Header=BB132_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB132_12
LBB132_12:                              ;   in Loop: Header=BB132_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB132_10
LBB132_13:                              ;   in Loop: Header=BB132_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB132_14
LBB132_14:                              ;   in Loop: Header=BB132_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB132_8
LBB132_15:                              ;   in Loop: Header=BB132_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB132_16
LBB132_16:                              ;   in Loop: Header=BB132_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB132_6
LBB132_17:                              ;   in Loop: Header=BB132_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB132_18
LBB132_18:                              ;   in Loop: Header=BB132_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB132_4
LBB132_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9relu_mainiPPc               ; -- Begin function _Z9relu_mainiPPc
	.p2align	2
__Z9relu_mainiPPc:                      ; @_Z9relu_mainiPPc
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #640
	add	x8, sp, #192
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	str	w0, [x8, #444]
	str	x1, [x8, #432]
	ldr	w0, [x8, #444]
	ldr	x1, [x8, #432]
	sub	x8, x29, #152
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	bl	__ZL10parse_argsiPPc
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	mov	w0, #64
	str	w0, [x8, #308]
	ldr	w1, [x8, #344]
	bl	__ZL5min_iii
	ldr	x9, [sp, #48]                   ; 8-byte Folded Reload
	str	w0, [x9, #304]
	mov	w8, #2
	str	w8, [x9, #300]
	mov	w8, #16
	str	w8, [x9, #296]
	str	w8, [x9, #292]
	ldr	x8, [x9, #336]
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [x9, #288]
	add	x0, sp, #344
	str	x0, [sp, #32]                   ; 8-byte Folded Spill
	bl	__ZN6loggerC1Ev
	ldr	x1, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, sp, #224
	str	x0, [sp, #40]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #40]                   ; 8-byte Folded Reload
	bl	__ZN6logger9start_logE11cmdline_opt
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x1, [x8, #368]
	add	x0, sp, #216
	bl	__ZN9rnd_gen_t4seedEy
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	movi	d0, #0000000000000000
	str	d0, [x8, #16]
	str	d0, [x8, #8]
	str	wzr, [x8]
	b	LBB133_1
LBB133_1:                               ; =>This Inner Loop Header: Depth=1
	ldr	x9, [sp, #48]                   ; 8-byte Folded Reload
	ldr	w8, [x9]
	ldr	w9, [x9, #288]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB133_4
	b	LBB133_2
LBB133_2:                               ;   in Loop: Header=BB133_1 Depth=1
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	w9, [x8]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.121@PAGE
	add	x0, x0, l_.str.121@PAGEOFF
	bl	_printf
	add	x0, sp, #64
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	sub	x1, x29, #152
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	w3, [x8, #304]
	add	x1, sp, #344
	add	x2, sp, #216
	bl	__ZL10grad_checkI4ReluILi64ELi2ELi16ELi16EE6tensorIfLi64ELi2ELi16ELi16EES3_7ReluCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	str	d0, [sp, #184]
	ldr	d0, [x8, #16]
	fcvt	s0, d0
	ldr	d1, [sp, #184]
	fcvt	s1, d1
	bl	__ZL5max_rff
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [x8, #16]
	ldr	d1, [sp, #184]
	ldr	d0, [x8, #8]
	fadd	d0, d0, d1
	str	d0, [x8, #8]
	b	LBB133_3
LBB133_3:                               ;   in Loop: Header=BB133_1 Depth=1
	ldr	x9, [sp, #48]                   ; 8-byte Folded Reload
	ldr	w8, [x9]
	add	w8, w8, #1
	str	w8, [x9]
	b	LBB133_1
LBB133_4:
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #16]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.122@PAGE
	add	x0, x0, l_.str.122@PAGEOFF
	bl	_printf
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	d0, [x8, #8]
	ldr	s2, [x8, #288]
                                        ; implicit-def: $d1
	fmov	s1, s2
	sshll.2d	v1, v1, #0
                                        ; kill: def $d1 killed $d1 killed $q1
	scvtf	d1, d1
	fdiv	d0, d0, d1
	mov	x8, sp
	str	d0, [x8]
	adrp	x0, l_.str.123@PAGE
	add	x0, x0, l_.str.123@PAGEOFF
	bl	_printf
	add	x0, sp, #344
	bl	__ZN6logger7end_logEv
	mov	w0, #0
	add	sp, sp, #640
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL10grad_checkI4ReluILi64ELi2ELi16ELi16EE6tensorIfLi64ELi2ELi16ELi16EES3_7ReluCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
__ZL10grad_checkI4ReluILi64ELi2ELi16ELi16EE6tensorIfLi64ELi2ELi16ELi16EES3_7ReluCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i: ; @_ZL10grad_checkI4ReluILi64ELi2ELi16ELi16EE6tensorIfLi64ELi2ELi16ELi16EES3_7ReluCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
Lfunc_begin1:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception1
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	.cfi_remember_state
	sub	sp, sp, #496
	str	x0, [sp, #144]                  ; 8-byte Folded Spill
	stur	x1, [x29, #-32]
	stur	x2, [x29, #-40]
	stur	w3, [x29, #-44]
	mov	x0, #144
	movk	x0, #4, lsl #16
	str	x0, [sp, #152]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #152]                  ; 8-byte Folded Reload
	str	x0, [sp, #160]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #160]                  ; 8-byte Folded Reload
Ltmp32:
	bl	__ZN4ReluILi64ELi2ELi16ELi16EEC1Ev
Ltmp33:
	b	LBB134_1
LBB134_1:
	ldr	x1, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #160]                  ; 8-byte Folded Reload
	stur	x8, [x29, #-56]
	ldur	x8, [x29, #-56]
	str	x8, [sp, #64]                   ; 8-byte Folded Spill
	sub	x0, x29, #192
	str	x0, [sp, #72]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #64]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #72]                   ; 8-byte Folded Reload
	ldur	x2, [x29, #-32]
	ldur	x3, [x29, #-40]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	mov	x0, #4
	movk	x0, #2, lsl #16
	str	x0, [sp, #104]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #80]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #80]                   ; 8-byte Folded Reload
	stur	x0, [x29, #-208]
	ldur	x0, [x29, #-208]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	fmov	s0, #-1.00000000
	str	s0, [sp, #96]                   ; 4-byte Folded Spill
	fmov	s1, #1.00000000
	str	s1, [sp, #100]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff
	ldr	x0, [sp, #104]                  ; 8-byte Folded Reload
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #88]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #88]                   ; 8-byte Folded Reload
	ldr	s0, [sp, #96]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #100]                  ; 4-byte Folded Reload
	stur	x0, [x29, #-216]
	ldur	x0, [x29, #-216]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff
	ldr	x0, [sp, #104]                  ; 8-byte Folded Reload
	mov	w8, #4719
	movk	w8, #14979, lsl #16
	fmov	s0, w8
	stur	s0, [x29, #-220]
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #112]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #112]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-232]
	ldur	x0, [x29, #-232]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	ldur	s0, [x29, #-220]
	fneg	s0, s0
	ldur	s1, [x29, #-220]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi2ELi16ELi16EEEPT_S3_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-240]
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi2ELi16ELi16EEEPT_S3_i
	stur	x0, [x29, #-248]
	ldur	x0, [x29, #-240]
	ldur	x1, [x29, #-232]
	fmov	s0, #-0.50000000
	str	s0, [sp, #124]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE4add_EfRS0_
	ldur	x0, [x29, #-248]
	ldur	x1, [x29, #-232]
	fmov	s0, #0.50000000
	str	s0, [sp, #128]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE4add_EfRS0_
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI4ReluILi64ELi2ELi16ELi16EEEPT_S3_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #256]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI4ReluILi64ELi2ELi16ELi16EEEPT_S3_i
	str	x0, [sp, #248]
	ldr	x0, [sp, #256]
	ldur	x1, [x29, #-40]
	ldur	s0, [x29, #-220]
	fneg	s0, s0
	ldur	s1, [x29, #-220]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff
	ldr	x0, [sp, #248]
	ldr	x1, [sp, #256]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE9copy_gradERS0_
	ldr	s0, [sp, #124]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #256]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE8add_gradEf
	ldr	s0, [sp, #128]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #248]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE8add_gradEf
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-216]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	ldur	x0, [x29, #-56]
	ldur	x1, [x29, #-208]
	mov	w2, #1
	str	w2, [sp, #132]                  ; 4-byte Folded Spill
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	str	x0, [sp, #240]
	ldur	x0, [x29, #-56]
	ldur	x1, [x29, #-216]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE
	ldr	w2, [sp, #132]                  ; 4-byte Folded Reload
	str	x0, [sp, #232]
	ldr	x0, [sp, #256]
	ldur	x1, [x29, #-240]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	ldr	w2, [sp, #132]                  ; 4-byte Folded Reload
	str	x0, [sp, #224]
	ldr	x0, [sp, #248]
	ldur	x1, [x29, #-248]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #216]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #224]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	str	d0, [sp, #208]
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #240]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	str	d0, [sp, #200]
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #216]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	str	d0, [sp, #192]
	ldr	x0, [sp, #232]
	ldur	x1, [x29, #-232]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	str	d0, [sp, #184]
	ldur	x0, [x29, #-56]
	ldr	x1, [sp, #256]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_
	str	d0, [sp, #176]
	ldr	d0, [sp, #184]
	ldr	d1, [sp, #176]
	ldr	d2, [sp, #208]
	ldr	d3, [sp, #200]
	ldr	d4, [sp, #192]
	bl	__ZL10show_errorddddd
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [sp, #168]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-216]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-232]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldur	x8, [x29, #-56]
	str	x8, [sp, #136]                  ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB134_3
	b	LBB134_2
LBB134_2:
	ldr	x0, [sp, #136]                  ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB134_3
LBB134_3:
	ldr	x8, [sp, #256]
	str	x8, [sp, #56]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB134_5
	b	LBB134_4
LBB134_4:
	ldr	x0, [sp, #56]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB134_5
LBB134_5:
	ldr	x8, [sp, #248]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB134_7
	b	LBB134_6
LBB134_6:
	ldr	x0, [sp, #48]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB134_7
LBB134_7:
	ldur	x8, [x29, #-216]
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB134_9
	b	LBB134_8
LBB134_8:
	ldr	x0, [sp, #40]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB134_9
LBB134_9:
	ldur	x8, [x29, #-208]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB134_11
	b	LBB134_10
LBB134_10:
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB134_11
LBB134_11:
	ldur	x8, [x29, #-232]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB134_13
	b	LBB134_12
LBB134_12:
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB134_13
LBB134_13:
	ldur	x8, [x29, #-240]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB134_15
	b	LBB134_14
LBB134_14:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB134_15
LBB134_15:
	ldur	x8, [x29, #-248]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB134_17
	b	LBB134_16
LBB134_16:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB134_17
LBB134_17:
	ldr	d0, [sp, #168]
	add	sp, sp, #496
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
LBB134_18:
	.cfi_restore_state
Ltmp34:
	mov	x9, x0
	ldr	x0, [sp, #160]                  ; 8-byte Folded Reload
	mov	x8, x1
	stur	x9, [x29, #-64]
	stur	w8, [x29, #-68]
	bl	__ZdlPv
	b	LBB134_19
LBB134_19:
	ldur	x0, [x29, #-64]
	bl	__Unwind_Resume
Lfunc_end1:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table134:
Lexception1:
	.byte	255                             ; @LPStart Encoding = omit
	.byte	255                             ; @TType Encoding = omit
	.byte	1                               ; Call site Encoding = uleb128
	.uleb128 Lcst_end1-Lcst_begin1
Lcst_begin1:
	.uleb128 Lfunc_begin1-Lfunc_begin1      ; >> Call Site 1 <<
	.uleb128 Ltmp32-Lfunc_begin1            ;   Call between Lfunc_begin1 and Ltmp32
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp32-Lfunc_begin1            ; >> Call Site 2 <<
	.uleb128 Ltmp33-Ltmp32                  ;   Call between Ltmp32 and Ltmp33
	.uleb128 Ltmp34-Lfunc_begin1            ;     jumps to Ltmp34
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp33-Lfunc_begin1            ; >> Call Site 3 <<
	.uleb128 Lfunc_end1-Ltmp33              ;   Call between Ltmp33 and Lfunc_end1
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
Lcst_end1:
	.p2align	2
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EEC1Ev ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EEC1Ev
	.weak_def_can_be_hidden	__ZN4ReluILi64ELi2ELi16ELi16EEC1Ev
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EEC1Ev:     ; @_ZN4ReluILi64ELi2ELi16ELi16EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN4ReluILi64ELi2ELi16ELi16EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg: ; @_ZN4ReluILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	str	x2, [sp, #24]
	str	x3, [sp, #16]
	ldur	x0, [x29, #-16]
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [sp, #24]
	str	x8, [x9, #120]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB137_1
LBB137_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB137_3 Depth 2
                                        ;       Child Loop BB137_5 Depth 3
                                        ;         Child Loop BB137_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB137_16
	b	LBB137_2
LBB137_2:                               ;   in Loop: Header=BB137_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB137_3
LBB137_3:                               ;   Parent Loop BB137_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB137_5 Depth 3
                                        ;         Child Loop BB137_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB137_14
	b	LBB137_4
LBB137_4:                               ;   in Loop: Header=BB137_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB137_5
LBB137_5:                               ;   Parent Loop BB137_1 Depth=1
                                        ;     Parent Loop BB137_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB137_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB137_12
	b	LBB137_6
LBB137_6:                               ;   in Loop: Header=BB137_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB137_7
LBB137_7:                               ;   Parent Loop BB137_1 Depth=1
                                        ;     Parent Loop BB137_3 Depth=2
                                        ;       Parent Loop BB137_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB137_10
	b	LBB137_8
LBB137_8:                               ;   in Loop: Header=BB137_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB137_9
LBB137_9:                               ;   in Loop: Header=BB137_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB137_7
LBB137_10:                              ;   in Loop: Header=BB137_5 Depth=3
	b	LBB137_11
LBB137_11:                              ;   in Loop: Header=BB137_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB137_5
LBB137_12:                              ;   in Loop: Header=BB137_3 Depth=2
	b	LBB137_13
LBB137_13:                              ;   in Loop: Header=BB137_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB137_3
LBB137_14:                              ;   in Loop: Header=BB137_1 Depth=1
	b	LBB137_15
LBB137_15:                              ;   in Loop: Header=BB137_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB137_1
LBB137_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI6tensorIfLi64ELi2ELi16ELi16EEEPT_S3_i ; -- Begin function _Z9make_copyI6tensorIfLi64ELi2ELi16ELi16EEEPT_S3_i
	.weak_definition	__Z9make_copyI6tensorIfLi64ELi2ELi16ELi16EEEPT_S3_i
	.p2align	2
__Z9make_copyI6tensorIfLi64ELi2ELi16ELi16EEEPT_S3_i: ; @_Z9make_copyI6tensorIfLi64ELi2ELi16ELi16EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #4
	movk	x0, #2, lsl #16
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi2ELi16ELi16EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi2ELi16ELi16EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi2ELi16ELi16EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi2ELi16ELi16EE4add_EfRS0_: ; @_ZN6tensorIfLi64ELi2ELi16ELi16EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB139_2
	b	LBB139_1
LBB139_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB139_2:
	b	LBB139_3
LBB139_3:
	str	wzr, [sp, #28]
	b	LBB139_4
LBB139_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB139_6 Depth 2
                                        ;       Child Loop BB139_8 Depth 3
                                        ;         Child Loop BB139_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB139_19
	b	LBB139_5
LBB139_5:                               ;   in Loop: Header=BB139_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB139_6
LBB139_6:                               ;   Parent Loop BB139_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB139_8 Depth 3
                                        ;         Child Loop BB139_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB139_17
	b	LBB139_7
LBB139_7:                               ;   in Loop: Header=BB139_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB139_8
LBB139_8:                               ;   Parent Loop BB139_4 Depth=1
                                        ;     Parent Loop BB139_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB139_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB139_15
	b	LBB139_9
LBB139_9:                               ;   in Loop: Header=BB139_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB139_10
LBB139_10:                              ;   Parent Loop BB139_4 Depth=1
                                        ;     Parent Loop BB139_6 Depth=2
                                        ;       Parent Loop BB139_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB139_13
	b	LBB139_11
LBB139_11:                              ;   in Loop: Header=BB139_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB139_12
LBB139_12:                              ;   in Loop: Header=BB139_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB139_10
LBB139_13:                              ;   in Loop: Header=BB139_8 Depth=3
	b	LBB139_14
LBB139_14:                              ;   in Loop: Header=BB139_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB139_8
LBB139_15:                              ;   in Loop: Header=BB139_6 Depth=2
	b	LBB139_16
LBB139_16:                              ;   in Loop: Header=BB139_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB139_6
LBB139_17:                              ;   in Loop: Header=BB139_4 Depth=1
	b	LBB139_18
LBB139_18:                              ;   in Loop: Header=BB139_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB139_4
LBB139_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI4ReluILi64ELi2ELi16ELi16EEEPT_S3_i ; -- Begin function _Z9make_copyI4ReluILi64ELi2ELi16ELi16EEEPT_S3_i
	.weak_definition	__Z9make_copyI4ReluILi64ELi2ELi16ELi16EEEPT_S3_i
	.p2align	2
__Z9make_copyI4ReluILi64ELi2ELi16ELi16EEEPT_S3_i: ; @_Z9make_copyI4ReluILi64ELi2ELi16ELi16EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #144
	movk	x0, #4, lsl #16
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff: ; @_ZN4ReluILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	x1, [sp, #16]
	str	s0, [sp, #12]
	str	s1, [sp, #8]
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE9copy_gradERS0_ ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE9copy_gradERS0_
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE9copy_gradERS0_
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE9copy_gradERS0_: ; @_ZN4ReluILi64ELi2ELi16ELi16EE9copy_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	x1, [sp]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE8add_gradEf ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE8add_gradEf
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE8add_gradEf
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE8add_gradEf: ; @_ZN4ReluILi64ELi2ELi16ELi16EE8add_gradEf
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	s0, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i ; -- Begin function _Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	.weak_definition	__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	.p2align	2
__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i: ; @_Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i ; -- Begin function _Z6to_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	.weak_definition	__Z6to_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	.p2align	2
__Z6to_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i: ; @_Z6to_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi: ; @_ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB146_2
	b	LBB146_1
LBB146_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB146_3
	b	LBB146_4
LBB146_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	b	LBB146_8
LBB146_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	b	LBB146_8
LBB146_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB146_6
	b	LBB146_5
LBB146_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	b	LBB146_7
LBB146_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	b	LBB146_7
LBB146_7:
	b	LBB146_8
LBB146_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #136
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE: ; @_ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB147_2
	b	LBB147_1
LBB147_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB147_3
	b	LBB147_4
LBB147_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE
	b	LBB147_8
LBB147_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE
	b	LBB147_8
LBB147_4:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB147_6
	b	LBB147_5
LBB147_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE
	b	LBB147_7
LBB147_6:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE
	b	LBB147_7
LBB147_7:
	b	LBB147_8
LBB147_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #140
	movk	x9, #2, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7to_hostI4ReluILi64ELi2ELi16ELi16EEEvPT_i ; -- Begin function _Z7to_hostI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	.weak_definition	__Z7to_hostI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	.p2align	2
__Z7to_hostI4ReluILi64ELi2ELi16ELi16EEEvPT_i: ; @_Z7to_hostI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_: ; @_ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB149_2
	b	LBB149_1
LBB149_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB149_2:
	b	LBB149_3
LBB149_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB149_4
LBB149_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB149_6 Depth 2
                                        ;       Child Loop BB149_8 Depth 3
                                        ;         Child Loop BB149_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB149_19
	b	LBB149_5
LBB149_5:                               ;   in Loop: Header=BB149_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB149_6
LBB149_6:                               ;   Parent Loop BB149_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB149_8 Depth 3
                                        ;         Child Loop BB149_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB149_17
	b	LBB149_7
LBB149_7:                               ;   in Loop: Header=BB149_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB149_8
LBB149_8:                               ;   Parent Loop BB149_4 Depth=1
                                        ;     Parent Loop BB149_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB149_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB149_15
	b	LBB149_9
LBB149_9:                               ;   in Loop: Header=BB149_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB149_10
LBB149_10:                              ;   Parent Loop BB149_4 Depth=1
                                        ;     Parent Loop BB149_6 Depth=2
                                        ;       Parent Loop BB149_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB149_13
	b	LBB149_11
LBB149_11:                              ;   in Loop: Header=BB149_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB149_12
LBB149_12:                              ;   in Loop: Header=BB149_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB149_10
LBB149_13:                              ;   in Loop: Header=BB149_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB149_14
LBB149_14:                              ;   in Loop: Header=BB149_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB149_8
LBB149_15:                              ;   in Loop: Header=BB149_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB149_16
LBB149_16:                              ;   in Loop: Header=BB149_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB149_6
LBB149_17:                              ;   in Loop: Header=BB149_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB149_18
LBB149_18:                              ;   in Loop: Header=BB149_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB149_4
LBB149_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_ ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_: ; @_ZN4ReluILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	x1, [sp]
	movi	d0, #0000000000000000
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i ; -- Begin function _Z7del_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	.weak_definition	__Z7del_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	.p2align	2
__Z7del_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i: ; @_Z7del_devI4ReluILi64ELi2ELi16ELi16EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i ; -- Begin function _Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	.weak_definition	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	.p2align	2
__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i: ; @_Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EEC2Ev ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EEC2Ev
	.weak_def_can_be_hidden	__ZN4ReluILi64ELi2ELi16ELi16EEC2Ev
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EEC2Ev:     ; @_ZN4ReluILi64ELi2ELi16ELi16EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi2ELi16ELi16EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi2ELi16ELi16EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi2ELi16ELi16EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi2ELi16ELi16EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi2ELi16ELi16EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB154_2
	b	LBB154_1
LBB154_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB154_2:
	b	LBB154_3
LBB154_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii: ; @_ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #11
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #10
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #6
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi: ; @_ZN4ReluILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi: ; @_ZN4ReluILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.139@PAGE
	add	x0, x0, l_.str.139@PAGEOFF
	mov	w1, #133
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi: ; @_ZN4ReluILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	add	x0, x8, #136
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE6set_n0Ei
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x9, #128]
	stur	wzr, [x29, #-28]
	b	LBB158_1
LBB158_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB158_3 Depth 2
                                        ;       Child Loop BB158_5 Depth 3
                                        ;         Child Loop BB158_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB158_16
	b	LBB158_2
LBB158_2:                               ;   in Loop: Header=BB158_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB158_3
LBB158_3:                               ;   Parent Loop BB158_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB158_5 Depth 3
                                        ;         Child Loop BB158_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB158_14
	b	LBB158_4
LBB158_4:                               ;   in Loop: Header=BB158_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB158_5
LBB158_5:                               ;   Parent Loop BB158_1 Depth=1
                                        ;     Parent Loop BB158_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB158_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB158_12
	b	LBB158_6
LBB158_6:                               ;   in Loop: Header=BB158_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB158_7
LBB158_7:                               ;   Parent Loop BB158_1 Depth=1
                                        ;     Parent Loop BB158_3 Depth=2
                                        ;       Parent Loop BB158_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB158_10
	b	LBB158_8
LBB158_8:                               ;   in Loop: Header=BB158_7 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s1, [x0]
	movi	d0, #0000000000000000
	bl	__ZL5max_rff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB158_9
LBB158_9:                               ;   in Loop: Header=BB158_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB158_7
LBB158_10:                              ;   in Loop: Header=BB158_5 Depth=3
	b	LBB158_11
LBB158_11:                              ;   in Loop: Header=BB158_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB158_5
LBB158_12:                              ;   in Loop: Header=BB158_3 Depth=2
	b	LBB158_13
LBB158_13:                              ;   in Loop: Header=BB158_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB158_3
LBB158_14:                              ;   in Loop: Header=BB158_1 Depth=1
	b	LBB158_15
LBB158_15:                              ;   in Loop: Header=BB158_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB158_1
LBB158_16:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE: ; @_ZN4ReluILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN4ReluILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE: ; @_ZN4ReluILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.139@PAGE
	add	x0, x0, l_.str.139@PAGEOFF
	mov	w1, #236
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE ; -- Begin function _ZN4ReluILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.weak_definition	__ZN4ReluILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.p2align	2
__ZN4ReluILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE: ; @_ZN4ReluILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #140
	movk	x9, #2, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE6set_n0Ei
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [x8, #128]
	str	x8, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB161_1
LBB161_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB161_3 Depth 2
                                        ;       Child Loop BB161_5 Depth 3
                                        ;         Child Loop BB161_7 Depth 4
	ldr	w8, [sp, #28]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB161_19
	b	LBB161_2
LBB161_2:                               ;   in Loop: Header=BB161_1 Depth=1
	str	wzr, [sp, #24]
	b	LBB161_3
LBB161_3:                               ;   Parent Loop BB161_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB161_5 Depth 3
                                        ;         Child Loop BB161_7 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB161_17
	b	LBB161_4
LBB161_4:                               ;   in Loop: Header=BB161_3 Depth=2
	str	wzr, [sp, #20]
	b	LBB161_5
LBB161_5:                               ;   Parent Loop BB161_1 Depth=1
                                        ;     Parent Loop BB161_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB161_7 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB161_15
	b	LBB161_6
LBB161_6:                               ;   in Loop: Header=BB161_5 Depth=3
	str	wzr, [sp, #16]
	b	LBB161_7
LBB161_7:                               ;   Parent Loop BB161_1 Depth=1
                                        ;     Parent Loop BB161_3 Depth=2
                                        ;       Parent Loop BB161_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB161_13
	b	LBB161_8
LBB161_8:                               ;   in Loop: Header=BB161_7 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [x0]
	fcmp	s0, #0.0
	cset	w8, lt
	tbnz	w8, #0, LBB161_10
	b	LBB161_9
LBB161_9:                               ;   in Loop: Header=BB161_7 Depth=4
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB161_11
LBB161_10:                              ;   in Loop: Header=BB161_7 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB161_11
LBB161_11:                              ;   in Loop: Header=BB161_7 Depth=4
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [sp]                        ; 4-byte Folded Spill
	mov	x9, #140
	movk	x9, #2, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [sp]                        ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB161_12
LBB161_12:                              ;   in Loop: Header=BB161_7 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB161_7
LBB161_13:                              ;   in Loop: Header=BB161_5 Depth=3
	b	LBB161_14
LBB161_14:                              ;   in Loop: Header=BB161_5 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB161_5
LBB161_15:                              ;   in Loop: Header=BB161_3 Depth=2
	b	LBB161_16
LBB161_16:                              ;   in Loop: Header=BB161_3 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB161_3
LBB161_17:                              ;   in Loop: Header=BB161_1 Depth=1
	b	LBB161_18
LBB161_18:                              ;   in Loop: Header=BB161_1 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB161_1
LBB161_19:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z16max_pooling_mainiPPc       ; -- Begin function _Z16max_pooling_mainiPPc
	.p2align	2
__Z16max_pooling_mainiPPc:              ; @_Z16max_pooling_mainiPPc
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #640
	add	x8, sp, #184
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	str	w0, [x8, #452]
	str	x1, [x8, #440]
	ldr	w0, [x8, #452]
	ldr	x1, [x8, #440]
	sub	x8, x29, #152
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	bl	__ZL10parse_argsiPPc
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	mov	w0, #64
	str	w0, [x8, #316]
	ldr	w1, [x8, #352]
	bl	__ZL5min_iii
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	str	w0, [x9, #312]
	mov	w8, #1
	str	w8, [x9, #308]
	mov	w8, #8
	str	w8, [x9, #304]
	str	w8, [x9, #300]
	mov	w8, #2
	str	w8, [x9, #296]
	ldr	x8, [x9, #344]
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [x9, #292]
	add	x0, sp, #336
	str	x0, [sp, #24]                   ; 8-byte Folded Spill
	bl	__ZN6loggerC1Ev
	ldr	x1, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, sp, #216
	str	x0, [sp, #32]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #32]                   ; 8-byte Folded Reload
	bl	__ZN6logger9start_logE11cmdline_opt
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x1, [x8, #376]
	add	x0, sp, #208
	bl	__ZN9rnd_gen_t4seedEy
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	movi	d0, #0000000000000000
	str	d0, [x8, #16]
	str	d0, [x8, #8]
	str	wzr, [x8]
	b	LBB162_1
LBB162_1:                               ; =>This Inner Loop Header: Depth=1
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w8, [x9]
	ldr	w9, [x9, #292]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB162_4
	b	LBB162_2
LBB162_2:                               ;   in Loop: Header=BB162_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w9, [x8]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.121@PAGE
	add	x0, x0, l_.str.121@PAGEOFF
	bl	_printf
	add	x0, sp, #56
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	sub	x1, x29, #152
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w3, [x8, #312]
	add	x1, sp, #336
	add	x2, sp, #208
	bl	__ZL10grad_checkI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE6tensorIfLi64ELi1ELi8ELi8EES2_IfLi64ELi1ELi4ELi4EE15MaxPooling2DCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	str	d0, [sp, #176]
	ldr	d0, [x8, #16]
	fcvt	s0, d0
	ldr	d1, [sp, #176]
	fcvt	s1, d1
	bl	__ZL5max_rff
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [x8, #16]
	ldr	d1, [sp, #176]
	ldr	d0, [x8, #8]
	fadd	d0, d0, d1
	str	d0, [x8, #8]
	b	LBB162_3
LBB162_3:                               ;   in Loop: Header=BB162_1 Depth=1
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w8, [x9]
	add	w8, w8, #1
	str	w8, [x9]
	b	LBB162_1
LBB162_4:
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #16]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.122@PAGE
	add	x0, x0, l_.str.122@PAGEOFF
	bl	_printf
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	d0, [x8, #8]
	ldr	s2, [x8, #292]
                                        ; implicit-def: $d1
	fmov	s1, s2
	sshll.2d	v1, v1, #0
                                        ; kill: def $d1 killed $d1 killed $q1
	scvtf	d1, d1
	fdiv	d0, d0, d1
	mov	x8, sp
	str	d0, [x8]
	adrp	x0, l_.str.123@PAGE
	add	x0, x0, l_.str.123@PAGEOFF
	bl	_printf
	add	x0, sp, #336
	bl	__ZN6logger7end_logEv
	mov	w0, #0
	add	sp, sp, #640
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL10grad_checkI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE6tensorIfLi64ELi1ELi8ELi8EES2_IfLi64ELi1ELi4ELi4EE15MaxPooling2DCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
__ZL10grad_checkI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE6tensorIfLi64ELi1ELi8ELi8EES2_IfLi64ELi1ELi4ELi4EE15MaxPooling2DCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i: ; @_ZL10grad_checkI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE6tensorIfLi64ELi1ELi8ELi8EES2_IfLi64ELi1ELi4ELi4EE15MaxPooling2DCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
Lfunc_begin2:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception2
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	.cfi_remember_state
	sub	sp, sp, #496
	str	x0, [sp, #144]                  ; 8-byte Folded Spill
	stur	x1, [x29, #-32]
	stur	x2, [x29, #-40]
	stur	w3, [x29, #-44]
	mov	x0, #28816
	str	x0, [sp, #152]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #152]                  ; 8-byte Folded Reload
	str	x0, [sp, #160]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #160]                  ; 8-byte Folded Reload
Ltmp45:
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC1Ev
Ltmp46:
	b	LBB163_1
LBB163_1:
	ldr	x1, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #160]                  ; 8-byte Folded Reload
	stur	x8, [x29, #-56]
	ldur	x8, [x29, #-56]
	str	x8, [sp, #56]                   ; 8-byte Folded Spill
	sub	x0, x29, #192
	str	x0, [sp, #64]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #56]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #64]                   ; 8-byte Folded Reload
	ldur	x2, [x29, #-32]
	ldur	x3, [x29, #-40]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg
	mov	x0, #16388
	str	x0, [sp, #104]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #72]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	stur	x0, [x29, #-208]
	ldur	x0, [x29, #-208]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	fmov	s0, #-1.00000000
	str	s0, [sp, #96]                   ; 4-byte Folded Spill
	fmov	s1, #1.00000000
	str	s1, [sp, #100]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EE12init_uniformEiR9rnd_gen_tff
	mov	x0, #4100
	str	x0, [sp, #80]                   ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #80]                   ; 8-byte Folded Reload
	str	x0, [sp, #88]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #88]                   ; 8-byte Folded Reload
	ldr	s0, [sp, #96]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #100]                  ; 4-byte Folded Reload
	stur	x0, [x29, #-216]
	ldur	x0, [x29, #-216]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EE12init_uniformEiR9rnd_gen_tff
	ldr	x0, [sp, #104]                  ; 8-byte Folded Reload
	mov	w8, #4719
	movk	w8, #14979, lsl #16
	fmov	s0, w8
	stur	s0, [x29, #-220]
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #112]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #112]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-232]
	ldur	x0, [x29, #-232]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	ldur	s0, [x29, #-220]
	fneg	s0, s0
	ldur	s1, [x29, #-220]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi1ELi8ELi8EEEPT_S3_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-240]
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi1ELi8ELi8EEEPT_S3_i
	stur	x0, [x29, #-248]
	ldur	x0, [x29, #-240]
	ldur	x1, [x29, #-232]
	fmov	s0, #-0.50000000
	str	s0, [sp, #124]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EE4add_EfRS0_
	ldur	x0, [x29, #-248]
	ldur	x1, [x29, #-232]
	fmov	s0, #0.50000000
	str	s0, [sp, #128]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EE4add_EfRS0_
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEPT_S3_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #256]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEPT_S3_i
	str	x0, [sp, #248]
	ldr	x0, [sp, #256]
	ldur	x1, [x29, #-40]
	ldur	s0, [x29, #-220]
	fneg	s0, s0
	ldur	s1, [x29, #-220]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9rand_gradER9rnd_gen_tff
	ldr	x0, [sp, #248]
	ldr	x1, [sp, #256]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9copy_gradERS0_
	ldr	s0, [sp, #124]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #256]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8add_gradEf
	ldr	s0, [sp, #128]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #248]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8add_gradEf
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-216]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	ldur	x0, [x29, #-56]
	ldur	x1, [x29, #-208]
	mov	w2, #1
	str	w2, [sp, #132]                  ; 4-byte Folded Spill
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi
	str	x0, [sp, #240]
	ldur	x0, [x29, #-56]
	ldur	x1, [x29, #-216]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE
	ldr	w2, [sp, #132]                  ; 4-byte Folded Reload
	str	x0, [sp, #232]
	ldr	x0, [sp, #256]
	ldur	x1, [x29, #-240]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi
	ldr	w2, [sp, #132]                  ; 4-byte Folded Reload
	str	x0, [sp, #224]
	ldr	x0, [sp, #248]
	ldur	x1, [x29, #-248]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #216]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #224]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EE3dotERS0_
	str	d0, [sp, #208]
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #240]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EE3dotERS0_
	str	d0, [sp, #200]
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #216]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EE3dotERS0_
	str	d0, [sp, #192]
	ldr	x0, [sp, #232]
	ldur	x1, [x29, #-232]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EE3dotERS0_
	str	d0, [sp, #184]
	ldur	x0, [x29, #-56]
	ldr	x1, [sp, #256]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13grad_dot_gradERS0_
	str	d0, [sp, #176]
	ldr	d0, [sp, #184]
	ldr	d1, [sp, #176]
	ldr	d2, [sp, #208]
	ldr	d3, [sp, #200]
	ldr	d4, [sp, #192]
	bl	__ZL10show_errorddddd
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [sp, #168]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-216]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-232]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	ldur	x8, [x29, #-56]
	str	x8, [sp, #136]                  ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB163_3
	b	LBB163_2
LBB163_2:
	ldr	x0, [sp, #136]                  ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB163_3
LBB163_3:
	ldr	x8, [sp, #256]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB163_5
	b	LBB163_4
LBB163_4:
	ldr	x0, [sp, #48]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB163_5
LBB163_5:
	ldr	x8, [sp, #248]
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB163_7
	b	LBB163_6
LBB163_6:
	ldr	x0, [sp, #40]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB163_7
LBB163_7:
	ldur	x8, [x29, #-216]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB163_9
	b	LBB163_8
LBB163_8:
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB163_9
LBB163_9:
	ldur	x8, [x29, #-208]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB163_11
	b	LBB163_10
LBB163_10:
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB163_11
LBB163_11:
	ldur	x8, [x29, #-232]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB163_13
	b	LBB163_12
LBB163_12:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB163_13
LBB163_13:
	ldur	x8, [x29, #-240]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB163_15
	b	LBB163_14
LBB163_14:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB163_15
LBB163_15:
	ldur	x8, [x29, #-248]
	str	x8, [sp]                        ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB163_17
	b	LBB163_16
LBB163_16:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB163_17
LBB163_17:
	ldr	d0, [sp, #168]
	add	sp, sp, #496
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
LBB163_18:
	.cfi_restore_state
Ltmp47:
	mov	x9, x0
	ldr	x0, [sp, #160]                  ; 8-byte Folded Reload
	mov	x8, x1
	stur	x9, [x29, #-64]
	stur	w8, [x29, #-68]
	bl	__ZdlPv
	b	LBB163_19
LBB163_19:
	ldur	x0, [x29, #-64]
	bl	__Unwind_Resume
Lfunc_end2:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table163:
Lexception2:
	.byte	255                             ; @LPStart Encoding = omit
	.byte	255                             ; @TType Encoding = omit
	.byte	1                               ; Call site Encoding = uleb128
	.uleb128 Lcst_end2-Lcst_begin2
Lcst_begin2:
	.uleb128 Lfunc_begin2-Lfunc_begin2      ; >> Call Site 1 <<
	.uleb128 Ltmp45-Lfunc_begin2            ;   Call between Lfunc_begin2 and Ltmp45
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp45-Lfunc_begin2            ; >> Call Site 2 <<
	.uleb128 Ltmp46-Ltmp45                  ;   Call between Ltmp45 and Ltmp46
	.uleb128 Ltmp47-Lfunc_begin2            ;     jumps to Ltmp47
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp46-Lfunc_begin2            ; >> Call Site 3 <<
	.uleb128 Lfunc_end2-Ltmp46              ;   Call between Ltmp46 and Lfunc_end2
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
Lcst_end2:
	.p2align	2
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC1Ev ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC1Ev
	.weak_def_can_be_hidden	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC1Ev
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC1Ev: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	str	x2, [sp, #24]
	str	x3, [sp, #16]
	ldur	x0, [x29, #-16]
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [sp, #24]
	str	x8, [x9, #120]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi8ELi8EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi64ELi1ELi8ELi8EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi64ELi1ELi8ELi8EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi64ELi1ELi8ELi8EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi64ELi1ELi8ELi8EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB166_1
LBB166_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB166_3 Depth 2
                                        ;       Child Loop BB166_5 Depth 3
                                        ;         Child Loop BB166_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB166_16
	b	LBB166_2
LBB166_2:                               ;   in Loop: Header=BB166_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB166_3
LBB166_3:                               ;   Parent Loop BB166_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB166_5 Depth 3
                                        ;         Child Loop BB166_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB166_14
	b	LBB166_4
LBB166_4:                               ;   in Loop: Header=BB166_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB166_5
LBB166_5:                               ;   Parent Loop BB166_1 Depth=1
                                        ;     Parent Loop BB166_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB166_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #8
	cset	w8, ge
	tbnz	w8, #0, LBB166_12
	b	LBB166_6
LBB166_6:                               ;   in Loop: Header=BB166_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB166_7
LBB166_7:                               ;   Parent Loop BB166_1 Depth=1
                                        ;     Parent Loop BB166_3 Depth=2
                                        ;       Parent Loop BB166_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #8
	cset	w8, ge
	tbnz	w8, #0, LBB166_10
	b	LBB166_8
LBB166_8:                               ;   in Loop: Header=BB166_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB166_9
LBB166_9:                               ;   in Loop: Header=BB166_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB166_7
LBB166_10:                              ;   in Loop: Header=BB166_5 Depth=3
	b	LBB166_11
LBB166_11:                              ;   in Loop: Header=BB166_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB166_5
LBB166_12:                              ;   in Loop: Header=BB166_3 Depth=2
	b	LBB166_13
LBB166_13:                              ;   in Loop: Header=BB166_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB166_3
LBB166_14:                              ;   in Loop: Header=BB166_1 Depth=1
	b	LBB166_15
LBB166_15:                              ;   in Loop: Header=BB166_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB166_1
LBB166_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi4ELi4EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi64ELi1ELi4ELi4EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi64ELi1ELi4ELi4EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi64ELi1ELi4ELi4EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi64ELi1ELi4ELi4EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB167_1
LBB167_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB167_3 Depth 2
                                        ;       Child Loop BB167_5 Depth 3
                                        ;         Child Loop BB167_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB167_16
	b	LBB167_2
LBB167_2:                               ;   in Loop: Header=BB167_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB167_3
LBB167_3:                               ;   Parent Loop BB167_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB167_5 Depth 3
                                        ;         Child Loop BB167_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB167_14
	b	LBB167_4
LBB167_4:                               ;   in Loop: Header=BB167_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB167_5
LBB167_5:                               ;   Parent Loop BB167_1 Depth=1
                                        ;     Parent Loop BB167_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB167_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #4
	cset	w8, ge
	tbnz	w8, #0, LBB167_12
	b	LBB167_6
LBB167_6:                               ;   in Loop: Header=BB167_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB167_7
LBB167_7:                               ;   Parent Loop BB167_1 Depth=1
                                        ;     Parent Loop BB167_3 Depth=2
                                        ;       Parent Loop BB167_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #4
	cset	w8, ge
	tbnz	w8, #0, LBB167_10
	b	LBB167_8
LBB167_8:                               ;   in Loop: Header=BB167_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB167_9
LBB167_9:                               ;   in Loop: Header=BB167_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB167_7
LBB167_10:                              ;   in Loop: Header=BB167_5 Depth=3
	b	LBB167_11
LBB167_11:                              ;   in Loop: Header=BB167_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB167_5
LBB167_12:                              ;   in Loop: Header=BB167_3 Depth=2
	b	LBB167_13
LBB167_13:                              ;   in Loop: Header=BB167_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB167_3
LBB167_14:                              ;   in Loop: Header=BB167_1 Depth=1
	b	LBB167_15
LBB167_15:                              ;   in Loop: Header=BB167_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB167_1
LBB167_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI6tensorIfLi64ELi1ELi8ELi8EEEPT_S3_i ; -- Begin function _Z9make_copyI6tensorIfLi64ELi1ELi8ELi8EEEPT_S3_i
	.weak_definition	__Z9make_copyI6tensorIfLi64ELi1ELi8ELi8EEEPT_S3_i
	.p2align	2
__Z9make_copyI6tensorIfLi64ELi1ELi8ELi8EEEPT_S3_i: ; @_Z9make_copyI6tensorIfLi64ELi1ELi8ELi8EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #16388
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi8ELi8EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi8ELi8EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi8ELi8EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi8ELi8EE4add_EfRS0_: ; @_ZN6tensorIfLi64ELi1ELi8ELi8EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB169_2
	b	LBB169_1
LBB169_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB169_2:
	b	LBB169_3
LBB169_3:
	str	wzr, [sp, #28]
	b	LBB169_4
LBB169_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB169_6 Depth 2
                                        ;       Child Loop BB169_8 Depth 3
                                        ;         Child Loop BB169_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB169_19
	b	LBB169_5
LBB169_5:                               ;   in Loop: Header=BB169_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB169_6
LBB169_6:                               ;   Parent Loop BB169_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB169_8 Depth 3
                                        ;         Child Loop BB169_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB169_17
	b	LBB169_7
LBB169_7:                               ;   in Loop: Header=BB169_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB169_8
LBB169_8:                               ;   Parent Loop BB169_4 Depth=1
                                        ;     Parent Loop BB169_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB169_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #8
	cset	w8, ge
	tbnz	w8, #0, LBB169_15
	b	LBB169_9
LBB169_9:                               ;   in Loop: Header=BB169_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB169_10
LBB169_10:                              ;   Parent Loop BB169_4 Depth=1
                                        ;     Parent Loop BB169_6 Depth=2
                                        ;       Parent Loop BB169_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #8
	cset	w8, ge
	tbnz	w8, #0, LBB169_13
	b	LBB169_11
LBB169_11:                              ;   in Loop: Header=BB169_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB169_12
LBB169_12:                              ;   in Loop: Header=BB169_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB169_10
LBB169_13:                              ;   in Loop: Header=BB169_8 Depth=3
	b	LBB169_14
LBB169_14:                              ;   in Loop: Header=BB169_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB169_8
LBB169_15:                              ;   in Loop: Header=BB169_6 Depth=2
	b	LBB169_16
LBB169_16:                              ;   in Loop: Header=BB169_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB169_6
LBB169_17:                              ;   in Loop: Header=BB169_4 Depth=1
	b	LBB169_18
LBB169_18:                              ;   in Loop: Header=BB169_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB169_4
LBB169_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEPT_S3_i ; -- Begin function _Z9make_copyI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEPT_S3_i
	.weak_definition	__Z9make_copyI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEPT_S3_i
	.p2align	2
__Z9make_copyI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEPT_S3_i: ; @_Z9make_copyI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #28816
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9rand_gradER9rnd_gen_tff ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9rand_gradER9rnd_gen_tff
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9rand_gradER9rnd_gen_tff
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9rand_gradER9rnd_gen_tff: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9rand_gradER9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	x1, [sp, #16]
	str	s0, [sp, #12]
	str	s1, [sp, #8]
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9copy_gradERS0_ ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9copy_gradERS0_
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9copy_gradERS0_
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9copy_gradERS0_: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE9copy_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	x1, [sp]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8add_gradEf ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8add_gradEf
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8add_gradEf
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8add_gradEf: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8add_gradEf
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	s0, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i ; -- Begin function _Z6to_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i
	.weak_definition	__Z6to_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i
	.p2align	2
__Z6to_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i: ; @_Z6to_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i ; -- Begin function _Z6to_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	.weak_definition	__Z6to_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	.p2align	2
__Z6to_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i: ; @_Z6to_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i ; -- Begin function _Z6to_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	.weak_definition	__Z6to_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	.p2align	2
__Z6to_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i: ; @_Z6to_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB177_2
	b	LBB177_1
LBB177_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB177_3
	b	LBB177_4
LBB177_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE16forward_cpu_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	b	LBB177_8
LBB177_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17forward_cuda_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	b	LBB177_8
LBB177_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB177_6
	b	LBB177_5
LBB177_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17forward_cuda_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	b	LBB177_7
LBB177_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE16forward_cpu_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	b	LBB177_7
LBB177_7:
	b	LBB177_8
LBB177_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #128
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB178_2
	b	LBB178_1
LBB178_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB178_3
	b	LBB178_4
LBB178_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17backward_cpu_baseER6tensorIfLi64ELi1ELi4ELi4EE
	b	LBB178_8
LBB178_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE18backward_cuda_baseER6tensorIfLi64ELi1ELi4ELi4EE
	b	LBB178_8
LBB178_4:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB178_6
	b	LBB178_5
LBB178_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE18backward_cuda_baseER6tensorIfLi64ELi1ELi4ELi4EE
	b	LBB178_7
LBB178_6:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17backward_cpu_baseER6tensorIfLi64ELi1ELi4ELi4EE
	b	LBB178_7
LBB178_7:
	b	LBB178_8
LBB178_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #12428
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7to_hostI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i ; -- Begin function _Z7to_hostI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	.weak_definition	__Z7to_hostI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	.p2align	2
__Z7to_hostI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i: ; @_Z7to_hostI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi4ELi4EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi4ELi4EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi4ELi4EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi4ELi4EE3dotERS0_: ; @_ZN6tensorIfLi64ELi1ELi4ELi4EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB180_2
	b	LBB180_1
LBB180_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB180_2:
	b	LBB180_3
LBB180_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB180_4
LBB180_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB180_6 Depth 2
                                        ;       Child Loop BB180_8 Depth 3
                                        ;         Child Loop BB180_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB180_19
	b	LBB180_5
LBB180_5:                               ;   in Loop: Header=BB180_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB180_6
LBB180_6:                               ;   Parent Loop BB180_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB180_8 Depth 3
                                        ;         Child Loop BB180_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB180_17
	b	LBB180_7
LBB180_7:                               ;   in Loop: Header=BB180_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB180_8
LBB180_8:                               ;   Parent Loop BB180_4 Depth=1
                                        ;     Parent Loop BB180_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB180_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #4
	cset	w8, ge
	tbnz	w8, #0, LBB180_15
	b	LBB180_9
LBB180_9:                               ;   in Loop: Header=BB180_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB180_10
LBB180_10:                              ;   Parent Loop BB180_4 Depth=1
                                        ;     Parent Loop BB180_6 Depth=2
                                        ;       Parent Loop BB180_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #4
	cset	w8, ge
	tbnz	w8, #0, LBB180_13
	b	LBB180_11
LBB180_11:                              ;   in Loop: Header=BB180_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB180_12
LBB180_12:                              ;   in Loop: Header=BB180_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB180_10
LBB180_13:                              ;   in Loop: Header=BB180_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB180_14
LBB180_14:                              ;   in Loop: Header=BB180_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB180_8
LBB180_15:                              ;   in Loop: Header=BB180_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB180_16
LBB180_16:                              ;   in Loop: Header=BB180_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB180_6
LBB180_17:                              ;   in Loop: Header=BB180_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB180_18
LBB180_18:                              ;   in Loop: Header=BB180_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB180_4
LBB180_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi8ELi8EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi8ELi8EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi8ELi8EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi8ELi8EE3dotERS0_: ; @_ZN6tensorIfLi64ELi1ELi8ELi8EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB181_2
	b	LBB181_1
LBB181_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB181_2:
	b	LBB181_3
LBB181_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB181_4
LBB181_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB181_6 Depth 2
                                        ;       Child Loop BB181_8 Depth 3
                                        ;         Child Loop BB181_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB181_19
	b	LBB181_5
LBB181_5:                               ;   in Loop: Header=BB181_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB181_6
LBB181_6:                               ;   Parent Loop BB181_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB181_8 Depth 3
                                        ;         Child Loop BB181_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB181_17
	b	LBB181_7
LBB181_7:                               ;   in Loop: Header=BB181_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB181_8
LBB181_8:                               ;   Parent Loop BB181_4 Depth=1
                                        ;     Parent Loop BB181_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB181_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #8
	cset	w8, ge
	tbnz	w8, #0, LBB181_15
	b	LBB181_9
LBB181_9:                               ;   in Loop: Header=BB181_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB181_10
LBB181_10:                              ;   Parent Loop BB181_4 Depth=1
                                        ;     Parent Loop BB181_6 Depth=2
                                        ;       Parent Loop BB181_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #8
	cset	w8, ge
	tbnz	w8, #0, LBB181_13
	b	LBB181_11
LBB181_11:                              ;   in Loop: Header=BB181_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB181_12
LBB181_12:                              ;   in Loop: Header=BB181_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB181_10
LBB181_13:                              ;   in Loop: Header=BB181_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB181_14
LBB181_14:                              ;   in Loop: Header=BB181_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB181_8
LBB181_15:                              ;   in Loop: Header=BB181_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB181_16
LBB181_16:                              ;   in Loop: Header=BB181_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB181_6
LBB181_17:                              ;   in Loop: Header=BB181_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB181_18
LBB181_18:                              ;   in Loop: Header=BB181_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB181_4
LBB181_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13grad_dot_gradERS0_ ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13grad_dot_gradERS0_
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13grad_dot_gradERS0_
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13grad_dot_gradERS0_: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13grad_dot_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	x1, [sp]
	movi	d0, #0000000000000000
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i ; -- Begin function _Z7del_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	.weak_definition	__Z7del_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	.p2align	2
__Z7del_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i: ; @_Z7del_devI12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i ; -- Begin function _Z7del_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i
	.weak_definition	__Z7del_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i
	.p2align	2
__Z7del_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i: ; @_Z7del_devI6tensorIfLi64ELi1ELi4ELi4EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i ; -- Begin function _Z7del_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	.weak_definition	__Z7del_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	.p2align	2
__Z7del_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i: ; @_Z7del_devI6tensorIfLi64ELi1ELi8ELi8EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC2Ev ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC2Ev
	.weak_def_can_be_hidden	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC2Ev
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC2Ev: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi8ELi8EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi1ELi8ELi8EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi1ELi8ELi8EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi1ELi8ELi8EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi1ELi8ELi8EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB187_2
	b	LBB187_1
LBB187_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB187_2:
	b	LBB187_3
LBB187_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii: ; @_ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #8
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #8
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #5
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi4ELi4EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi1ELi4ELi4EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi1ELi4ELi4EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi1ELi4ELi4EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi1ELi4ELi4EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB189_2
	b	LBB189_1
LBB189_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB189_2:
	b	LBB189_3
LBB189_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi4ELi4EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi1ELi4ELi4EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi1ELi4ELi4EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi1ELi4ELi4EEclEiiii: ; @_ZN6tensorIfLi64ELi1ELi4ELi4EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #6
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #6
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #4
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE16forward_cpu_baseER6tensorIfLi64ELi1ELi8ELi8EEi ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE16forward_cpu_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE16forward_cpu_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE16forward_cpu_baseER6tensorIfLi64ELi1ELi8ELi8EEi: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE16forward_cpu_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE12forward_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17forward_cuda_baseER6tensorIfLi64ELi1ELi8ELi8EEi ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17forward_cuda_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17forward_cuda_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17forward_cuda_baseER6tensorIfLi64ELi1ELi8ELi8EEi: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17forward_cuda_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.140@PAGE
	add	x0, x0, l_.str.140@PAGEOFF
	mov	w1, #153
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE12forward_baseER6tensorIfLi64ELi1ELi8ELi8EEi ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE12forward_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE12forward_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE12forward_baseER6tensorIfLi64ELi1ELi8ELi8EEi: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE12forward_baseER6tensorIfLi64ELi1ELi8ELi8EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #96]             ; 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	add	x0, x8, #128
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #4228
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIiLi64ELi1ELi4ELi4EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #8328
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIiLi64ELi1ELi4ELi4EE6set_n0Ei
	stur	wzr, [x29, #-28]
	b	LBB193_1
LBB193_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB193_3 Depth 2
                                        ;       Child Loop BB193_5 Depth 3
                                        ;         Child Loop BB193_7 Depth 4
                                        ;           Child Loop BB193_9 Depth 5
                                        ;             Child Loop BB193_11 Depth 6
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB193_26
	b	LBB193_2
LBB193_2:                               ;   in Loop: Header=BB193_1 Depth=1
	stur	wzr, [x29, #-32]
	b	LBB193_3
LBB193_3:                               ;   Parent Loop BB193_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB193_5 Depth 3
                                        ;         Child Loop BB193_7 Depth 4
                                        ;           Child Loop BB193_9 Depth 5
                                        ;             Child Loop BB193_11 Depth 6
	ldur	w8, [x29, #-32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB193_24
	b	LBB193_4
LBB193_4:                               ;   in Loop: Header=BB193_3 Depth=2
	stur	wzr, [x29, #-36]
	b	LBB193_5
LBB193_5:                               ;   Parent Loop BB193_1 Depth=1
                                        ;     Parent Loop BB193_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB193_7 Depth 4
                                        ;           Child Loop BB193_9 Depth 5
                                        ;             Child Loop BB193_11 Depth 6
	ldur	w8, [x29, #-36]
	subs	w8, w8, #4
	cset	w8, ge
	tbnz	w8, #0, LBB193_22
	b	LBB193_6
LBB193_6:                               ;   in Loop: Header=BB193_5 Depth=3
	stur	wzr, [x29, #-40]
	b	LBB193_7
LBB193_7:                               ;   Parent Loop BB193_1 Depth=1
                                        ;     Parent Loop BB193_3 Depth=2
                                        ;       Parent Loop BB193_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB193_9 Depth 5
                                        ;             Child Loop BB193_11 Depth 6
	ldur	w8, [x29, #-40]
	subs	w8, w8, #4
	cset	w8, ge
	tbnz	w8, #0, LBB193_20
	b	LBB193_8
LBB193_8:                               ;   in Loop: Header=BB193_7 Depth=4
	ldur	w9, [x29, #-36]
	mov	w8, #2
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	mul	w9, w8, w9
	stur	w9, [x29, #-44]
	ldur	w9, [x29, #-40]
	mul	w8, w8, w9
	str	w8, [sp, #48]
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-44]
	ldr	w4, [sp, #48]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	ldr	w9, [x0]
	str	w9, [sp, #44]
	ldur	w9, [x29, #-36]
	mul	w8, w8, w9
	str	w8, [sp, #40]
	b	LBB193_9
LBB193_9:                               ;   Parent Loop BB193_1 Depth=1
                                        ;     Parent Loop BB193_3 Depth=2
                                        ;       Parent Loop BB193_5 Depth=3
                                        ;         Parent Loop BB193_7 Depth=4
                                        ; =>        This Loop Header: Depth=5
                                        ;             Child Loop BB193_11 Depth 6
	ldr	w8, [sp, #40]
	ldur	w9, [x29, #-36]
	add	w10, w9, #1
	mov	w9, #2
	mul	w9, w9, w10
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB193_18
	b	LBB193_10
LBB193_10:                              ;   in Loop: Header=BB193_9 Depth=5
	ldur	w9, [x29, #-40]
	mov	w8, #2
	mul	w8, w8, w9
	str	w8, [sp, #36]
	b	LBB193_11
LBB193_11:                              ;   Parent Loop BB193_1 Depth=1
                                        ;     Parent Loop BB193_3 Depth=2
                                        ;       Parent Loop BB193_5 Depth=3
                                        ;         Parent Loop BB193_7 Depth=4
                                        ;           Parent Loop BB193_9 Depth=5
                                        ; =>          This Inner Loop Header: Depth=6
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-40]
	add	w10, w9, #1
	mov	w9, #2
	mul	w9, w9, w10
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB193_16
	b	LBB193_12
LBB193_12:                              ;   in Loop: Header=BB193_11 Depth=6
	ldr	s0, [sp, #44]
	str	s0, [sp, #16]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldr	w3, [sp, #40]
	ldr	w4, [sp, #36]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	ldr	s0, [sp, #16]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fcmp	s0, s1
	cset	w8, pl
	tbnz	w8, #0, LBB193_14
	b	LBB193_13
LBB193_13:                              ;   in Loop: Header=BB193_11 Depth=6
	ldr	w8, [sp, #40]
	stur	w8, [x29, #-44]
	ldr	w8, [sp, #36]
	str	w8, [sp, #48]
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-44]
	ldr	w4, [sp, #48]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	ldr	w8, [x0]
	str	w8, [sp, #44]
	b	LBB193_14
LBB193_14:                              ;   in Loop: Header=BB193_11 Depth=6
	b	LBB193_15
LBB193_15:                              ;   in Loop: Header=BB193_11 Depth=6
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB193_11
LBB193_16:                              ;   in Loop: Header=BB193_9 Depth=5
	b	LBB193_17
LBB193_17:                              ;   in Loop: Header=BB193_9 Depth=5
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB193_9
LBB193_18:                              ;   in Loop: Header=BB193_7 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #44]
	str	w9, [sp, #4]                    ; 4-byte Folded Spill
	add	x0, x8, #128
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-36]
	ldur	w4, [x29, #-40]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EEclEiiii
	ldr	w9, [sp, #4]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	str	w9, [x0]
	ldur	w9, [x29, #-44]
	str	w9, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #4228
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-36]
	ldur	w4, [x29, #-40]
	bl	__ZN6tensorIiLi64ELi1ELi4ELi4EEclEiiii
	ldr	w9, [sp, #8]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	str	w9, [x0]
	ldr	w9, [sp, #48]
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #8328
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-36]
	ldur	w4, [x29, #-40]
	bl	__ZN6tensorIiLi64ELi1ELi4ELi4EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB193_19
LBB193_19:                              ;   in Loop: Header=BB193_7 Depth=4
	ldur	w8, [x29, #-40]
	add	w8, w8, #1
	stur	w8, [x29, #-40]
	b	LBB193_7
LBB193_20:                              ;   in Loop: Header=BB193_5 Depth=3
	b	LBB193_21
LBB193_21:                              ;   in Loop: Header=BB193_5 Depth=3
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB193_5
LBB193_22:                              ;   in Loop: Header=BB193_3 Depth=2
	b	LBB193_23
LBB193_23:                              ;   in Loop: Header=BB193_3 Depth=2
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB193_3
LBB193_24:                              ;   in Loop: Header=BB193_1 Depth=1
	b	LBB193_25
LBB193_25:                              ;   in Loop: Header=BB193_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB193_1
LBB193_26:
	.cfi_def_cfa wsp, 112
	ldp	x29, x30, [sp, #96]             ; 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIiLi64ELi1ELi4ELi4EE6set_n0Ei ; -- Begin function _ZN6tensorIiLi64ELi1ELi4ELi4EE6set_n0Ei
	.weak_definition	__ZN6tensorIiLi64ELi1ELi4ELi4EE6set_n0Ei
	.p2align	2
__ZN6tensorIiLi64ELi1ELi4ELi4EE6set_n0Ei: ; @_ZN6tensorIiLi64ELi1ELi4ELi4EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB194_2
	b	LBB194_1
LBB194_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB194_2:
	b	LBB194_3
LBB194_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIiLi64ELi1ELi4ELi4EEclEiiii ; -- Begin function _ZN6tensorIiLi64ELi1ELi4ELi4EEclEiiii
	.weak_definition	__ZN6tensorIiLi64ELi1ELi4ELi4EEclEiiii
	.p2align	2
__ZN6tensorIiLi64ELi1ELi4ELi4EEclEiiii: ; @_ZN6tensorIiLi64ELi1ELi4ELi4EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #6
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #6
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #4
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17backward_cpu_baseER6tensorIfLi64ELi1ELi4ELi4EE ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17backward_cpu_baseER6tensorIfLi64ELi1ELi4ELi4EE
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17backward_cpu_baseER6tensorIfLi64ELi1ELi4ELi4EE
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17backward_cpu_baseER6tensorIfLi64ELi1ELi4ELi4EE: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE17backward_cpu_baseER6tensorIfLi64ELi1ELi4ELi4EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13backward_baseER6tensorIfLi64ELi1ELi4ELi4EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE18backward_cuda_baseER6tensorIfLi64ELi1ELi4ELi4EE ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE18backward_cuda_baseER6tensorIfLi64ELi1ELi4ELi4EE
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE18backward_cuda_baseER6tensorIfLi64ELi1ELi4ELi4EE
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE18backward_cuda_baseER6tensorIfLi64ELi1ELi4ELi4EE: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE18backward_cuda_baseER6tensorIfLi64ELi1ELi4ELi4EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.140@PAGE
	add	x0, x0, l_.str.140@PAGEOFF
	mov	w1, #266
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13backward_baseER6tensorIfLi64ELi1ELi4ELi4EE ; -- Begin function _ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13backward_baseER6tensorIfLi64ELi1ELi4ELi4EE
	.weak_definition	__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13backward_baseER6tensorIfLi64ELi1ELi4ELi4EE
	.p2align	2
__ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13backward_baseER6tensorIfLi64ELi1ELi4ELi4EE: ; @_ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE13backward_baseER6tensorIfLi64ELi1ELi4ELi4EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #12428
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EE6set_n0Ei
	stur	wzr, [x29, #-24]
	b	LBB198_1
LBB198_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB198_3 Depth 2
                                        ;       Child Loop BB198_5 Depth 3
                                        ;         Child Loop BB198_7 Depth 4
	ldur	w8, [x29, #-24]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB198_16
	b	LBB198_2
LBB198_2:                               ;   in Loop: Header=BB198_1 Depth=1
	stur	wzr, [x29, #-28]
	b	LBB198_3
LBB198_3:                               ;   Parent Loop BB198_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB198_5 Depth 3
                                        ;         Child Loop BB198_7 Depth 4
	ldur	w8, [x29, #-28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB198_14
	b	LBB198_4
LBB198_4:                               ;   in Loop: Header=BB198_3 Depth=2
	stur	wzr, [x29, #-32]
	b	LBB198_5
LBB198_5:                               ;   Parent Loop BB198_1 Depth=1
                                        ;     Parent Loop BB198_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB198_7 Depth 4
	ldur	w8, [x29, #-32]
	subs	w8, w8, #8
	cset	w8, ge
	tbnz	w8, #0, LBB198_12
	b	LBB198_6
LBB198_6:                               ;   in Loop: Header=BB198_5 Depth=3
	stur	wzr, [x29, #-36]
	b	LBB198_7
LBB198_7:                               ;   Parent Loop BB198_1 Depth=1
                                        ;     Parent Loop BB198_3 Depth=2
                                        ;       Parent Loop BB198_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldur	w8, [x29, #-36]
	subs	w8, w8, #8
	cset	w8, ge
	tbnz	w8, #0, LBB198_10
	b	LBB198_8
LBB198_8:                               ;   in Loop: Header=BB198_7 Depth=4
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #12428
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	ldur	w2, [x29, #-28]
	ldur	w3, [x29, #-32]
	ldur	w4, [x29, #-36]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	movi	d0, #0000000000000000
	str	s0, [x0]
	b	LBB198_9
LBB198_9:                               ;   in Loop: Header=BB198_7 Depth=4
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB198_7
LBB198_10:                              ;   in Loop: Header=BB198_5 Depth=3
	b	LBB198_11
LBB198_11:                              ;   in Loop: Header=BB198_5 Depth=3
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB198_5
LBB198_12:                              ;   in Loop: Header=BB198_3 Depth=2
	b	LBB198_13
LBB198_13:                              ;   in Loop: Header=BB198_3 Depth=2
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB198_3
LBB198_14:                              ;   in Loop: Header=BB198_1 Depth=1
	b	LBB198_15
LBB198_15:                              ;   in Loop: Header=BB198_1 Depth=1
	ldur	w8, [x29, #-24]
	add	w8, w8, #1
	stur	w8, [x29, #-24]
	b	LBB198_1
LBB198_16:
	str	wzr, [sp, #40]
	b	LBB198_17
LBB198_17:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB198_19 Depth 2
                                        ;       Child Loop BB198_21 Depth 3
                                        ;         Child Loop BB198_23 Depth 4
	ldr	w8, [sp, #40]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB198_32
	b	LBB198_18
LBB198_18:                              ;   in Loop: Header=BB198_17 Depth=1
	str	wzr, [sp, #36]
	b	LBB198_19
LBB198_19:                              ;   Parent Loop BB198_17 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB198_21 Depth 3
                                        ;         Child Loop BB198_23 Depth 4
	ldr	w8, [sp, #36]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB198_30
	b	LBB198_20
LBB198_20:                              ;   in Loop: Header=BB198_19 Depth=2
	str	wzr, [sp, #32]
	b	LBB198_21
LBB198_21:                              ;   Parent Loop BB198_17 Depth=1
                                        ;     Parent Loop BB198_19 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB198_23 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #4
	cset	w8, ge
	tbnz	w8, #0, LBB198_28
	b	LBB198_22
LBB198_22:                              ;   in Loop: Header=BB198_21 Depth=3
	str	wzr, [sp, #28]
	b	LBB198_23
LBB198_23:                              ;   Parent Loop BB198_17 Depth=1
                                        ;     Parent Loop BB198_19 Depth=2
                                        ;       Parent Loop BB198_21 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #4
	cset	w8, ge
	tbnz	w8, #0, LBB198_26
	b	LBB198_24
LBB198_24:                              ;   in Loop: Header=BB198_23 Depth=4
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #4228
	add	x0, x8, x9
	ldr	w1, [sp, #40]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #32]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIiLi64ELi1ELi4ELi4EEclEiiii
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w9, [x0]
	str	w9, [sp, #24]
	mov	x9, #8328
	add	x0, x8, x9
	ldr	w1, [sp, #40]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #32]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIiLi64ELi1ELi4ELi4EEclEiiii
	ldr	w8, [x0]
	str	w8, [sp, #20]
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #40]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #32]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi1ELi4ELi4EEclEiiii
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w9, [x0]
	str	w9, [sp, #4]                    ; 4-byte Folded Spill
	mov	x9, #12428
	add	x0, x8, x9
	ldr	w1, [sp, #40]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #24]
	ldr	w4, [sp, #20]
	bl	__ZN6tensorIfLi64ELi1ELi8ELi8EEclEiiii
	ldr	w8, [sp, #4]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB198_25
LBB198_25:                              ;   in Loop: Header=BB198_23 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB198_23
LBB198_26:                              ;   in Loop: Header=BB198_21 Depth=3
	b	LBB198_27
LBB198_27:                              ;   in Loop: Header=BB198_21 Depth=3
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB198_21
LBB198_28:                              ;   in Loop: Header=BB198_19 Depth=2
	b	LBB198_29
LBB198_29:                              ;   in Loop: Header=BB198_19 Depth=2
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB198_19
LBB198_30:                              ;   in Loop: Header=BB198_17 Depth=1
	b	LBB198_31
LBB198_31:                              ;   in Loop: Header=BB198_17 Depth=1
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB198_17
LBB198_32:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z12dropout_mainiPPc           ; -- Begin function _Z12dropout_mainiPPc
	.p2align	2
__Z12dropout_mainiPPc:                  ; @_Z12dropout_mainiPPc
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #656
	stur	w0, [x29, #-20]
	stur	x1, [x29, #-32]
	ldur	w0, [x29, #-20]
	ldur	x1, [x29, #-32]
	sub	x8, x29, #152
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	bl	__ZL10parse_argsiPPc
	mov	w0, #64
	stur	w0, [x29, #-156]
	ldur	w1, [x29, #-120]
	bl	__ZL5min_iii
	stur	w0, [x29, #-160]
	mov	w8, #2
	stur	w8, [x29, #-164]
	mov	w8, #16
	stur	w8, [x29, #-168]
	stur	w8, [x29, #-172]
	ldur	x8, [x29, #-128]
                                        ; kill: def $w8 killed $w8 killed $x8
	stur	w8, [x29, #-176]
	add	x0, sp, #360
	str	x0, [sp, #32]                   ; 8-byte Folded Spill
	bl	__ZN6loggerC1Ev
	ldr	x1, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, sp, #240
	str	x0, [sp, #40]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #40]                   ; 8-byte Folded Reload
	bl	__ZN6logger9start_logE11cmdline_opt
	ldur	x1, [x29, #-96]
	add	x0, sp, #232
	bl	__ZN9rnd_gen_t4seedEy
	movi	d0, #0000000000000000
	str	d0, [sp, #224]
	str	d0, [sp, #216]
	fmov	s0, #0.50000000
	str	s0, [sp, #200]
	ldur	x8, [x29, #-88]
	str	x8, [sp, #208]
	str	wzr, [sp, #196]
	b	LBB199_1
LBB199_1:                               ; =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #196]
	ldur	w9, [x29, #-176]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB199_4
	b	LBB199_2
LBB199_2:                               ;   in Loop: Header=BB199_1 Depth=1
	ldr	w9, [sp, #196]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.121@PAGE
	add	x0, x0, l_.str.121@PAGEOFF
	bl	_printf
	add	x0, sp, #64
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	sub	x1, x29, #152
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldur	q0, [sp, #200]
	str	q0, [sp, #48]
	ldur	w5, [x29, #-160]
	ldr	x3, [sp, #48]
	ldr	x4, [sp, #56]
	add	x1, sp, #360
	add	x2, sp, #232
	bl	__ZL10grad_checkI7DropoutILi64ELi2ELi16ELi16EE6tensorIfLi64ELi2ELi16ELi16EES3_10DropoutCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
	str	d0, [sp, #184]
	ldr	d0, [sp, #224]
	fcvt	s0, d0
	ldr	d1, [sp, #184]
	fcvt	s1, d1
	bl	__ZL5max_rff
	fcvt	d0, s0
	str	d0, [sp, #224]
	ldr	d1, [sp, #184]
	ldr	d0, [sp, #216]
	fadd	d0, d0, d1
	str	d0, [sp, #216]
	b	LBB199_3
LBB199_3:                               ;   in Loop: Header=BB199_1 Depth=1
	ldr	w8, [sp, #196]
	add	w8, w8, #1
	str	w8, [sp, #196]
	b	LBB199_1
LBB199_4:
	ldr	x8, [sp, #224]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.122@PAGE
	add	x0, x0, l_.str.122@PAGEOFF
	bl	_printf
	ldr	d0, [sp, #216]
	ldur	s2, [x29, #-176]
                                        ; implicit-def: $d1
	fmov	s1, s2
	sshll.2d	v1, v1, #0
                                        ; kill: def $d1 killed $d1 killed $q1
	scvtf	d1, d1
	fdiv	d0, d0, d1
	mov	x8, sp
	str	d0, [x8]
	adrp	x0, l_.str.123@PAGE
	add	x0, x0, l_.str.123@PAGEOFF
	bl	_printf
	add	x0, sp, #360
	bl	__ZN6logger7end_logEv
	mov	w0, #0
	add	sp, sp, #656
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL10grad_checkI7DropoutILi64ELi2ELi16ELi16EE6tensorIfLi64ELi2ELi16ELi16EES3_10DropoutCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
__ZL10grad_checkI7DropoutILi64ELi2ELi16ELi16EE6tensorIfLi64ELi2ELi16ELi16EES3_10DropoutCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i: ; @_ZL10grad_checkI7DropoutILi64ELi2ELi16ELi16EE6tensorIfLi64ELi2ELi16ELi16EES3_10DropoutCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
Lfunc_begin3:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception3
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	.cfi_remember_state
	sub	sp, sp, #512
	str	x0, [sp, #136]                  ; 8-byte Folded Spill
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-24]
	stur	x1, [x29, #-40]
	stur	x2, [x29, #-48]
	stur	w5, [x29, #-52]
	mov	x0, #160
	movk	x0, #4, lsl #16
	str	x0, [sp, #144]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #152]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #152]                  ; 8-byte Folded Reload
Ltmp62:
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EEC1Ev
Ltmp63:
	b	LBB200_1
LBB200_1:
	ldr	x1, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #152]                  ; 8-byte Folded Reload
	stur	x8, [x29, #-64]
	ldur	x8, [x29, #-64]
	str	x8, [sp, #56]                   ; 8-byte Folded Spill
	sub	x0, x29, #200
	str	x0, [sp, #64]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #56]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #64]                   ; 8-byte Folded Reload
	ldur	x2, [x29, #-40]
	ldur	x3, [x29, #-48]
	ldur	q0, [x29, #-32]
	stur	q0, [x29, #-224]
	ldur	x4, [x29, #-224]
	ldur	x5, [x29, #-216]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	mov	x0, #4
	movk	x0, #2, lsl #16
	str	x0, [sp, #96]                   ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #96]                   ; 8-byte Folded Reload
	str	x0, [sp, #72]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	stur	x0, [x29, #-232]
	ldur	x0, [x29, #-232]
	ldur	w1, [x29, #-52]
	ldur	x2, [x29, #-48]
	fmov	s0, #-1.00000000
	str	s0, [sp, #88]                   ; 4-byte Folded Spill
	fmov	s1, #1.00000000
	str	s1, [sp, #92]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff
	ldr	x0, [sp, #96]                   ; 8-byte Folded Reload
	bl	__Znwm
	ldr	x1, [sp, #96]                   ; 8-byte Folded Reload
	str	x0, [sp, #80]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #80]                   ; 8-byte Folded Reload
	ldr	s0, [sp, #88]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #92]                   ; 4-byte Folded Reload
	stur	x0, [x29, #-240]
	ldur	x0, [x29, #-240]
	ldur	w1, [x29, #-52]
	ldur	x2, [x29, #-48]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff
	ldr	x0, [sp, #96]                   ; 8-byte Folded Reload
	mov	w8, #4719
	movk	w8, #14979, lsl #16
	fmov	s0, w8
	stur	s0, [x29, #-244]
	bl	__Znwm
	ldr	x1, [sp, #96]                   ; 8-byte Folded Reload
	str	x0, [sp, #104]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #104]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-256]
	ldur	x0, [x29, #-256]
	ldur	w1, [x29, #-52]
	ldur	x2, [x29, #-48]
	ldur	s0, [x29, #-244]
	fneg	s0, s0
	ldur	s1, [x29, #-244]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-232]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi2ELi16ELi16EEEPT_S3_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	str	x0, [sp, #264]
	ldur	x0, [x29, #-232]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi2ELi16ELi16EEEPT_S3_i
	str	x0, [sp, #256]
	ldr	x0, [sp, #264]
	ldur	x1, [x29, #-256]
	fmov	s0, #-0.50000000
	str	s0, [sp, #116]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE4add_EfRS0_
	ldr	x0, [sp, #256]
	ldur	x1, [x29, #-256]
	fmov	s0, #0.50000000
	str	s0, [sp, #120]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE4add_EfRS0_
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-64]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI7DropoutILi64ELi2ELi16ELi16EEEPT_S3_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	str	x0, [sp, #248]
	ldur	x0, [x29, #-64]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI7DropoutILi64ELi2ELi16ELi16EEEPT_S3_i
	str	x0, [sp, #240]
	ldr	x0, [sp, #248]
	ldur	x1, [x29, #-48]
	ldur	s0, [x29, #-244]
	fneg	s0, s0
	ldur	s1, [x29, #-244]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff
	ldr	x0, [sp, #240]
	ldr	x1, [sp, #248]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE9copy_gradERS0_
	ldr	s0, [sp, #116]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #248]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE8add_gradEf
	ldr	s0, [sp, #120]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #240]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE8add_gradEf
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-232]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #264]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-64]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #240]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	ldur	x0, [x29, #-64]
	ldur	x1, [x29, #-232]
	mov	w2, #1
	str	w2, [sp, #124]                  ; 4-byte Folded Spill
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	str	x0, [sp, #232]
	ldur	x0, [x29, #-64]
	ldur	x1, [x29, #-240]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE
	ldr	w2, [sp, #124]                  ; 4-byte Folded Reload
	str	x0, [sp, #224]
	ldr	x0, [sp, #248]
	ldr	x1, [sp, #264]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	ldr	w2, [sp, #124]                  ; 4-byte Folded Reload
	str	x0, [sp, #216]
	ldr	x0, [sp, #240]
	ldr	x1, [sp, #256]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	str	x0, [sp, #208]
	ldur	x0, [x29, #-64]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #240]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	ldur	x0, [x29, #-240]
	ldr	x1, [sp, #216]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	str	d0, [sp, #200]
	ldur	x0, [x29, #-240]
	ldr	x1, [sp, #232]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	str	d0, [sp, #192]
	ldur	x0, [x29, #-240]
	ldr	x1, [sp, #208]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	str	d0, [sp, #184]
	ldr	x0, [sp, #224]
	ldur	x1, [x29, #-256]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE3dotERS0_
	str	d0, [sp, #176]
	ldur	x0, [x29, #-64]
	ldr	x1, [sp, #248]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_
	str	d0, [sp, #168]
	ldr	d0, [sp, #176]
	ldr	d1, [sp, #168]
	ldr	d2, [sp, #200]
	ldr	d3, [sp, #192]
	ldr	d4, [sp, #184]
	bl	__ZL10show_errorddddd
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [sp, #160]
	ldur	x0, [x29, #-64]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #240]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-232]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-256]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #264]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldr	x8, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi2ELi16ELi16EEEvPT_i
	ldur	x8, [x29, #-64]
	str	x8, [sp, #128]                  ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB200_3
	b	LBB200_2
LBB200_2:
	ldr	x0, [sp, #128]                  ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB200_3
LBB200_3:
	ldr	x8, [sp, #248]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB200_5
	b	LBB200_4
LBB200_4:
	ldr	x0, [sp, #48]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB200_5
LBB200_5:
	ldr	x8, [sp, #240]
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB200_7
	b	LBB200_6
LBB200_6:
	ldr	x0, [sp, #40]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB200_7
LBB200_7:
	ldur	x8, [x29, #-240]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB200_9
	b	LBB200_8
LBB200_8:
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB200_9
LBB200_9:
	ldur	x8, [x29, #-232]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB200_11
	b	LBB200_10
LBB200_10:
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB200_11
LBB200_11:
	ldur	x8, [x29, #-256]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB200_13
	b	LBB200_12
LBB200_12:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB200_13
LBB200_13:
	ldr	x8, [sp, #264]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB200_15
	b	LBB200_14
LBB200_14:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB200_15
LBB200_15:
	ldr	x8, [sp, #256]
	str	x8, [sp]                        ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB200_17
	b	LBB200_16
LBB200_16:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB200_17
LBB200_17:
	ldr	d0, [sp, #160]
	add	sp, sp, #512
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
LBB200_18:
	.cfi_restore_state
Ltmp64:
	mov	x9, x0
	ldr	x0, [sp, #152]                  ; 8-byte Folded Reload
	mov	x8, x1
	stur	x9, [x29, #-72]
	stur	w8, [x29, #-76]
	bl	__ZdlPv
	b	LBB200_19
LBB200_19:
	ldur	x0, [x29, #-72]
	bl	__Unwind_Resume
Lfunc_end3:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table200:
Lexception3:
	.byte	255                             ; @LPStart Encoding = omit
	.byte	255                             ; @TType Encoding = omit
	.byte	1                               ; Call site Encoding = uleb128
	.uleb128 Lcst_end3-Lcst_begin3
Lcst_begin3:
	.uleb128 Lfunc_begin3-Lfunc_begin3      ; >> Call Site 1 <<
	.uleb128 Ltmp62-Lfunc_begin3            ;   Call between Lfunc_begin3 and Ltmp62
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp62-Lfunc_begin3            ; >> Call Site 2 <<
	.uleb128 Ltmp63-Ltmp62                  ;   Call between Ltmp62 and Ltmp63
	.uleb128 Ltmp64-Lfunc_begin3            ;     jumps to Ltmp64
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp63-Lfunc_begin3            ; >> Call Site 3 <<
	.uleb128 Lfunc_end3-Ltmp63              ;   Call between Ltmp63 and Lfunc_end3
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
Lcst_end3:
	.p2align	2
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EEC1Ev ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EEC1Ev
	.weak_def_can_be_hidden	__ZN7DropoutILi64ELi2ELi16ELi16EEC1Ev
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EEC1Ev:  ; @_ZN7DropoutILi64ELi2ELi16ELi16EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x4, [x29, #-16]
	stur	x5, [x29, #-8]
	str	x0, [sp, #24]
	str	x2, [sp, #16]
	str	x3, [sp, #8]
	ldr	x0, [sp, #24]
	str	x0, [sp]                        ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	x9, [sp, #16]
	str	x9, [x8, #120]
	ldur	w9, [x29, #-16]
	mov	x10, #144
	movk	x10, #4, lsl #16
	str	w9, [x8, x10]
	add	x0, x8, #128
	ldur	x1, [x29, #-8]
	bl	__ZN9rnd_gen_t4seedEy
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI7DropoutILi64ELi2ELi16ELi16EEEPT_S3_i ; -- Begin function _Z9make_copyI7DropoutILi64ELi2ELi16ELi16EEEPT_S3_i
	.weak_definition	__Z9make_copyI7DropoutILi64ELi2ELi16ELi16EEEPT_S3_i
	.p2align	2
__Z9make_copyI7DropoutILi64ELi2ELi16ELi16EEEPT_S3_i: ; @_Z9make_copyI7DropoutILi64ELi2ELi16ELi16EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #160
	movk	x0, #4, lsl #16
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE9rand_gradER9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	x1, [sp, #16]
	str	s0, [sp, #12]
	str	s1, [sp, #8]
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE9copy_gradERS0_ ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE9copy_gradERS0_
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE9copy_gradERS0_
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE9copy_gradERS0_: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE9copy_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	x1, [sp]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE8add_gradEf ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE8add_gradEf
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE8add_gradEf
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE8add_gradEf: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE8add_gradEf
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	s0, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i ; -- Begin function _Z6to_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	.weak_definition	__Z6to_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	.p2align	2
__Z6to_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i: ; @_Z6to_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB208_2
	b	LBB208_1
LBB208_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB208_3
	b	LBB208_4
LBB208_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	b	LBB208_8
LBB208_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	b	LBB208_8
LBB208_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB208_6
	b	LBB208_5
LBB208_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	b	LBB208_7
LBB208_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	b	LBB208_7
LBB208_7:
	b	LBB208_8
LBB208_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #136
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB209_2
	b	LBB209_1
LBB209_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB209_3
	b	LBB209_4
LBB209_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE
	b	LBB209_8
LBB209_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE
	b	LBB209_8
LBB209_4:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB209_6
	b	LBB209_5
LBB209_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE
	b	LBB209_7
LBB209_6:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE
	b	LBB209_7
LBB209_7:
	b	LBB209_8
LBB209_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #140
	movk	x9, #2, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7to_hostI7DropoutILi64ELi2ELi16ELi16EEEvPT_i ; -- Begin function _Z7to_hostI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	.weak_definition	__Z7to_hostI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	.p2align	2
__Z7to_hostI7DropoutILi64ELi2ELi16ELi16EEEvPT_i: ; @_Z7to_hostI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_ ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE13grad_dot_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	x1, [sp]
	movi	d0, #0000000000000000
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i ; -- Begin function _Z7del_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	.weak_definition	__Z7del_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	.p2align	2
__Z7del_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i: ; @_Z7del_devI7DropoutILi64ELi2ELi16ELi16EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EEC2Ev ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EEC2Ev
	.weak_def_can_be_hidden	__ZN7DropoutILi64ELi2ELi16ELi16EEC2Ev
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EEC2Ev:  ; @_ZN7DropoutILi64ELi2ELi16ELi16EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE16forward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE17forward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.141@PAGE
	add	x0, x0, l_.str.141@PAGEOFF
	mov	w1, #146
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE12forward_baseER6tensorIfLi64ELi2ELi16ELi16EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	add	x0, x8, #136
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	bl	__ZN9rnd_gen_t9get_stateEv
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #152
	movk	x9, #4, lsl #16
	str	x0, [x8, x9]
	ldur	w8, [x29, #-20]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB216_2
	b	LBB216_1
LBB216_1:
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #144
	movk	x9, #4, lsl #16
	ldr	s0, [x8, x9]
	fcvt	d0, s0
	str	d0, [sp, #16]                   ; 8-byte Folded Spill
	b	LBB216_3
LBB216_2:
	movi	d0, #0000000000000000
	str	d0, [sp, #16]                   ; 8-byte Folded Spill
	b	LBB216_3
LBB216_3:
	ldr	d0, [sp, #16]                   ; 8-byte Folded Reload
	fcvt	s0, d0
	stur	s0, [x29, #-28]
	ldur	s1, [x29, #-28]
	fmov	s0, #1.00000000
	fsub	s0, s0, s1
	fcvt	d1, s0
	fmov	d0, #1.00000000
	fdiv	d0, d0, d1
	fcvt	s0, d0
	stur	s0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB216_4
LBB216_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB216_6 Depth 2
                                        ;       Child Loop BB216_8 Depth 3
                                        ;         Child Loop BB216_10 Depth 4
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB216_22
	b	LBB216_5
LBB216_5:                               ;   in Loop: Header=BB216_4 Depth=1
	str	wzr, [sp, #40]
	b	LBB216_6
LBB216_6:                               ;   Parent Loop BB216_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB216_8 Depth 3
                                        ;         Child Loop BB216_10 Depth 4
	ldr	w8, [sp, #40]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB216_20
	b	LBB216_7
LBB216_7:                               ;   in Loop: Header=BB216_6 Depth=2
	str	wzr, [sp, #36]
	b	LBB216_8
LBB216_8:                               ;   Parent Loop BB216_4 Depth=1
                                        ;     Parent Loop BB216_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB216_10 Depth 4
	ldr	w8, [sp, #36]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB216_18
	b	LBB216_9
LBB216_9:                               ;   in Loop: Header=BB216_8 Depth=3
	str	wzr, [sp, #32]
	b	LBB216_10
LBB216_10:                              ;   Parent Loop BB216_4 Depth=1
                                        ;     Parent Loop BB216_6 Depth=2
                                        ;       Parent Loop BB216_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #32]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB216_16
	b	LBB216_11
LBB216_11:                              ;   in Loop: Header=BB216_10 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	bl	__ZN9rnd_gen_t6rand01Ev
	ldur	s1, [x29, #-28]
	fcvt	d1, s1
	fcmp	d0, d1
	cset	w8, pl
	tbnz	w8, #0, LBB216_13
	b	LBB216_12
LBB216_12:                              ;   in Loop: Header=BB216_10 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, x8, #136
	ldur	w1, [x29, #-36]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	movi	d0, #0000000000000000
	str	s0, [x0]
	b	LBB216_14
LBB216_13:                              ;   in Loop: Header=BB216_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	ldur	s1, [x29, #-32]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldur	w1, [x29, #-36]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB216_14
LBB216_14:                              ;   in Loop: Header=BB216_10 Depth=4
	b	LBB216_15
LBB216_15:                              ;   in Loop: Header=BB216_10 Depth=4
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB216_10
LBB216_16:                              ;   in Loop: Header=BB216_8 Depth=3
	b	LBB216_17
LBB216_17:                              ;   in Loop: Header=BB216_8 Depth=3
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB216_8
LBB216_18:                              ;   in Loop: Header=BB216_6 Depth=2
	b	LBB216_19
LBB216_19:                              ;   in Loop: Header=BB216_6 Depth=2
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB216_6
LBB216_20:                              ;   in Loop: Header=BB216_4 Depth=1
	b	LBB216_21
LBB216_21:                              ;   in Loop: Header=BB216_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB216_4
LBB216_22:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN9rnd_gen_t9get_stateEv      ; -- Begin function _ZN9rnd_gen_t9get_stateEv
	.weak_definition	__ZN9rnd_gen_t9get_stateEv
	.p2align	2
__ZN9rnd_gen_t9get_stateEv:             ; @_ZN9rnd_gen_t9get_stateEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	ldr	x0, [x8]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE17backward_cpu_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN7DropoutILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE18backward_cuda_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.141@PAGE
	add	x0, x0, l_.str.141@PAGEOFF
	mov	w1, #254
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE ; -- Begin function _ZN7DropoutILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.weak_definition	__ZN7DropoutILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.p2align	2
__ZN7DropoutILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE: ; @_ZN7DropoutILi64ELi2ELi16ELi16EE13backward_baseER6tensorIfLi64ELi2ELi16ELi16EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #140
	movk	x9, #2, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	mov	x9, #152
	movk	x9, #4, lsl #16
	ldr	x1, [x8, x9]
	bl	__ZN9rnd_gen_t4seedEy
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #144
	movk	x9, #4, lsl #16
	ldr	s1, [x8, x9]
	fmov	s0, #1.00000000
	fsub	s0, s0, s1
	fcvt	d1, s0
	fmov	d0, #1.00000000
	fdiv	d0, d0, d1
	fcvt	s0, d0
	stur	s0, [x29, #-24]
	stur	wzr, [x29, #-28]
	b	LBB220_1
LBB220_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB220_3 Depth 2
                                        ;       Child Loop BB220_5 Depth 3
                                        ;         Child Loop BB220_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB220_19
	b	LBB220_2
LBB220_2:                               ;   in Loop: Header=BB220_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB220_3
LBB220_3:                               ;   Parent Loop BB220_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB220_5 Depth 3
                                        ;         Child Loop BB220_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #2
	cset	w8, ge
	tbnz	w8, #0, LBB220_17
	b	LBB220_4
LBB220_4:                               ;   in Loop: Header=BB220_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB220_5
LBB220_5:                               ;   Parent Loop BB220_1 Depth=1
                                        ;     Parent Loop BB220_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB220_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB220_15
	b	LBB220_6
LBB220_6:                               ;   in Loop: Header=BB220_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB220_7
LBB220_7:                               ;   Parent Loop BB220_1 Depth=1
                                        ;     Parent Loop BB220_3 Depth=2
                                        ;       Parent Loop BB220_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #16
	cset	w8, ge
	tbnz	w8, #0, LBB220_13
	b	LBB220_8
LBB220_8:                               ;   in Loop: Header=BB220_7 Depth=4
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	bl	__ZN9rnd_gen_t6rand01Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #144
	movk	x9, #4, lsl #16
	ldr	s1, [x8, x9]
	fcvt	d1, s1
	fcmp	d0, d1
	cset	w8, pl
	tbnz	w8, #0, LBB220_10
	b	LBB220_9
LBB220_9:                               ;   in Loop: Header=BB220_7 Depth=4
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #140
	movk	x9, #2, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	movi	d0, #0000000000000000
	str	s0, [x0]
	b	LBB220_11
LBB220_10:                              ;   in Loop: Header=BB220_7 Depth=4
	ldur	s0, [x29, #-24]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #140
	movk	x9, #2, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi2ELi16ELi16EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB220_11
LBB220_11:                              ;   in Loop: Header=BB220_7 Depth=4
	b	LBB220_12
LBB220_12:                              ;   in Loop: Header=BB220_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB220_7
LBB220_13:                              ;   in Loop: Header=BB220_5 Depth=3
	b	LBB220_14
LBB220_14:                              ;   in Loop: Header=BB220_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB220_5
LBB220_15:                              ;   in Loop: Header=BB220_3 Depth=2
	b	LBB220_16
LBB220_16:                              ;   in Loop: Header=BB220_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB220_3
LBB220_17:                              ;   in Loop: Header=BB220_1 Depth=1
	b	LBB220_18
LBB220_18:                              ;   in Loop: Header=BB220_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB220_1
LBB220_19:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z11linear_mainiPPc            ; -- Begin function _Z11linear_mainiPPc
	.p2align	2
__Z11linear_mainiPPc:                   ; @_Z11linear_mainiPPc
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #640
	add	x8, sp, #192
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	str	w0, [x8, #444]
	str	x1, [x8, #432]
	ldr	w0, [x8, #444]
	ldr	x1, [x8, #432]
	sub	x8, x29, #152
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	bl	__ZL10parse_argsiPPc
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	mov	w0, #64
	str	w0, [x8, #308]
	ldr	w1, [x8, #344]
	bl	__ZL5min_iii
	ldr	x9, [sp, #48]                   ; 8-byte Folded Reload
	str	w0, [x9, #304]
	mov	w8, #10
	str	w8, [x9, #300]
	mov	w8, #128
	str	w8, [x9, #296]
	ldr	x8, [x9, #336]
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [x9, #292]
	add	x0, sp, #344
	str	x0, [sp, #32]                   ; 8-byte Folded Spill
	bl	__ZN6loggerC1Ev
	ldr	x1, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, sp, #224
	str	x0, [sp, #40]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #40]                   ; 8-byte Folded Reload
	bl	__ZN6logger9start_logE11cmdline_opt
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x1, [x8, #368]
	add	x0, sp, #216
	bl	__ZN9rnd_gen_t4seedEy
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	movi	d0, #0000000000000000
	str	d0, [x8, #16]
	str	d0, [x8, #8]
	str	wzr, [x8]
	b	LBB221_1
LBB221_1:                               ; =>This Inner Loop Header: Depth=1
	ldr	x9, [sp, #48]                   ; 8-byte Folded Reload
	ldr	w8, [x9]
	ldr	w9, [x9, #292]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB221_4
	b	LBB221_2
LBB221_2:                               ;   in Loop: Header=BB221_1 Depth=1
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	w9, [x8]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.121@PAGE
	add	x0, x0, l_.str.121@PAGEOFF
	bl	_printf
	add	x0, sp, #64
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	sub	x1, x29, #152
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	w3, [x8, #304]
	add	x1, sp, #344
	add	x2, sp, #216
	bl	__ZL10grad_checkI6LinearILi64ELi10ELi128ELi1ELi1EE6tensorIfLi64ELi128ELi1ELi1EES2_IfLi64ELi10ELi1ELi1EE9LinearCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	fcvt	s0, d0
	str	s0, [sp, #188]
	ldr	d0, [x8, #16]
	fcvt	s0, d0
	ldr	s1, [sp, #188]
	bl	__ZL5max_rff
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [x8, #16]
	ldr	s0, [sp, #188]
	fcvt	d1, s0
	ldr	d0, [x8, #8]
	fadd	d0, d0, d1
	str	d0, [x8, #8]
	b	LBB221_3
LBB221_3:                               ;   in Loop: Header=BB221_1 Depth=1
	ldr	x9, [sp, #48]                   ; 8-byte Folded Reload
	ldr	w8, [x9]
	add	w8, w8, #1
	str	w8, [x9]
	b	LBB221_1
LBB221_4:
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #16]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.122@PAGE
	add	x0, x0, l_.str.122@PAGEOFF
	bl	_printf
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	d0, [x8, #8]
	ldr	s2, [x8, #292]
                                        ; implicit-def: $d1
	fmov	s1, s2
	sshll.2d	v1, v1, #0
                                        ; kill: def $d1 killed $d1 killed $q1
	scvtf	d1, d1
	fdiv	d0, d0, d1
	mov	x8, sp
	str	d0, [x8]
	adrp	x0, l_.str.123@PAGE
	add	x0, x0, l_.str.123@PAGEOFF
	bl	_printf
	add	x0, sp, #344
	bl	__ZN6logger7end_logEv
	mov	w0, #0
	add	sp, sp, #640
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL10grad_checkI6LinearILi64ELi10ELi128ELi1ELi1EE6tensorIfLi64ELi128ELi1ELi1EES2_IfLi64ELi10ELi1ELi1EE9LinearCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
__ZL10grad_checkI6LinearILi64ELi10ELi128ELi1ELi1EE6tensorIfLi64ELi128ELi1ELi1EES2_IfLi64ELi10ELi1ELi1EE9LinearCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i: ; @_ZL10grad_checkI6LinearILi64ELi10ELi128ELi1ELi1EE6tensorIfLi64ELi128ELi1ELi1EES2_IfLi64ELi10ELi1ELi1EE9LinearCfgEd11cmdline_optP6loggerR9rnd_gen_tT2_i
Lfunc_begin4:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception4
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	.cfi_remember_state
	sub	sp, sp, #496
	str	x0, [sp, #144]                  ; 8-byte Folded Spill
	stur	x1, [x29, #-32]
	stur	x2, [x29, #-40]
	stur	w3, [x29, #-44]
	mov	x0, #968
	movk	x0, #1, lsl #16
	str	x0, [sp, #152]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #152]                  ; 8-byte Folded Reload
	str	x0, [sp, #160]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #160]                  ; 8-byte Folded Reload
Ltmp73:
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EEC1Ev
Ltmp74:
	b	LBB222_1
LBB222_1:
	ldr	x1, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #160]                  ; 8-byte Folded Reload
	stur	x8, [x29, #-56]
	ldur	x8, [x29, #-56]
	str	x8, [sp, #56]                   ; 8-byte Folded Spill
	sub	x0, x29, #192
	str	x0, [sp, #64]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #56]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #64]                   ; 8-byte Folded Reload
	ldur	x2, [x29, #-32]
	ldur	x3, [x29, #-40]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg
	mov	x0, #32772
	str	x0, [sp, #104]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #72]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	stur	x0, [x29, #-208]
	ldur	x0, [x29, #-208]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	fmov	s0, #-1.00000000
	str	s0, [sp, #96]                   ; 4-byte Folded Spill
	fmov	s1, #1.00000000
	str	s1, [sp, #100]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	mov	x0, #2564
	str	x0, [sp, #80]                   ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #80]                   ; 8-byte Folded Reload
	str	x0, [sp, #88]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #88]                   ; 8-byte Folded Reload
	ldr	s0, [sp, #96]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #100]                  ; 4-byte Folded Reload
	stur	x0, [x29, #-216]
	ldur	x0, [x29, #-216]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	ldr	x0, [sp, #104]                  ; 8-byte Folded Reload
	mov	w8, #4719
	movk	w8, #14979, lsl #16
	fmov	s0, w8
	stur	s0, [x29, #-220]
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #112]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #112]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-232]
	ldur	x0, [x29, #-232]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	ldur	s0, [x29, #-220]
	fneg	s0, s0
	ldur	s1, [x29, #-220]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi128ELi1ELi1EEEPT_S3_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-240]
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi128ELi1ELi1EEEPT_S3_i
	stur	x0, [x29, #-248]
	ldur	x0, [x29, #-240]
	ldur	x1, [x29, #-232]
	fmov	s0, #-0.50000000
	str	s0, [sp, #124]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE4add_EfRS0_
	ldur	x0, [x29, #-248]
	ldur	x1, [x29, #-232]
	fmov	s0, #0.50000000
	str	s0, [sp, #128]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE4add_EfRS0_
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6LinearILi64ELi10ELi128ELi1ELi1EEEPT_S3_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #256]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6LinearILi64ELi10ELi128ELi1ELi1EEEPT_S3_i
	str	x0, [sp, #248]
	ldr	x0, [sp, #256]
	ldur	x1, [x29, #-40]
	ldur	s0, [x29, #-220]
	fneg	s0, s0
	ldur	s1, [x29, #-220]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE9rand_gradER9rnd_gen_tff
	ldr	x0, [sp, #248]
	ldr	x1, [sp, #256]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE9copy_gradERS0_
	ldr	s0, [sp, #124]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #256]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8add_gradEf
	ldr	s0, [sp, #128]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #248]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8add_gradEf
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-216]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	ldur	x0, [x29, #-56]
	ldur	x1, [x29, #-208]
	mov	w2, #1
	str	w2, [sp, #132]                  ; 4-byte Folded Spill
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	str	x0, [sp, #240]
	ldur	x0, [x29, #-56]
	ldur	x1, [x29, #-216]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE
	ldr	w2, [sp, #132]                  ; 4-byte Folded Reload
	str	x0, [sp, #232]
	ldr	x0, [sp, #256]
	ldur	x1, [x29, #-240]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	ldr	w2, [sp, #132]                  ; 4-byte Folded Reload
	str	x0, [sp, #224]
	ldr	x0, [sp, #248]
	ldur	x1, [x29, #-248]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #216]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #224]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE3dotERS0_
	str	d0, [sp, #208]
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #240]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE3dotERS0_
	str	d0, [sp, #200]
	ldur	x0, [x29, #-216]
	ldr	x1, [sp, #216]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE3dotERS0_
	str	d0, [sp, #192]
	ldr	x0, [sp, #232]
	ldur	x1, [x29, #-232]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE3dotERS0_
	str	d0, [sp, #184]
	ldur	x0, [x29, #-56]
	ldr	x1, [sp, #256]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE13grad_dot_gradERS0_
	str	d0, [sp, #176]
	ldr	d0, [sp, #184]
	ldr	d1, [sp, #176]
	ldr	d2, [sp, #208]
	ldr	d3, [sp, #200]
	ldr	d4, [sp, #192]
	bl	__ZL10show_errorddddd
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [sp, #168]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #256]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-216]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-232]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #144]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	ldur	x8, [x29, #-56]
	str	x8, [sp, #136]                  ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB222_3
	b	LBB222_2
LBB222_2:
	ldr	x0, [sp, #136]                  ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB222_3
LBB222_3:
	ldr	x8, [sp, #256]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB222_5
	b	LBB222_4
LBB222_4:
	ldr	x0, [sp, #48]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB222_5
LBB222_5:
	ldr	x8, [sp, #248]
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB222_7
	b	LBB222_6
LBB222_6:
	ldr	x0, [sp, #40]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB222_7
LBB222_7:
	ldur	x8, [x29, #-216]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB222_9
	b	LBB222_8
LBB222_8:
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB222_9
LBB222_9:
	ldur	x8, [x29, #-208]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB222_11
	b	LBB222_10
LBB222_10:
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB222_11
LBB222_11:
	ldur	x8, [x29, #-232]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB222_13
	b	LBB222_12
LBB222_12:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB222_13
LBB222_13:
	ldur	x8, [x29, #-240]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB222_15
	b	LBB222_14
LBB222_14:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB222_15
LBB222_15:
	ldur	x8, [x29, #-248]
	str	x8, [sp]                        ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB222_17
	b	LBB222_16
LBB222_16:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB222_17
LBB222_17:
	ldr	d0, [sp, #168]
	add	sp, sp, #496
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
LBB222_18:
	.cfi_restore_state
Ltmp75:
	mov	x9, x0
	ldr	x0, [sp, #160]                  ; 8-byte Folded Reload
	mov	x8, x1
	stur	x9, [x29, #-64]
	stur	w8, [x29, #-68]
	bl	__ZdlPv
	b	LBB222_19
LBB222_19:
	ldur	x0, [x29, #-64]
	bl	__Unwind_Resume
Lfunc_end4:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table222:
Lexception4:
	.byte	255                             ; @LPStart Encoding = omit
	.byte	255                             ; @TType Encoding = omit
	.byte	1                               ; Call site Encoding = uleb128
	.uleb128 Lcst_end4-Lcst_begin4
Lcst_begin4:
	.uleb128 Lfunc_begin4-Lfunc_begin4      ; >> Call Site 1 <<
	.uleb128 Ltmp73-Lfunc_begin4            ;   Call between Lfunc_begin4 and Ltmp73
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp73-Lfunc_begin4            ; >> Call Site 2 <<
	.uleb128 Ltmp74-Ltmp73                  ;   Call between Ltmp73 and Ltmp74
	.uleb128 Ltmp75-Lfunc_begin4            ;     jumps to Ltmp75
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp74-Lfunc_begin4            ; >> Call Site 3 <<
	.uleb128 Lfunc_end4-Ltmp74              ;   Call between Ltmp74 and Lfunc_end4
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
Lcst_end4:
	.p2align	2
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EEC1Ev ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EEC1Ev
	.weak_def_can_be_hidden	__ZN6LinearILi64ELi10ELi128ELi1ELi1EEC1Ev
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EEC1Ev: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x1, [sp, #24]                   ; 8-byte Folded Spill
	stur	x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	ldur	x0, [x29, #-16]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-24]
	str	x8, [x9, #120]
	mov	w0, #128
	str	w0, [sp, #12]                   ; 4-byte Folded Spill
	bl	__Z4sqrtB6v15007IiENSt3__19enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	fmov	d1, d0
	fmov	d0, #1.00000000
	fdiv	d0, d0, d1
	fcvt	s0, d0
	stur	s0, [x29, #-36]
	add	x0, x8, #136
	ldur	x2, [x29, #-32]
	ldur	s0, [x29, #-36]
	fneg	s0, s0
	ldur	s1, [x29, #-36]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #5260
	add	x0, x8, x9
	ldur	x2, [x29, #-32]
	ldur	s0, [x29, #-36]
	fneg	s0, s0
	ldur	s1, [x29, #-36]
	mov	w1, #10
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #45808
	add	x0, x8, x9
	ldr	s0, [x1, #16]
	mov	w8, #26214
	movk	w8, #16230, lsl #16
	fmov	s1, w8
	str	s1, [sp, #36]                   ; 4-byte Folded Spill
	mov	w8, #14269
	movk	w8, #13702, lsl #16
	fmov	s2, w8
	str	s2, [sp, #40]                   ; 4-byte Folded Spill
	bl	__ZN8AdaDeltaILi128ELi1ELi1ELi10EE4initEfff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s1, [sp, #36]                   ; 4-byte Folded Reload
	ldr	s2, [sp, #40]                   ; 4-byte Folded Reload
	mov	x9, #780
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	ldr	s0, [x1, #16]
	bl	__ZN8AdaDeltaILi10ELi1ELi1ELi1EE4initEfff
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi128ELi1ELi1EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi64ELi128ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi64ELi128ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi64ELi128ELi1ELi1EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi64ELi128ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB225_1
LBB225_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB225_3 Depth 2
                                        ;       Child Loop BB225_5 Depth 3
                                        ;         Child Loop BB225_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB225_16
	b	LBB225_2
LBB225_2:                               ;   in Loop: Header=BB225_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB225_3
LBB225_3:                               ;   Parent Loop BB225_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB225_5 Depth 3
                                        ;         Child Loop BB225_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB225_14
	b	LBB225_4
LBB225_4:                               ;   in Loop: Header=BB225_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB225_5
LBB225_5:                               ;   Parent Loop BB225_1 Depth=1
                                        ;     Parent Loop BB225_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB225_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB225_12
	b	LBB225_6
LBB225_6:                               ;   in Loop: Header=BB225_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB225_7
LBB225_7:                               ;   Parent Loop BB225_1 Depth=1
                                        ;     Parent Loop BB225_3 Depth=2
                                        ;       Parent Loop BB225_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB225_10
	b	LBB225_8
LBB225_8:                               ;   in Loop: Header=BB225_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB225_9
LBB225_9:                               ;   in Loop: Header=BB225_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB225_7
LBB225_10:                              ;   in Loop: Header=BB225_5 Depth=3
	b	LBB225_11
LBB225_11:                              ;   in Loop: Header=BB225_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB225_5
LBB225_12:                              ;   in Loop: Header=BB225_3 Depth=2
	b	LBB225_13
LBB225_13:                              ;   in Loop: Header=BB225_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB225_3
LBB225_14:                              ;   in Loop: Header=BB225_1 Depth=1
	b	LBB225_15
LBB225_15:                              ;   in Loop: Header=BB225_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB225_1
LBB225_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi10ELi1ELi1EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi64ELi10ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi64ELi10ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi64ELi10ELi1ELi1EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi64ELi10ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB226_1
LBB226_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB226_3 Depth 2
                                        ;       Child Loop BB226_5 Depth 3
                                        ;         Child Loop BB226_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB226_16
	b	LBB226_2
LBB226_2:                               ;   in Loop: Header=BB226_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB226_3
LBB226_3:                               ;   Parent Loop BB226_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB226_5 Depth 3
                                        ;         Child Loop BB226_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB226_14
	b	LBB226_4
LBB226_4:                               ;   in Loop: Header=BB226_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB226_5
LBB226_5:                               ;   Parent Loop BB226_1 Depth=1
                                        ;     Parent Loop BB226_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB226_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB226_12
	b	LBB226_6
LBB226_6:                               ;   in Loop: Header=BB226_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB226_7
LBB226_7:                               ;   Parent Loop BB226_1 Depth=1
                                        ;     Parent Loop BB226_3 Depth=2
                                        ;       Parent Loop BB226_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB226_10
	b	LBB226_8
LBB226_8:                               ;   in Loop: Header=BB226_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB226_9
LBB226_9:                               ;   in Loop: Header=BB226_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB226_7
LBB226_10:                              ;   in Loop: Header=BB226_5 Depth=3
	b	LBB226_11
LBB226_11:                              ;   in Loop: Header=BB226_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB226_5
LBB226_12:                              ;   in Loop: Header=BB226_3 Depth=2
	b	LBB226_13
LBB226_13:                              ;   in Loop: Header=BB226_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB226_3
LBB226_14:                              ;   in Loop: Header=BB226_1 Depth=1
	b	LBB226_15
LBB226_15:                              ;   in Loop: Header=BB226_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB226_1
LBB226_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI6tensorIfLi64ELi128ELi1ELi1EEEPT_S3_i ; -- Begin function _Z9make_copyI6tensorIfLi64ELi128ELi1ELi1EEEPT_S3_i
	.weak_definition	__Z9make_copyI6tensorIfLi64ELi128ELi1ELi1EEEPT_S3_i
	.p2align	2
__Z9make_copyI6tensorIfLi64ELi128ELi1ELi1EEEPT_S3_i: ; @_Z9make_copyI6tensorIfLi64ELi128ELi1ELi1EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #32772
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi128ELi1ELi1EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi128ELi1ELi1EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi128ELi1ELi1EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi128ELi1ELi1EE4add_EfRS0_: ; @_ZN6tensorIfLi64ELi128ELi1ELi1EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB228_2
	b	LBB228_1
LBB228_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB228_2:
	b	LBB228_3
LBB228_3:
	str	wzr, [sp, #28]
	b	LBB228_4
LBB228_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB228_6 Depth 2
                                        ;       Child Loop BB228_8 Depth 3
                                        ;         Child Loop BB228_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB228_19
	b	LBB228_5
LBB228_5:                               ;   in Loop: Header=BB228_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB228_6
LBB228_6:                               ;   Parent Loop BB228_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB228_8 Depth 3
                                        ;         Child Loop BB228_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB228_17
	b	LBB228_7
LBB228_7:                               ;   in Loop: Header=BB228_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB228_8
LBB228_8:                               ;   Parent Loop BB228_4 Depth=1
                                        ;     Parent Loop BB228_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB228_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB228_15
	b	LBB228_9
LBB228_9:                               ;   in Loop: Header=BB228_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB228_10
LBB228_10:                              ;   Parent Loop BB228_4 Depth=1
                                        ;     Parent Loop BB228_6 Depth=2
                                        ;       Parent Loop BB228_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB228_13
	b	LBB228_11
LBB228_11:                              ;   in Loop: Header=BB228_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB228_12
LBB228_12:                              ;   in Loop: Header=BB228_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB228_10
LBB228_13:                              ;   in Loop: Header=BB228_8 Depth=3
	b	LBB228_14
LBB228_14:                              ;   in Loop: Header=BB228_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB228_8
LBB228_15:                              ;   in Loop: Header=BB228_6 Depth=2
	b	LBB228_16
LBB228_16:                              ;   in Loop: Header=BB228_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB228_6
LBB228_17:                              ;   in Loop: Header=BB228_4 Depth=1
	b	LBB228_18
LBB228_18:                              ;   in Loop: Header=BB228_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB228_4
LBB228_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI6LinearILi64ELi10ELi128ELi1ELi1EEEPT_S3_i ; -- Begin function _Z9make_copyI6LinearILi64ELi10ELi128ELi1ELi1EEEPT_S3_i
	.weak_definition	__Z9make_copyI6LinearILi64ELi10ELi128ELi1ELi1EEEPT_S3_i
	.p2align	2
__Z9make_copyI6LinearILi64ELi10ELi128ELi1ELi1EEEPT_S3_i: ; @_Z9make_copyI6LinearILi64ELi10ELi128ELi1ELi1EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #968
	movk	x0, #1, lsl #16
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE9rand_gradER9rnd_gen_tff ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE9rand_gradER9rnd_gen_tff
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE9rand_gradER9rnd_gen_tff
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE9rand_gradER9rnd_gen_tff: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE9rand_gradER9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	s0, [sp, #12]
	str	s1, [sp, #8]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #7868
	add	x0, x8, x9
	ldr	x2, [sp, #16]
	ldr	s0, [sp, #12]
	ldr	s1, [sp, #8]
	mov	w1, #128
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #12992
	add	x0, x8, x9
	ldr	x2, [sp, #16]
	ldr	s0, [sp, #12]
	ldr	s1, [sp, #8]
	mov	w1, #10
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE9copy_gradERS0_ ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE9copy_gradERS0_
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE9copy_gradERS0_
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE9copy_gradERS0_: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE9copy_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x10, [sp, #16]
	mov	x9, #7868
	add	x1, x10, x9
	add	x0, x8, x9
	mov	x2, #5124
	bl	_memcpy
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x10, [sp, #16]
	mov	x9, #12992
	add	x1, x10, x9
	add	x0, x8, x9
	mov	x2, #44
	bl	_memcpy
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8add_gradEf ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE8add_gradEf
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8add_gradEf
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8add_gradEf: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE8add_gradEf
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, x8
	add	x0, x9, #136
	ldur	s0, [x29, #-12]
	mov	x9, #7868
	add	x1, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE4add_EfRS0_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #5260
	add	x0, x8, x9
	ldur	s0, [x29, #-12]
	mov	x9, #12992
	add	x1, x8, x9
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i ; -- Begin function _Z6to_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	.weak_definition	__Z6to_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	.p2align	2
__Z6to_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i: ; @_Z6to_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i ; -- Begin function _Z6to_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	.weak_definition	__Z6to_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	.p2align	2
__Z6to_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i: ; @_Z6to_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i ; -- Begin function _Z6to_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	.weak_definition	__Z6to_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	.p2align	2
__Z6to_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i: ; @_Z6to_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	subs	w8, w8, #0
                                        ; kill: def $x8 killed $w8
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #3
	cset	w8, hi
	tbnz	w8, #0, LBB236_6
; %bb.1:
	ldr	x11, [sp, #16]                  ; 8-byte Folded Reload
	adrp	x10, LJTI236_0@PAGE
	add	x10, x10, LJTI236_0@PAGEOFF
Ltmp79:
	adr	x8, Ltmp79
	ldrsw	x9, [x10, x11, lsl #2]
	add	x8, x8, x9
	br	x8
LBB236_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB236_10
LBB236_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE15forward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB236_10
LBB236_4:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB236_10
LBB236_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB236_10
LBB236_6:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB236_8
	b	LBB236_7
LBB236_7:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB236_9
LBB236_8:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB236_9
LBB236_9:
	b	LBB236_10
LBB236_10:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #5304
	add	x0, x8, x9
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
	.section	__TEXT,__const
	.p2align	2
LJTI236_0:
	.long	LBB236_4-Ltmp79
	.long	LBB236_5-Ltmp79
	.long	LBB236_3-Ltmp79
	.long	LBB236_2-Ltmp79
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	subs	w8, w8, #0
                                        ; kill: def $x8 killed $w8
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	subs	x8, x8, #3
	cset	w8, hi
	tbnz	w8, #0, LBB237_6
; %bb.1:
	ldr	x11, [sp, #8]                   ; 8-byte Folded Reload
	adrp	x10, LJTI237_0@PAGE
	add	x10, x10, LJTI237_0@PAGEOFF
Ltmp80:
	adr	x8, Ltmp80
	ldrsw	x9, [x10, x11, lsl #2]
	add	x8, x8, x9
	br	x8
LBB237_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_simdER6tensorIfLi64ELi10ELi1ELi1EE
	b	LBB237_10
LBB237_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16backward_cpu_ompER6tensorIfLi64ELi10ELi1ELi1EE
	b	LBB237_10
LBB237_4:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EE
	b	LBB237_10
LBB237_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EE
	b	LBB237_10
LBB237_6:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB237_8
	b	LBB237_7
LBB237_7:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EE
	b	LBB237_9
LBB237_8:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EE
	b	LBB237_9
LBB237_9:
	b	LBB237_10
LBB237_10:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #13036
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
	.section	__TEXT,__const
	.p2align	2
LJTI237_0:
	.long	LBB237_4-Ltmp80
	.long	LBB237_5-Ltmp80
	.long	LBB237_3-Ltmp80
	.long	LBB237_2-Ltmp80
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z7to_hostI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i ; -- Begin function _Z7to_hostI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	.weak_definition	__Z7to_hostI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	.p2align	2
__Z7to_hostI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i: ; @_Z7to_hostI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi10ELi1ELi1EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi64ELi10ELi1ELi1EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi64ELi10ELi1ELi1EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi64ELi10ELi1ELi1EE3dotERS0_: ; @_ZN6tensorIfLi64ELi10ELi1ELi1EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB239_2
	b	LBB239_1
LBB239_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB239_2:
	b	LBB239_3
LBB239_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB239_4
LBB239_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB239_6 Depth 2
                                        ;       Child Loop BB239_8 Depth 3
                                        ;         Child Loop BB239_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB239_19
	b	LBB239_5
LBB239_5:                               ;   in Loop: Header=BB239_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB239_6
LBB239_6:                               ;   Parent Loop BB239_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB239_8 Depth 3
                                        ;         Child Loop BB239_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB239_17
	b	LBB239_7
LBB239_7:                               ;   in Loop: Header=BB239_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB239_8
LBB239_8:                               ;   Parent Loop BB239_4 Depth=1
                                        ;     Parent Loop BB239_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB239_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB239_15
	b	LBB239_9
LBB239_9:                               ;   in Loop: Header=BB239_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB239_10
LBB239_10:                              ;   Parent Loop BB239_4 Depth=1
                                        ;     Parent Loop BB239_6 Depth=2
                                        ;       Parent Loop BB239_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB239_13
	b	LBB239_11
LBB239_11:                              ;   in Loop: Header=BB239_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB239_12
LBB239_12:                              ;   in Loop: Header=BB239_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB239_10
LBB239_13:                              ;   in Loop: Header=BB239_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB239_14
LBB239_14:                              ;   in Loop: Header=BB239_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB239_8
LBB239_15:                              ;   in Loop: Header=BB239_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB239_16
LBB239_16:                              ;   in Loop: Header=BB239_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB239_6
LBB239_17:                              ;   in Loop: Header=BB239_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB239_18
LBB239_18:                              ;   in Loop: Header=BB239_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB239_4
LBB239_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi128ELi1ELi1EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi64ELi128ELi1ELi1EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi64ELi128ELi1ELi1EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi64ELi128ELi1ELi1EE3dotERS0_: ; @_ZN6tensorIfLi64ELi128ELi1ELi1EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB240_2
	b	LBB240_1
LBB240_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB240_2:
	b	LBB240_3
LBB240_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB240_4
LBB240_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB240_6 Depth 2
                                        ;       Child Loop BB240_8 Depth 3
                                        ;         Child Loop BB240_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB240_19
	b	LBB240_5
LBB240_5:                               ;   in Loop: Header=BB240_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB240_6
LBB240_6:                               ;   Parent Loop BB240_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB240_8 Depth 3
                                        ;         Child Loop BB240_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB240_17
	b	LBB240_7
LBB240_7:                               ;   in Loop: Header=BB240_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB240_8
LBB240_8:                               ;   Parent Loop BB240_4 Depth=1
                                        ;     Parent Loop BB240_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB240_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB240_15
	b	LBB240_9
LBB240_9:                               ;   in Loop: Header=BB240_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB240_10
LBB240_10:                              ;   Parent Loop BB240_4 Depth=1
                                        ;     Parent Loop BB240_6 Depth=2
                                        ;       Parent Loop BB240_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB240_13
	b	LBB240_11
LBB240_11:                              ;   in Loop: Header=BB240_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB240_12
LBB240_12:                              ;   in Loop: Header=BB240_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB240_10
LBB240_13:                              ;   in Loop: Header=BB240_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB240_14
LBB240_14:                              ;   in Loop: Header=BB240_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB240_8
LBB240_15:                              ;   in Loop: Header=BB240_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB240_16
LBB240_16:                              ;   in Loop: Header=BB240_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB240_6
LBB240_17:                              ;   in Loop: Header=BB240_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB240_18
LBB240_18:                              ;   in Loop: Header=BB240_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB240_4
LBB240_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE13grad_dot_gradERS0_ ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE13grad_dot_gradERS0_
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE13grad_dot_gradERS0_
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE13grad_dot_gradERS0_: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE13grad_dot_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #7868
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE3dotERS0_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	d0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, #12992
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE3dotERS0_
	fmov	d1, d0
	ldr	d0, [sp, #8]                    ; 8-byte Folded Reload
	fadd	d0, d0, d1
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i ; -- Begin function _Z7del_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	.weak_definition	__Z7del_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	.p2align	2
__Z7del_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i: ; @_Z7del_devI6LinearILi64ELi10ELi128ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i ; -- Begin function _Z7del_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	.weak_definition	__Z7del_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	.p2align	2
__Z7del_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i: ; @_Z7del_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i ; -- Begin function _Z7del_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	.weak_definition	__Z7del_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	.p2align	2
__Z7del_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i: ; @_Z7del_devI6tensorIfLi64ELi128ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EEC2Ev ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EEC2Ev
	.weak_def_can_be_hidden	__ZN6LinearILi64ELi10ELi128ELi1ELi1EEC2Ev
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EEC2Ev: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB246_1
LBB246_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB246_3 Depth 2
                                        ;       Child Loop BB246_5 Depth 3
                                        ;         Child Loop BB246_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB246_16
	b	LBB246_2
LBB246_2:                               ;   in Loop: Header=BB246_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB246_3
LBB246_3:                               ;   Parent Loop BB246_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB246_5 Depth 3
                                        ;         Child Loop BB246_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB246_14
	b	LBB246_4
LBB246_4:                               ;   in Loop: Header=BB246_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB246_5
LBB246_5:                               ;   Parent Loop BB246_1 Depth=1
                                        ;     Parent Loop BB246_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB246_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB246_12
	b	LBB246_6
LBB246_6:                               ;   in Loop: Header=BB246_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB246_7
LBB246_7:                               ;   Parent Loop BB246_1 Depth=1
                                        ;     Parent Loop BB246_3 Depth=2
                                        ;       Parent Loop BB246_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB246_10
	b	LBB246_8
LBB246_8:                               ;   in Loop: Header=BB246_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB246_9
LBB246_9:                               ;   in Loop: Header=BB246_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB246_7
LBB246_10:                              ;   in Loop: Header=BB246_5 Depth=3
	b	LBB246_11
LBB246_11:                              ;   in Loop: Header=BB246_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB246_5
LBB246_12:                              ;   in Loop: Header=BB246_3 Depth=2
	b	LBB246_13
LBB246_13:                              ;   in Loop: Header=BB246_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB246_3
LBB246_14:                              ;   in Loop: Header=BB246_1 Depth=1
	b	LBB246_15
LBB246_15:                              ;   in Loop: Header=BB246_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB246_1
LBB246_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB247_1
LBB247_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB247_3 Depth 2
                                        ;       Child Loop BB247_5 Depth 3
                                        ;         Child Loop BB247_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB247_16
	b	LBB247_2
LBB247_2:                               ;   in Loop: Header=BB247_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB247_3
LBB247_3:                               ;   Parent Loop BB247_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB247_5 Depth 3
                                        ;         Child Loop BB247_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB247_14
	b	LBB247_4
LBB247_4:                               ;   in Loop: Header=BB247_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB247_5
LBB247_5:                               ;   Parent Loop BB247_1 Depth=1
                                        ;     Parent Loop BB247_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB247_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB247_12
	b	LBB247_6
LBB247_6:                               ;   in Loop: Header=BB247_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB247_7
LBB247_7:                               ;   Parent Loop BB247_1 Depth=1
                                        ;     Parent Loop BB247_3 Depth=2
                                        ;       Parent Loop BB247_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB247_10
	b	LBB247_8
LBB247_8:                               ;   in Loop: Header=BB247_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB247_9
LBB247_9:                               ;   in Loop: Header=BB247_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB247_7
LBB247_10:                              ;   in Loop: Header=BB247_5 Depth=3
	b	LBB247_11
LBB247_11:                              ;   in Loop: Header=BB247_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB247_5
LBB247_12:                              ;   in Loop: Header=BB247_3 Depth=2
	b	LBB247_13
LBB247_13:                              ;   in Loop: Header=BB247_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB247_3
LBB247_14:                              ;   in Loop: Header=BB247_1 Depth=1
	b	LBB247_15
LBB247_15:                              ;   in Loop: Header=BB247_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB247_1
LBB247_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi128ELi1ELi1ELi10EE4initEfff ; -- Begin function _ZN8AdaDeltaILi128ELi1ELi1ELi10EE4initEfff
	.weak_definition	__ZN8AdaDeltaILi128ELi1ELi1ELi10EE4initEfff
	.p2align	2
__ZN8AdaDeltaILi128ELi1ELi1ELi10EE4initEfff: ; @_ZN8AdaDeltaILi128ELi1ELi1ELi10EE4initEfff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	s1, [x29, #-16]
	stur	s2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w9, [x29, #-12]
	mov	x10, #20496
	str	w9, [x8, x10]
	ldur	w9, [x29, #-16]
	mov	x10, #20500
	str	w9, [x8, x10]
	ldur	w9, [x29, #-20]
	mov	x10, #20504
	str	w9, [x8, x10]
	mov	x9, #5124
	add	x0, x8, x9
	mov	w1, #128
	str	w1, [sp, #24]                   ; 4-byte Folded Spill
	movi	d0, #0000000000000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE10init_constEif
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE10init_constEif
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	mov	x9, #10248
	add	x0, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	mov	x9, #15372
	add	x0, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi10ELi1ELi1ELi1EE4initEfff ; -- Begin function _ZN8AdaDeltaILi10ELi1ELi1ELi1EE4initEfff
	.weak_definition	__ZN8AdaDeltaILi10ELi1ELi1ELi1EE4initEfff
	.p2align	2
__ZN8AdaDeltaILi10ELi1ELi1ELi1EE4initEfff: ; @_ZN8AdaDeltaILi10ELi1ELi1ELi1EE4initEfff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	s1, [x29, #-16]
	stur	s2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w9, [x29, #-12]
	str	w9, [x8, #176]
	ldur	w9, [x29, #-16]
	str	w9, [x8, #180]
	ldur	w9, [x29, #-20]
	str	w9, [x8, #184]
	add	x0, x8, #44
	mov	w1, #10
	str	w1, [sp, #24]                   ; 4-byte Folded Spill
	movi	d0, #0000000000000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE10init_constEif
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE10init_constEif
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #88
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #132
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #128
	cset	w8, le
	tbnz	w8, #0, LBB250_2
	b	LBB250_1
LBB250_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB250_2:
	b	LBB250_3
LBB250_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	mov	x10, #40
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #12]
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #10
	cset	w8, le
	tbnz	w8, #0, LBB252_2
	b	LBB252_1
LBB252_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB252_2:
	b	LBB252_3
LBB252_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE10init_constEif ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE10init_constEif
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE10init_constEif
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE10init_constEif: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=128 N1=1 N2=1 N3=10
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB254_1
LBB254_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB254_3 Depth 2
                                        ;       Child Loop BB254_5 Depth 3
                                        ;         Child Loop BB254_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB254_16
	b	LBB254_2
LBB254_2:                               ;   in Loop: Header=BB254_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB254_3
LBB254_3:                               ;   Parent Loop BB254_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB254_5 Depth 3
                                        ;         Child Loop BB254_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB254_14
	b	LBB254_4
LBB254_4:                               ;   in Loop: Header=BB254_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB254_5
LBB254_5:                               ;   Parent Loop BB254_1 Depth=1
                                        ;     Parent Loop BB254_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB254_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB254_12
	b	LBB254_6
LBB254_6:                               ;   in Loop: Header=BB254_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB254_7
LBB254_7:                               ;   Parent Loop BB254_1 Depth=1
                                        ;     Parent Loop BB254_3 Depth=2
                                        ;       Parent Loop BB254_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB254_10
	b	LBB254_8
LBB254_8:                               ;   in Loop: Header=BB254_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB254_9
LBB254_9:                               ;   in Loop: Header=BB254_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB254_7
LBB254_10:                              ;   in Loop: Header=BB254_5 Depth=3
	b	LBB254_11
LBB254_11:                              ;   in Loop: Header=BB254_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB254_5
LBB254_12:                              ;   in Loop: Header=BB254_3 Depth=2
	b	LBB254_13
LBB254_13:                              ;   in Loop: Header=BB254_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB254_3
LBB254_14:                              ;   in Loop: Header=BB254_1 Depth=1
	b	LBB254_15
LBB254_15:                              ;   in Loop: Header=BB254_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB254_1
LBB254_16:
	; InlineAsm Start
	; init_const ends N0=128 N1=1 N2=1 N3=10
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE10init_constEif ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE10init_constEif
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE10init_constEif
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE10init_constEif: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=10 N1=1 N2=1 N3=1
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB255_1
LBB255_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB255_3 Depth 2
                                        ;       Child Loop BB255_5 Depth 3
                                        ;         Child Loop BB255_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB255_16
	b	LBB255_2
LBB255_2:                               ;   in Loop: Header=BB255_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB255_3
LBB255_3:                               ;   Parent Loop BB255_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB255_5 Depth 3
                                        ;         Child Loop BB255_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB255_14
	b	LBB255_4
LBB255_4:                               ;   in Loop: Header=BB255_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB255_5
LBB255_5:                               ;   Parent Loop BB255_1 Depth=1
                                        ;     Parent Loop BB255_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB255_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB255_12
	b	LBB255_6
LBB255_6:                               ;   in Loop: Header=BB255_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB255_7
LBB255_7:                               ;   Parent Loop BB255_1 Depth=1
                                        ;     Parent Loop BB255_3 Depth=2
                                        ;       Parent Loop BB255_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB255_10
	b	LBB255_8
LBB255_8:                               ;   in Loop: Header=BB255_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB255_9
LBB255_9:                               ;   in Loop: Header=BB255_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB255_7
LBB255_10:                              ;   in Loop: Header=BB255_5 Depth=3
	b	LBB255_11
LBB255_11:                              ;   in Loop: Header=BB255_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB255_5
LBB255_12:                              ;   in Loop: Header=BB255_3 Depth=2
	b	LBB255_13
LBB255_13:                              ;   in Loop: Header=BB255_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB255_3
LBB255_14:                              ;   in Loop: Header=BB255_1 Depth=1
	b	LBB255_15
LBB255_15:                              ;   in Loop: Header=BB255_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB255_1
LBB255_16:
	; InlineAsm Start
	; init_const ends N0=10 N1=1 N2=1 N3=1
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB256_2
	b	LBB256_1
LBB256_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB256_2:
	b	LBB256_3
LBB256_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii: ; @_ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #9
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB258_2
	b	LBB258_1
LBB258_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB258_2:
	b	LBB258_3
LBB258_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii: ; @_ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	mov	x10, #40
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE4add_EfRS0_: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB260_2
	b	LBB260_1
LBB260_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB260_2:
	b	LBB260_3
LBB260_3:
	str	wzr, [sp, #28]
	b	LBB260_4
LBB260_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB260_6 Depth 2
                                        ;       Child Loop BB260_8 Depth 3
                                        ;         Child Loop BB260_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB260_19
	b	LBB260_5
LBB260_5:                               ;   in Loop: Header=BB260_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB260_6
LBB260_6:                               ;   Parent Loop BB260_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB260_8 Depth 3
                                        ;         Child Loop BB260_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB260_17
	b	LBB260_7
LBB260_7:                               ;   in Loop: Header=BB260_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB260_8
LBB260_8:                               ;   Parent Loop BB260_4 Depth=1
                                        ;     Parent Loop BB260_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB260_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB260_15
	b	LBB260_9
LBB260_9:                               ;   in Loop: Header=BB260_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB260_10
LBB260_10:                              ;   Parent Loop BB260_4 Depth=1
                                        ;     Parent Loop BB260_6 Depth=2
                                        ;       Parent Loop BB260_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB260_13
	b	LBB260_11
LBB260_11:                              ;   in Loop: Header=BB260_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB260_12
LBB260_12:                              ;   in Loop: Header=BB260_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB260_10
LBB260_13:                              ;   in Loop: Header=BB260_8 Depth=3
	b	LBB260_14
LBB260_14:                              ;   in Loop: Header=BB260_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB260_8
LBB260_15:                              ;   in Loop: Header=BB260_6 Depth=2
	b	LBB260_16
LBB260_16:                              ;   in Loop: Header=BB260_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB260_6
LBB260_17:                              ;   in Loop: Header=BB260_4 Depth=1
	b	LBB260_18
LBB260_18:                              ;   in Loop: Header=BB260_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB260_4
LBB260_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE4add_EfRS0_: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB261_2
	b	LBB261_1
LBB261_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB261_2:
	b	LBB261_3
LBB261_3:
	str	wzr, [sp, #28]
	b	LBB261_4
LBB261_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB261_6 Depth 2
                                        ;       Child Loop BB261_8 Depth 3
                                        ;         Child Loop BB261_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB261_19
	b	LBB261_5
LBB261_5:                               ;   in Loop: Header=BB261_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB261_6
LBB261_6:                               ;   Parent Loop BB261_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB261_8 Depth 3
                                        ;         Child Loop BB261_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB261_17
	b	LBB261_7
LBB261_7:                               ;   in Loop: Header=BB261_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB261_8
LBB261_8:                               ;   Parent Loop BB261_4 Depth=1
                                        ;     Parent Loop BB261_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB261_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB261_15
	b	LBB261_9
LBB261_9:                               ;   in Loop: Header=BB261_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB261_10
LBB261_10:                              ;   Parent Loop BB261_4 Depth=1
                                        ;     Parent Loop BB261_6 Depth=2
                                        ;       Parent Loop BB261_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB261_13
	b	LBB261_11
LBB261_11:                              ;   in Loop: Header=BB261_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB261_12
LBB261_12:                              ;   in Loop: Header=BB261_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB261_10
LBB261_13:                              ;   in Loop: Header=BB261_8 Depth=3
	b	LBB261_14
LBB261_14:                              ;   in Loop: Header=BB261_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB261_8
LBB261_15:                              ;   in Loop: Header=BB261_6 Depth=2
	b	LBB261_16
LBB261_16:                              ;   in Loop: Header=BB261_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB261_6
LBB261_17:                              ;   in Loop: Header=BB261_4 Depth=1
	b	LBB261_18
LBB261_18:                              ;   in Loop: Header=BB261_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB261_4
LBB261_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #96]             ; 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	mov	x9, #5304
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x9, #128]
	stur	wzr, [x29, #-28]
	b	LBB262_1
LBB262_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB262_3 Depth 2
                                        ;       Child Loop BB262_5 Depth 3
                                        ;         Child Loop BB262_7 Depth 4
                                        ;           Child Loop BB262_9 Depth 5
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB262_21
	b	LBB262_2
LBB262_2:                               ;   in Loop: Header=BB262_1 Depth=1
	stur	wzr, [x29, #-32]
	b	LBB262_3
LBB262_3:                               ;   Parent Loop BB262_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB262_5 Depth 3
                                        ;         Child Loop BB262_7 Depth 4
                                        ;           Child Loop BB262_9 Depth 5
	ldur	w8, [x29, #-32]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB262_19
	b	LBB262_4
LBB262_4:                               ;   in Loop: Header=BB262_3 Depth=2
	movi	d0, #0000000000000000
	stur	s0, [x29, #-36]
	ldur	x8, [x29, #-16]
	str	x8, [sp, #48]
	str	wzr, [sp, #40]
	str	s0, [sp, #32]
	b	LBB262_5
LBB262_5:                               ;   Parent Loop BB262_1 Depth=1
                                        ;     Parent Loop BB262_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB262_7 Depth 4
                                        ;           Child Loop BB262_9 Depth 5
	ldr	w8, [sp, #40]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB262_17
	b	LBB262_6
LBB262_6:                               ;   in Loop: Header=BB262_5 Depth=3
	ldr	w8, [sp, #40]
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #36]
	str	wzr, [sp, #28]
	b	LBB262_7
LBB262_7:                               ;   Parent Loop BB262_1 Depth=1
                                        ;     Parent Loop BB262_3 Depth=2
                                        ;       Parent Loop BB262_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB262_9 Depth 5
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB262_14
	b	LBB262_8
LBB262_8:                               ;   in Loop: Header=BB262_7 Depth=4
	str	wzr, [sp, #24]
	b	LBB262_9
LBB262_9:                               ;   Parent Loop BB262_1 Depth=1
                                        ;     Parent Loop BB262_3 Depth=2
                                        ;       Parent Loop BB262_5 Depth=3
                                        ;         Parent Loop BB262_7 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB262_12
	b	LBB262_10
LBB262_10:                              ;   in Loop: Header=BB262_9 Depth=5
	ldr	x0, [sp, #48]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #28]
	ldr	w3, [sp, #24]
	ldur	w4, [x29, #-32]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #32]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #32]
	b	LBB262_11
LBB262_11:                              ;   in Loop: Header=BB262_9 Depth=5
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB262_9
LBB262_12:                              ;   in Loop: Header=BB262_7 Depth=4
	b	LBB262_13
LBB262_13:                              ;   in Loop: Header=BB262_7 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB262_7
LBB262_14:                              ;   in Loop: Header=BB262_5 Depth=3
	b	LBB262_15
LBB262_15:                              ;   in Loop: Header=BB262_5 Depth=3
	b	LBB262_16
LBB262_16:                              ;   in Loop: Header=BB262_5 Depth=3
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB262_5
LBB262_17:                              ;   in Loop: Header=BB262_3 Depth=2
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	w9, #128
	str	w9, [sp, #36]
	ldur	s0, [x29, #-36]
	ldr	s1, [sp, #32]
	fadd	s0, s0, s1
	stur	s0, [x29, #-36]
	ldur	s0, [x29, #-36]
	str	s0, [sp]                        ; 4-byte Folded Spill
	mov	x9, #5260
	add	x0, x8, x9
	ldur	w1, [x29, #-32]
	mov	w4, #0
	str	w4, [sp, #4]                    ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp]                        ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #5304
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB262_18
LBB262_18:                              ;   in Loop: Header=BB262_3 Depth=2
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB262_3
LBB262_19:                              ;   in Loop: Header=BB262_1 Depth=1
	b	LBB262_20
LBB262_20:                              ;   in Loop: Header=BB262_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB262_1
LBB262_21:
	.cfi_def_cfa wsp, 112
	ldp	x29, x30, [sp, #96]             ; 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE15forward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE15forward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE15forward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE15forward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE15forward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	sub	x10, x29, #24
	str	x10, [sp, #24]                  ; 8-byte Folded Spill
	stur	w9, [x29, #-24]
	mov	x9, #5304
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei
	ldr	x11, [sp, #24]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldur	x9, [x29, #-16]
	str	x9, [x8, #128]
	ldur	x10, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_13@PAGE
	add	x0, x0, l___unnamed_13@PAGEOFF
	mov	w1, #3
	adrp	x2, _.omp_outlined..142@PAGE
	add	x2, x2, _.omp_outlined..142@PAGEOFF
	bl	___kmpc_fork_call
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.143@PAGE
	add	x0, x0, l_.str.143@PAGEOFF
	mov	w1, #294
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..142
_.omp_outlined..142:                    ; @.omp_outlined..142
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	stp	x29, x30, [sp, #192]            ; 16-byte Folded Spill
	add	x29, sp, #192
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	sub	x8, x29, #8
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	str	x0, [x8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	ldur	x8, [x29, #-24]
	ldur	x9, [x29, #-32]
	ldur	x10, [x29, #-40]
	str	x10, [sp, #40]                  ; 8-byte Folded Spill
	stur	x9, [x29, #-48]
	ldr	w8, [x8]
	stur	w8, [x29, #-68]
	ldur	w9, [x29, #-68]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w9, w9, w10
	mov	w10, #10
	smull	x9, w9, w10
	subs	x9, x9, #1
	stur	x9, [x29, #-80]
	stur	wzr, [x29, #-84]
	stur	wzr, [x29, #-88]
	ldur	w9, [x29, #-68]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB266_23
	b	LBB266_1
LBB266_1:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	add	x4, sp, #96
	str	xzr, [sp, #96]
	ldur	x9, [x29, #-80]
	add	x5, sp, #88
	str	x9, [sp, #88]
	add	x6, sp, #80
	mov	x7, #1
	str	x7, [sp, #80]
	add	x3, sp, #76
	str	wzr, [sp, #76]
	ldr	x8, [x8]
	ldr	w1, [x8]
	mov	x8, sp
	str	x7, [x8]
	adrp	x0, l___unnamed_14@PAGE
	add	x0, x0, l___unnamed_14@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_8
	ldr	x8, [sp, #88]
	ldur	x9, [x29, #-80]
	subs	x8, x8, x9
	cset	w8, le
	tbnz	w8, #0, LBB266_3
	b	LBB266_2
LBB266_2:
	ldur	x8, [x29, #-80]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB266_4
LBB266_3:
	ldr	x8, [sp, #88]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB266_4
LBB266_4:
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	str	x8, [sp, #88]
	ldr	x8, [sp, #96]
	stur	x8, [x29, #-56]
	b	LBB266_5
LBB266_5:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB266_7 Depth 2
                                        ;       Child Loop BB266_9 Depth 3
                                        ;         Child Loop BB266_11 Depth 4
	ldur	x8, [x29, #-56]
	ldr	x9, [sp, #88]
	subs	x8, x8, x9
	cset	w8, gt
	tbnz	w8, #0, LBB266_21
	b	LBB266_6
LBB266_6:                               ;   in Loop: Header=BB266_5 Depth=1
	ldur	x8, [x29, #-56]
	mov	x10, #10
	sdiv	x8, x8, x10
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #72]
	ldur	x8, [x29, #-56]
	ldur	x9, [x29, #-56]
	sdiv	x9, x9, x10
	mul	x9, x9, x10
	subs	x8, x8, x9
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #68]
	movi	d0, #0000000000000000
	str	s0, [sp, #64]
	str	wzr, [sp, #60]
	b	LBB266_7
LBB266_7:                               ;   Parent Loop BB266_5 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB266_9 Depth 3
                                        ;         Child Loop BB266_11 Depth 4
	ldr	w8, [sp, #60]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB266_18
	b	LBB266_8
LBB266_8:                               ;   in Loop: Header=BB266_7 Depth=2
	str	wzr, [sp, #56]
	b	LBB266_9
LBB266_9:                               ;   Parent Loop BB266_5 Depth=1
                                        ;     Parent Loop BB266_7 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB266_11 Depth 4
	ldr	w8, [sp, #56]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB266_16
	b	LBB266_10
LBB266_10:                              ;   in Loop: Header=BB266_9 Depth=3
	str	wzr, [sp, #52]
	b	LBB266_11
LBB266_11:                              ;   Parent Loop BB266_5 Depth=1
                                        ;     Parent Loop BB266_7 Depth=2
                                        ;       Parent Loop BB266_9 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB266_14
	b	LBB266_12
LBB266_12:                              ;   in Loop: Header=BB266_11 Depth=4
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #60]
	ldr	w3, [sp, #56]
	ldr	w4, [sp, #52]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #60]
	ldr	w2, [sp, #56]
	ldr	w3, [sp, #52]
	ldr	w4, [sp, #68]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #64]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #64]
	b	LBB266_13
LBB266_13:                              ;   in Loop: Header=BB266_11 Depth=4
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB266_11
LBB266_14:                              ;   in Loop: Header=BB266_9 Depth=3
	b	LBB266_15
LBB266_15:                              ;   in Loop: Header=BB266_9 Depth=3
	ldr	w8, [sp, #56]
	add	w8, w8, #1
	str	w8, [sp, #56]
	b	LBB266_9
LBB266_16:                              ;   in Loop: Header=BB266_7 Depth=2
	b	LBB266_17
LBB266_17:                              ;   in Loop: Header=BB266_7 Depth=2
	ldr	w8, [sp, #60]
	add	w8, w8, #1
	str	w8, [sp, #60]
	b	LBB266_7
LBB266_18:                              ;   in Loop: Header=BB266_5 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	s0, [sp, #64]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #5260
	add	x0, x8, x9
	ldr	w1, [sp, #68]
	mov	w4, #0
	str	w4, [sp, #12]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #5304
	add	x0, x8, x9
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #68]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #16]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB266_19
LBB266_19:                              ;   in Loop: Header=BB266_5 Depth=1
	b	LBB266_20
LBB266_20:                              ;   in Loop: Header=BB266_5 Depth=1
	ldur	x8, [x29, #-56]
	add	x8, x8, #1
	stur	x8, [x29, #-56]
	b	LBB266_5
LBB266_21:
	b	LBB266_22
LBB266_22:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x8, [x8]
	ldr	w1, [x8]
	adrp	x0, l___unnamed_15@PAGE
	add	x0, x0, l___unnamed_15@PAGEOFF
	bl	___kmpc_for_static_fini
	b	LBB266_23
LBB266_23:
	.cfi_def_cfa wsp, 208
	ldp	x29, x30, [sp, #192]            ; 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	mov	x9, #5304
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei
	ldr	x9, [sp, #24]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x9, #128]
	stur	wzr, [x29, #-28]
	b	LBB267_1
LBB267_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB267_3 Depth 2
                                        ;       Child Loop BB267_5 Depth 3
                                        ;         Child Loop BB267_7 Depth 4
                                        ;           Child Loop BB267_9 Depth 5
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB267_20
	b	LBB267_2
LBB267_2:                               ;   in Loop: Header=BB267_1 Depth=1
	stur	wzr, [x29, #-32]
	b	LBB267_3
LBB267_3:                               ;   Parent Loop BB267_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB267_5 Depth 3
                                        ;         Child Loop BB267_7 Depth 4
                                        ;           Child Loop BB267_9 Depth 5
	ldur	w8, [x29, #-32]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB267_18
	b	LBB267_4
LBB267_4:                               ;   in Loop: Header=BB267_3 Depth=2
	movi	d0, #0000000000000000
	stur	s0, [x29, #-36]
	str	wzr, [sp, #40]
	b	LBB267_5
LBB267_5:                               ;   Parent Loop BB267_1 Depth=1
                                        ;     Parent Loop BB267_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB267_7 Depth 4
                                        ;           Child Loop BB267_9 Depth 5
	ldr	w8, [sp, #40]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB267_16
	b	LBB267_6
LBB267_6:                               ;   in Loop: Header=BB267_5 Depth=3
	str	wzr, [sp, #36]
	b	LBB267_7
LBB267_7:                               ;   Parent Loop BB267_1 Depth=1
                                        ;     Parent Loop BB267_3 Depth=2
                                        ;       Parent Loop BB267_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB267_9 Depth 5
	ldr	w8, [sp, #36]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB267_14
	b	LBB267_8
LBB267_8:                               ;   in Loop: Header=BB267_7 Depth=4
	str	wzr, [sp, #32]
	b	LBB267_9
LBB267_9:                               ;   Parent Loop BB267_1 Depth=1
                                        ;     Parent Loop BB267_3 Depth=2
                                        ;       Parent Loop BB267_5 Depth=3
                                        ;         Parent Loop BB267_7 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB267_12
	b	LBB267_10
LBB267_10:                              ;   in Loop: Header=BB267_9 Depth=5
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #40]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #32]
	ldur	w4, [x29, #-32]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldur	s2, [x29, #-36]
	fmadd	s0, s0, s1, s2
	stur	s0, [x29, #-36]
	b	LBB267_11
LBB267_11:                              ;   in Loop: Header=BB267_9 Depth=5
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB267_9
LBB267_12:                              ;   in Loop: Header=BB267_7 Depth=4
	b	LBB267_13
LBB267_13:                              ;   in Loop: Header=BB267_7 Depth=4
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB267_7
LBB267_14:                              ;   in Loop: Header=BB267_5 Depth=3
	b	LBB267_15
LBB267_15:                              ;   in Loop: Header=BB267_5 Depth=3
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB267_5
LBB267_16:                              ;   in Loop: Header=BB267_3 Depth=2
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldur	s0, [x29, #-36]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #5260
	add	x0, x8, x9
	ldur	w1, [x29, #-32]
	mov	w4, #0
	str	w4, [sp, #12]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #5304
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #16]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB267_17
LBB267_17:                              ;   in Loop: Header=BB267_3 Depth=2
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB267_3
LBB267_18:                              ;   in Loop: Header=BB267_1 Depth=1
	b	LBB267_19
LBB267_19:                              ;   in Loop: Header=BB267_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB267_1
LBB267_20:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_simdER6tensorIfLi64ELi10ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_simdER6tensorIfLi64ELi10ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_simdER6tensorIfLi64ELi10ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_simdER6tensorIfLi64ELi10ELi1ELi1EE: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_simdER6tensorIfLi64ELi10ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	x29, x30, [sp, #224]            ; 16-byte Folded Spill
	add	x29, sp, #224
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #7868
	add	x0, x8, x9
	mov	w1, #128
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #12992
	add	x0, x8, x9
	mov	w1, #10
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #13036
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #128]
	stur	x8, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB268_1
LBB268_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB268_3 Depth 2
                                        ;       Child Loop BB268_5 Depth 3
                                        ;         Child Loop BB268_7 Depth 4
                                        ;           Child Loop BB268_10 Depth 5
	ldur	w8, [x29, #-36]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB268_23
	b	LBB268_2
LBB268_2:                               ;   in Loop: Header=BB268_1 Depth=1
	stur	wzr, [x29, #-40]
	b	LBB268_3
LBB268_3:                               ;   Parent Loop BB268_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB268_5 Depth 3
                                        ;         Child Loop BB268_7 Depth 4
                                        ;           Child Loop BB268_10 Depth 5
	ldur	w8, [x29, #-40]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB268_21
	b	LBB268_4
LBB268_4:                               ;   in Loop: Header=BB268_3 Depth=2
	stur	wzr, [x29, #-44]
	b	LBB268_5
LBB268_5:                               ;   Parent Loop BB268_1 Depth=1
                                        ;     Parent Loop BB268_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB268_7 Depth 4
                                        ;           Child Loop BB268_10 Depth 5
	ldur	w8, [x29, #-44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB268_19
	b	LBB268_6
LBB268_6:                               ;   in Loop: Header=BB268_5 Depth=3
	stur	wzr, [x29, #-48]
	b	LBB268_7
LBB268_7:                               ;   Parent Loop BB268_1 Depth=1
                                        ;     Parent Loop BB268_3 Depth=2
                                        ;       Parent Loop BB268_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB268_10 Depth 5
	ldur	w8, [x29, #-48]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB268_17
	b	LBB268_8
LBB268_8:                               ;   in Loop: Header=BB268_7 Depth=4
	movi	d0, #0000000000000000
	stur	s0, [x29, #-52]
	; InlineAsm Start
	; ========== (backward_cpu_simd A) loop begins ==========
	; InlineAsm End
	ldur	x8, [x29, #-16]
	stur	x8, [x29, #-64]
	ldur	x8, [x29, #-32]
	stur	x8, [x29, #-72]
	ldur	w8, [x29, #-20]
	stur	w8, [x29, #-80]
	ldur	w9, [x29, #-80]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w9, w9, w10
	subs	w9, w9, #1
	stur	w9, [x29, #-84]
	stur	wzr, [x29, #-88]
	ldur	w9, [x29, #-80]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB268_15
	b	LBB268_9
LBB268_9:                               ;   in Loop: Header=BB268_7 Depth=4
	stur	wzr, [x29, #-92]
	movi	d0, #0000000000000000
	stur	s0, [x29, #-100]
	b	LBB268_10
LBB268_10:                              ;   Parent Loop BB268_1 Depth=1
                                        ;     Parent Loop BB268_3 Depth=2
                                        ;       Parent Loop BB268_5 Depth=3
                                        ;         Parent Loop BB268_7 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldur	w8, [x29, #-92]
	ldur	w9, [x29, #-84]
	add	w9, w9, #1
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB268_14
	b	LBB268_11
LBB268_11:                              ;   in Loop: Header=BB268_10 Depth=5
	ldur	w8, [x29, #-92]
	lsr	w8, w8, #0
	mov	w4, #0
	add	w8, w8, #0
	stur	w8, [x29, #-96]
	ldur	x0, [x29, #-64]
	ldur	w1, [x29, #-96]
	ldur	w2, [x29, #-48]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldur	w1, [x29, #-96]
	ldur	w2, [x29, #-36]
	ldur	w3, [x29, #-40]
	ldur	w4, [x29, #-44]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldur	s2, [x29, #-100]
	fmadd	s0, s0, s1, s2
	stur	s0, [x29, #-100]
	b	LBB268_12
LBB268_12:                              ;   in Loop: Header=BB268_10 Depth=5
	b	LBB268_13
LBB268_13:                              ;   in Loop: Header=BB268_10 Depth=5
	ldur	w8, [x29, #-92]
	add	w8, w8, #1
	stur	w8, [x29, #-92]
	b	LBB268_10
LBB268_14:                              ;   in Loop: Header=BB268_7 Depth=4
	ldur	w8, [x29, #-80]
	subs	w8, w8, #0
	mov	w9, #1
	sdiv	w8, w8, w9
	lsr	w8, w8, #0
	add	w8, w8, #0
	stur	w8, [x29, #-96]
	ldur	s0, [x29, #-52]
	ldur	s1, [x29, #-100]
	fadd	s0, s0, s1
	stur	s0, [x29, #-52]
	b	LBB268_15
LBB268_15:                              ;   in Loop: Header=BB268_7 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	; InlineAsm Start
	; ========== (backward_cpu_simd A) loop ends ==========
	; InlineAsm End
	ldur	w9, [x29, #-52]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #7868
	add	x0, x8, x9
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-40]
	ldur	w3, [x29, #-44]
	ldur	w4, [x29, #-48]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB268_16
LBB268_16:                              ;   in Loop: Header=BB268_7 Depth=4
	ldur	w8, [x29, #-48]
	add	w8, w8, #1
	stur	w8, [x29, #-48]
	b	LBB268_7
LBB268_17:                              ;   in Loop: Header=BB268_5 Depth=3
	b	LBB268_18
LBB268_18:                              ;   in Loop: Header=BB268_5 Depth=3
	ldur	w8, [x29, #-44]
	add	w8, w8, #1
	stur	w8, [x29, #-44]
	b	LBB268_5
LBB268_19:                              ;   in Loop: Header=BB268_3 Depth=2
	b	LBB268_20
LBB268_20:                              ;   in Loop: Header=BB268_3 Depth=2
	ldur	w8, [x29, #-40]
	add	w8, w8, #1
	stur	w8, [x29, #-40]
	b	LBB268_3
LBB268_21:                              ;   in Loop: Header=BB268_1 Depth=1
	b	LBB268_22
LBB268_22:                              ;   in Loop: Header=BB268_1 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB268_1
LBB268_23:
	stur	wzr, [x29, #-104]
	b	LBB268_24
LBB268_24:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB268_27 Depth 2
	ldur	w8, [x29, #-104]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB268_34
	b	LBB268_25
LBB268_25:                              ;   in Loop: Header=BB268_24 Depth=1
	movi	d0, #0000000000000000
	stur	s0, [x29, #-108]
	; InlineAsm Start
	; ========== (backward_cpu_simd B) loop begins ==========
	; InlineAsm End
	ldur	x8, [x29, #-16]
	str	x8, [sp, #104]
	ldur	w8, [x29, #-20]
	str	w8, [sp, #96]
	ldr	w9, [sp, #96]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w9, w9, w10
	subs	w9, w9, #1
	str	w9, [sp, #92]
	str	wzr, [sp, #88]
	ldr	w9, [sp, #96]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB268_32
	b	LBB268_26
LBB268_26:                              ;   in Loop: Header=BB268_24 Depth=1
	str	wzr, [sp, #84]
	movi	d0, #0000000000000000
	str	s0, [sp, #76]
	b	LBB268_27
LBB268_27:                              ;   Parent Loop BB268_24 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #84]
	ldr	w9, [sp, #92]
	add	w9, w9, #1
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB268_31
	b	LBB268_28
LBB268_28:                              ;   in Loop: Header=BB268_27 Depth=2
	ldr	w8, [sp, #84]
	lsr	w8, w8, #0
	mov	w4, #0
	add	w8, w8, #0
	str	w8, [sp, #80]
	ldr	x0, [sp, #104]
	ldr	w1, [sp, #80]
	ldur	w2, [x29, #-104]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s1, [x0]
	ldr	s0, [sp, #76]
	fadd	s0, s0, s1
	str	s0, [sp, #76]
	b	LBB268_29
LBB268_29:                              ;   in Loop: Header=BB268_27 Depth=2
	b	LBB268_30
LBB268_30:                              ;   in Loop: Header=BB268_27 Depth=2
	ldr	w8, [sp, #84]
	add	w8, w8, #1
	str	w8, [sp, #84]
	b	LBB268_27
LBB268_31:                              ;   in Loop: Header=BB268_24 Depth=1
	ldr	w8, [sp, #96]
	subs	w8, w8, #0
	mov	w9, #1
	sdiv	w8, w8, w9
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #80]
	ldur	s0, [x29, #-108]
	ldr	s1, [sp, #76]
	fadd	s0, s0, s1
	stur	s0, [x29, #-108]
	b	LBB268_32
LBB268_32:                              ;   in Loop: Header=BB268_24 Depth=1
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	; InlineAsm Start
	; ========== (backward_cpu_simd B) loop ends ==========
	; InlineAsm End
	ldur	w9, [x29, #-108]
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #12992
	add	x0, x8, x9
	ldur	w1, [x29, #-104]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB268_33
LBB268_33:                              ;   in Loop: Header=BB268_24 Depth=1
	ldur	w8, [x29, #-104]
	add	w8, w8, #1
	stur	w8, [x29, #-104]
	b	LBB268_24
LBB268_34:
	str	wzr, [sp, #72]
	b	LBB268_35
LBB268_35:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB268_37 Depth 2
                                        ;       Child Loop BB268_39 Depth 3
                                        ;         Child Loop BB268_41 Depth 4
                                        ;           Child Loop BB268_43 Depth 5
	ldr	w8, [sp, #72]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB268_55
	b	LBB268_36
LBB268_36:                              ;   in Loop: Header=BB268_35 Depth=1
	str	wzr, [sp, #68]
	b	LBB268_37
LBB268_37:                              ;   Parent Loop BB268_35 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB268_39 Depth 3
                                        ;         Child Loop BB268_41 Depth 4
                                        ;           Child Loop BB268_43 Depth 5
	ldr	w8, [sp, #68]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB268_53
	b	LBB268_38
LBB268_38:                              ;   in Loop: Header=BB268_37 Depth=2
	str	wzr, [sp, #64]
	b	LBB268_39
LBB268_39:                              ;   Parent Loop BB268_35 Depth=1
                                        ;     Parent Loop BB268_37 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB268_41 Depth 4
                                        ;           Child Loop BB268_43 Depth 5
	ldr	w8, [sp, #64]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB268_51
	b	LBB268_40
LBB268_40:                              ;   in Loop: Header=BB268_39 Depth=3
	str	wzr, [sp, #60]
	b	LBB268_41
LBB268_41:                              ;   Parent Loop BB268_35 Depth=1
                                        ;     Parent Loop BB268_37 Depth=2
                                        ;       Parent Loop BB268_39 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB268_43 Depth 5
	ldr	w8, [sp, #60]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB268_49
	b	LBB268_42
LBB268_42:                              ;   in Loop: Header=BB268_41 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #56]
	; InlineAsm Start
	; ========== (backward_cpu_simd C) loop begins ==========
	; InlineAsm End
	ldur	x8, [x29, #-16]
	str	x8, [sp, #48]
	str	wzr, [sp, #40]
	str	s0, [sp, #32]
	b	LBB268_43
LBB268_43:                              ;   Parent Loop BB268_35 Depth=1
                                        ;     Parent Loop BB268_37 Depth=2
                                        ;       Parent Loop BB268_39 Depth=3
                                        ;         Parent Loop BB268_41 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldr	w8, [sp, #40]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB268_47
	b	LBB268_44
LBB268_44:                              ;   in Loop: Header=BB268_43 Depth=5
	ldr	w8, [sp, #40]
	lsr	w8, w8, #0
	mov	w4, #0
	add	w8, w8, #0
	str	w8, [sp, #36]
	ldr	x0, [sp, #48]
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #36]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #68]
	ldr	w2, [sp, #64]
	ldr	w3, [sp, #60]
	ldr	w4, [sp, #36]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #32]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #32]
	b	LBB268_45
LBB268_45:                              ;   in Loop: Header=BB268_43 Depth=5
	b	LBB268_46
LBB268_46:                              ;   in Loop: Header=BB268_43 Depth=5
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB268_43
LBB268_47:                              ;   in Loop: Header=BB268_41 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	w9, #10
	str	w9, [sp, #36]
	ldr	s0, [sp, #56]
	ldr	s1, [sp, #32]
	fadd	s0, s0, s1
	str	s0, [sp, #56]
	; InlineAsm Start
	; ========== (backward_cpu_simd C) loop ends ==========
	; InlineAsm End
	ldr	w9, [sp, #56]
	str	w9, [sp, #4]                    ; 4-byte Folded Spill
	mov	x9, #13036
	add	x0, x8, x9
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #64]
	ldr	w4, [sp, #60]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	w8, [sp, #4]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB268_48
LBB268_48:                              ;   in Loop: Header=BB268_41 Depth=4
	ldr	w8, [sp, #60]
	add	w8, w8, #1
	str	w8, [sp, #60]
	b	LBB268_41
LBB268_49:                              ;   in Loop: Header=BB268_39 Depth=3
	b	LBB268_50
LBB268_50:                              ;   in Loop: Header=BB268_39 Depth=3
	ldr	w8, [sp, #64]
	add	w8, w8, #1
	str	w8, [sp, #64]
	b	LBB268_39
LBB268_51:                              ;   in Loop: Header=BB268_37 Depth=2
	b	LBB268_52
LBB268_52:                              ;   in Loop: Header=BB268_37 Depth=2
	ldr	w8, [sp, #68]
	add	w8, w8, #1
	str	w8, [sp, #68]
	b	LBB268_37
LBB268_53:                              ;   in Loop: Header=BB268_35 Depth=1
	b	LBB268_54
LBB268_54:                              ;   in Loop: Header=BB268_35 Depth=1
	ldr	w8, [sp, #72]
	add	w8, w8, #1
	str	w8, [sp, #72]
	b	LBB268_35
LBB268_55:
	.cfi_def_cfa wsp, 240
	ldp	x29, x30, [sp, #224]            ; 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16backward_cpu_ompER6tensorIfLi64ELi10ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE16backward_cpu_ompER6tensorIfLi64ELi10ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16backward_cpu_ompER6tensorIfLi64ELi10ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16backward_cpu_ompER6tensorIfLi64ELi10ELi1ELi1EE: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE16backward_cpu_ompER6tensorIfLi64ELi10ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #96]             ; 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	sub	x10, x29, #20
	str	x10, [sp, #40]                  ; 8-byte Folded Spill
	stur	w9, [x29, #-20]
	mov	x9, #7868
	add	x0, x8, x9
	mov	w1, #128
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	mov	x9, #12992
	add	x0, x8, x9
	mov	w1, #10
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	mov	x9, #13036
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x12, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x9, [x8, #128]
	stur	x9, [x29, #-32]
	ldur	x11, [x29, #-16]
	ldur	x10, [x29, #-32]
	mov	x9, sp
	str	x12, [x9]
	str	x11, [x9, #8]
	str	x10, [x9, #16]
	str	x8, [x9, #24]
	adrp	x0, l___unnamed_16@PAGE
	add	x0, x0, l___unnamed_16@PAGEOFF
	mov	w1, #4
	adrp	x2, _.omp_outlined..144@PAGE
	add	x2, x2, _.omp_outlined..144@PAGEOFF
	bl	___kmpc_fork_call
	ldr	x11, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldur	x10, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_17@PAGE
	add	x0, x0, l___unnamed_17@PAGEOFF
	mov	w1, #3
	stur	w1, [x29, #-36]                 ; 4-byte Folded Spill
	adrp	x2, _.omp_outlined..145@PAGE
	add	x2, x2, _.omp_outlined..145@PAGEOFF
	bl	___kmpc_fork_call
	ldr	x11, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldur	w1, [x29, #-36]                 ; 4-byte Folded Reload
	ldur	x10, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_18@PAGE
	add	x0, x0, l___unnamed_18@PAGEOFF
	adrp	x2, _.omp_outlined..146@PAGE
	add	x2, x2, _.omp_outlined..146@PAGEOFF
	bl	___kmpc_fork_call
	.cfi_def_cfa wsp, 112
	ldp	x29, x30, [sp, #96]             ; 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EE: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi10ELi1ELi1EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EE: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.143@PAGE
	add	x0, x0, l_.str.143@PAGEOFF
	mov	w1, #522
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..144
_.omp_outlined..144:                    ; @.omp_outlined..144
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #176]            ; 16-byte Folded Spill
	add	x29, sp, #176
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	stur	x5, [x29, #-48]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-32]
	ldur	x8, [x29, #-40]
	ldur	x10, [x29, #-48]
	str	x10, [sp, #40]                  ; 8-byte Folded Spill
	stur	x9, [x29, #-56]
	stur	x8, [x29, #-64]
	add	x4, sp, #88
	str	wzr, [sp, #88]
	add	x5, sp, #84
	mov	w8, #1279
	str	w8, [sp, #84]
	add	x6, sp, #80
	mov	w7, #1
	str	w7, [sp, #80]
	add	x3, sp, #76
	str	wzr, [sp, #76]
	ldur	x8, [x29, #-8]
	ldr	w1, [x8]
	str	w1, [sp, #48]                   ; 4-byte Folded Spill
	mov	x8, sp
	str	w7, [x8]
	adrp	x0, l___unnamed_19@PAGE
	add	x0, x0, l___unnamed_19@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_4
	ldr	w8, [sp, #84]
	subs	w8, w8, #1279
	cset	w8, le
	tbnz	w8, #0, LBB272_2
	b	LBB272_1
LBB272_1:
	mov	w8, #1279
	str	w8, [sp, #28]                   ; 4-byte Folded Spill
	b	LBB272_3
LBB272_2:
	ldr	w8, [sp, #84]
	str	w8, [sp, #28]                   ; 4-byte Folded Spill
	b	LBB272_3
LBB272_3:
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	str	w8, [sp, #84]
	ldr	w8, [sp, #88]
	stur	w8, [x29, #-68]
	b	LBB272_4
LBB272_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB272_6 Depth 2
	ldur	w8, [x29, #-68]
	ldr	w9, [sp, #84]
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB272_12
	b	LBB272_5
LBB272_5:                               ;   in Loop: Header=BB272_4 Depth=1
	ldur	w8, [x29, #-68]
	mov	w10, #10
	str	w10, [sp, #24]                  ; 4-byte Folded Spill
	sdiv	w8, w8, w10
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #72]
	ldur	w8, [x29, #-68]
	ldur	w9, [x29, #-68]
	sdiv	w9, w9, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	sdiv	w8, w8, w10
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #68]
	ldur	w8, [x29, #-68]
	ldur	w9, [x29, #-68]
	sdiv	w9, w9, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	ldur	w9, [x29, #-68]
	ldur	w11, [x29, #-68]
	sdiv	w11, w11, w10
	mul	w11, w11, w10
	subs	w9, w9, w11
	sdiv	w9, w9, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	sdiv	w8, w8, w10
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #64]
	ldur	w8, [x29, #-68]
	ldur	w9, [x29, #-68]
	sdiv	w9, w9, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	ldur	w9, [x29, #-68]
	ldur	w11, [x29, #-68]
	sdiv	w11, w11, w10
	mul	w11, w11, w10
	subs	w9, w9, w11
	sdiv	w9, w9, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	ldur	w9, [x29, #-68]
	ldur	w11, [x29, #-68]
	sdiv	w11, w11, w10
	mul	w11, w11, w10
	subs	w9, w9, w11
	ldur	w11, [x29, #-68]
	ldur	w12, [x29, #-68]
	sdiv	w12, w12, w10
	mul	w12, w12, w10
	subs	w11, w11, w12
	sdiv	w11, w11, w10
	mul	w11, w11, w10
	subs	w9, w9, w11
	sdiv	w9, w9, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #60]
	movi	d0, #0000000000000000
	str	s0, [sp, #56]
	str	wzr, [sp, #52]
	b	LBB272_6
LBB272_6:                               ;   Parent Loop BB272_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #52]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB272_9
	b	LBB272_7
LBB272_7:                               ;   in Loop: Header=BB272_6 Depth=2
	ldur	x0, [x29, #-56]
	ldr	w1, [sp, #52]
	ldr	w2, [sp, #60]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #52]
	ldr	w2, [sp, #72]
	ldr	w3, [sp, #68]
	ldr	w4, [sp, #64]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #56]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #56]
	b	LBB272_8
LBB272_8:                               ;   in Loop: Header=BB272_6 Depth=2
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB272_6
LBB272_9:                               ;   in Loop: Header=BB272_4 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #56]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #7868
	add	x0, x8, x9
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #64]
	ldr	w4, [sp, #60]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB272_10
LBB272_10:                              ;   in Loop: Header=BB272_4 Depth=1
	b	LBB272_11
LBB272_11:                              ;   in Loop: Header=BB272_4 Depth=1
	ldur	w8, [x29, #-68]
	add	w8, w8, #1
	stur	w8, [x29, #-68]
	b	LBB272_4
LBB272_12:
	b	LBB272_13
LBB272_13:
	ldr	w1, [sp, #48]                   ; 4-byte Folded Reload
	adrp	x0, l___unnamed_20@PAGE
	add	x0, x0, l___unnamed_20@PAGEOFF
	bl	___kmpc_for_static_fini
	.cfi_def_cfa wsp, 192
	ldp	x29, x30, [sp, #176]            ; 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..145
_.omp_outlined..145:                    ; @.omp_outlined..145
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #128]            ; 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-32]
	ldur	x9, [x29, #-40]
	str	x9, [sp, #32]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-48]
	sub	x4, x29, #60
	stur	wzr, [x29, #-60]
	add	x5, sp, #64
	mov	w8, #9
	str	w8, [sp, #64]
	add	x6, sp, #60
	mov	w7, #1
	str	w7, [sp, #60]
	add	x3, sp, #56
	str	wzr, [sp, #56]
	ldur	x8, [x29, #-8]
	ldr	w1, [x8]
	str	w1, [sp, #40]                   ; 4-byte Folded Spill
	mov	x8, sp
	str	w7, [x8]
	adrp	x0, l___unnamed_21@PAGE
	add	x0, x0, l___unnamed_21@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_4
	ldr	w8, [sp, #64]
	subs	w8, w8, #9
	cset	w8, le
	tbnz	w8, #0, LBB273_2
	b	LBB273_1
LBB273_1:
	mov	w8, #9
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	b	LBB273_3
LBB273_2:
	ldr	w8, [sp, #64]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	b	LBB273_3
LBB273_3:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	str	w8, [sp, #64]
	ldur	w8, [x29, #-60]
	stur	w8, [x29, #-52]
	b	LBB273_4
LBB273_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB273_6 Depth 2
	ldur	w8, [x29, #-52]
	ldr	w9, [sp, #64]
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB273_12
	b	LBB273_5
LBB273_5:                               ;   in Loop: Header=BB273_4 Depth=1
	ldur	w8, [x29, #-52]
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #52]
	movi	d0, #0000000000000000
	str	s0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB273_6
LBB273_6:                               ;   Parent Loop BB273_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	x9, [sp, #24]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #44]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB273_9
	b	LBB273_7
LBB273_7:                               ;   in Loop: Header=BB273_6 Depth=2
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #44]
	ldr	w2, [sp, #52]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s1, [x0]
	ldr	s0, [sp, #48]
	fadd	s0, s0, s1
	str	s0, [sp, #48]
	b	LBB273_8
LBB273_8:                               ;   in Loop: Header=BB273_6 Depth=2
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB273_6
LBB273_9:                               ;   in Loop: Header=BB273_4 Depth=1
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #48]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #12992
	add	x0, x8, x9
	ldr	w1, [sp, #52]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB273_10
LBB273_10:                              ;   in Loop: Header=BB273_4 Depth=1
	b	LBB273_11
LBB273_11:                              ;   in Loop: Header=BB273_4 Depth=1
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB273_4
LBB273_12:
	b	LBB273_13
LBB273_13:
	ldr	w1, [sp, #40]                   ; 4-byte Folded Reload
	adrp	x0, l___unnamed_22@PAGE
	add	x0, x0, l___unnamed_22@PAGEOFF
	bl	___kmpc_for_static_fini
	.cfi_def_cfa wsp, 144
	ldp	x29, x30, [sp, #128]            ; 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..146
_.omp_outlined..146:                    ; @.omp_outlined..146
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, #208]            ; 16-byte Folded Spill
	add	x29, sp, #208
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	sub	x8, x29, #24
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	str	x0, [x8, #16]
	str	x1, [x8, #8]
	str	x2, [x8]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	ldr	x8, [x8]
	ldur	x9, [x29, #-32]
	ldur	x10, [x29, #-40]
	str	x10, [sp, #40]                  ; 8-byte Folded Spill
	stur	x9, [x29, #-48]
	ldr	w8, [x8]
	stur	w8, [x29, #-76]
	ldur	w9, [x29, #-76]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w10, w9, w10
                                        ; implicit-def: $x9
	mov	x9, x10
	sxtw	x9, w9
	lsl	x9, x9, #7
	lsr	x9, x9, #0
	lsr	x9, x9, #0
	subs	x9, x9, #1
	stur	x9, [x29, #-88]
	stur	wzr, [x29, #-92]
	stur	wzr, [x29, #-96]
	stur	wzr, [x29, #-100]
	str	wzr, [sp, #104]
	ldur	w9, [x29, #-76]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB274_15
	b	LBB274_1
LBB274_1:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	add	x4, sp, #96
	str	xzr, [sp, #96]
	ldur	x9, [x29, #-88]
	add	x5, sp, #88
	str	x9, [sp, #88]
	add	x6, sp, #80
	mov	x7, #1
	str	x7, [sp, #80]
	add	x3, sp, #76
	str	wzr, [sp, #76]
	ldr	x8, [x8, #16]
	ldr	w1, [x8]
	mov	x8, sp
	str	x7, [x8]
	adrp	x0, l___unnamed_23@PAGE
	add	x0, x0, l___unnamed_23@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_8
	ldr	x8, [sp, #88]
	ldur	x9, [x29, #-88]
	subs	x8, x8, x9
	cset	w8, le
	tbnz	w8, #0, LBB274_3
	b	LBB274_2
LBB274_2:
	ldur	x8, [x29, #-88]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB274_4
LBB274_3:
	ldr	x8, [sp, #88]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB274_4
LBB274_4:
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	str	x8, [sp, #88]
	ldr	x8, [sp, #96]
	stur	x8, [x29, #-56]
	b	LBB274_5
LBB274_5:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB274_7 Depth 2
	ldur	x8, [x29, #-56]
	ldr	x9, [sp, #88]
	subs	x8, x8, x9
	cset	w8, gt
	tbnz	w8, #0, LBB274_13
	b	LBB274_6
LBB274_6:                               ;   in Loop: Header=BB274_5 Depth=1
	ldur	x8, [x29, #-56]
	mov	x13, #128
	str	x13, [sp, #16]                  ; 8-byte Folded Spill
	sdiv	x8, x8, x13
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #72]
	ldur	x8, [x29, #-56]
	ldur	x9, [x29, #-56]
	sdiv	x9, x9, x13
	subs	x8, x8, x9, lsl #7
	mov	x10, #1
	sdiv	x8, x8, x10
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #68]
	ldur	x8, [x29, #-56]
	ldur	x9, [x29, #-56]
	sdiv	x9, x9, x13
	subs	x8, x8, x9, lsl #7
	ldur	x9, [x29, #-56]
	ldur	x11, [x29, #-56]
	sdiv	x11, x11, x13
	subs	x9, x9, x11, lsl #7
	sdiv	x9, x9, x10
	subs	x8, x8, x9
	sdiv	x8, x8, x10
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #64]
	ldur	x8, [x29, #-56]
	ldur	x9, [x29, #-56]
	sdiv	x9, x9, x13
	subs	x8, x8, x9, lsl #7
	ldur	x9, [x29, #-56]
	ldur	x11, [x29, #-56]
	sdiv	x11, x11, x13
	subs	x9, x9, x11, lsl #7
	sdiv	x9, x9, x10
	subs	x8, x8, x9
	ldur	x9, [x29, #-56]
	ldur	x11, [x29, #-56]
	sdiv	x11, x11, x13
	subs	x9, x9, x11, lsl #7
	ldur	x11, [x29, #-56]
	ldur	x12, [x29, #-56]
	sdiv	x12, x12, x13
	subs	x11, x11, x12, lsl #7
	sdiv	x11, x11, x10
	subs	x9, x9, x11
	sdiv	x9, x9, x10
	subs	x8, x8, x9
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #60]
	movi	d0, #0000000000000000
	str	s0, [sp, #56]
	str	wzr, [sp, #52]
	b	LBB274_7
LBB274_7:                               ;   Parent Loop BB274_5 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #52]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB274_10
	b	LBB274_8
LBB274_8:                               ;   in Loop: Header=BB274_7 Depth=2
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #52]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #68]
	ldr	w2, [sp, #64]
	ldr	w3, [sp, #60]
	ldr	w4, [sp, #52]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #56]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #56]
	b	LBB274_9
LBB274_9:                               ;   in Loop: Header=BB274_7 Depth=2
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB274_7
LBB274_10:                              ;   in Loop: Header=BB274_5 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #56]
	str	w9, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #13036
	add	x0, x8, x9
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #64]
	ldr	w4, [sp, #60]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	w8, [sp, #8]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB274_11
LBB274_11:                              ;   in Loop: Header=BB274_5 Depth=1
	b	LBB274_12
LBB274_12:                              ;   in Loop: Header=BB274_5 Depth=1
	ldur	x8, [x29, #-56]
	add	x8, x8, #1
	stur	x8, [x29, #-56]
	b	LBB274_5
LBB274_13:
	b	LBB274_14
LBB274_14:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #16]
	ldr	w1, [x8]
	adrp	x0, l___unnamed_24@PAGE
	add	x0, x0, l___unnamed_24@PAGEOFF
	bl	___kmpc_for_static_fini
	b	LBB274_15
LBB274_15:
	.cfi_def_cfa wsp, 224
	ldp	x29, x30, [sp, #208]            ; 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi10ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi10ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi10ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi10ELi1ELi1EE: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi10ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #128]            ; 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #7868
	add	x0, x8, x9
	mov	w1, #128
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #12992
	add	x0, x8, x9
	mov	w1, #10
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #13036
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #128]
	stur	x8, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB275_1
LBB275_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB275_3 Depth 2
                                        ;       Child Loop BB275_5 Depth 3
                                        ;         Child Loop BB275_7 Depth 4
                                        ;           Child Loop BB275_9 Depth 5
	ldur	w8, [x29, #-36]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB275_20
	b	LBB275_2
LBB275_2:                               ;   in Loop: Header=BB275_1 Depth=1
	stur	wzr, [x29, #-40]
	b	LBB275_3
LBB275_3:                               ;   Parent Loop BB275_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB275_5 Depth 3
                                        ;         Child Loop BB275_7 Depth 4
                                        ;           Child Loop BB275_9 Depth 5
	ldur	w8, [x29, #-40]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB275_18
	b	LBB275_4
LBB275_4:                               ;   in Loop: Header=BB275_3 Depth=2
	stur	wzr, [x29, #-44]
	b	LBB275_5
LBB275_5:                               ;   Parent Loop BB275_1 Depth=1
                                        ;     Parent Loop BB275_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB275_7 Depth 4
                                        ;           Child Loop BB275_9 Depth 5
	ldur	w8, [x29, #-44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB275_16
	b	LBB275_6
LBB275_6:                               ;   in Loop: Header=BB275_5 Depth=3
	stur	wzr, [x29, #-48]
	b	LBB275_7
LBB275_7:                               ;   Parent Loop BB275_1 Depth=1
                                        ;     Parent Loop BB275_3 Depth=2
                                        ;       Parent Loop BB275_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB275_9 Depth 5
	ldur	w8, [x29, #-48]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB275_14
	b	LBB275_8
LBB275_8:                               ;   in Loop: Header=BB275_7 Depth=4
	movi	d0, #0000000000000000
	stur	s0, [x29, #-52]
	stur	wzr, [x29, #-56]
	b	LBB275_9
LBB275_9:                               ;   Parent Loop BB275_1 Depth=1
                                        ;     Parent Loop BB275_3 Depth=2
                                        ;       Parent Loop BB275_5 Depth=3
                                        ;         Parent Loop BB275_7 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldur	w8, [x29, #-56]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB275_12
	b	LBB275_10
LBB275_10:                              ;   in Loop: Header=BB275_9 Depth=5
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-56]
	ldur	w2, [x29, #-48]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldur	w1, [x29, #-56]
	ldur	w2, [x29, #-36]
	ldur	w3, [x29, #-40]
	ldur	w4, [x29, #-44]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldur	s2, [x29, #-52]
	fmadd	s0, s0, s1, s2
	stur	s0, [x29, #-52]
	b	LBB275_11
LBB275_11:                              ;   in Loop: Header=BB275_9 Depth=5
	ldur	w8, [x29, #-56]
	add	w8, w8, #1
	stur	w8, [x29, #-56]
	b	LBB275_9
LBB275_12:                              ;   in Loop: Header=BB275_7 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldur	w9, [x29, #-52]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #7868
	add	x0, x8, x9
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-40]
	ldur	w3, [x29, #-44]
	ldur	w4, [x29, #-48]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB275_13
LBB275_13:                              ;   in Loop: Header=BB275_7 Depth=4
	ldur	w8, [x29, #-48]
	add	w8, w8, #1
	stur	w8, [x29, #-48]
	b	LBB275_7
LBB275_14:                              ;   in Loop: Header=BB275_5 Depth=3
	b	LBB275_15
LBB275_15:                              ;   in Loop: Header=BB275_5 Depth=3
	ldur	w8, [x29, #-44]
	add	w8, w8, #1
	stur	w8, [x29, #-44]
	b	LBB275_5
LBB275_16:                              ;   in Loop: Header=BB275_3 Depth=2
	b	LBB275_17
LBB275_17:                              ;   in Loop: Header=BB275_3 Depth=2
	ldur	w8, [x29, #-40]
	add	w8, w8, #1
	stur	w8, [x29, #-40]
	b	LBB275_3
LBB275_18:                              ;   in Loop: Header=BB275_1 Depth=1
	b	LBB275_19
LBB275_19:                              ;   in Loop: Header=BB275_1 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB275_1
LBB275_20:
	stur	wzr, [x29, #-60]
	b	LBB275_21
LBB275_21:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB275_23 Depth 2
	ldur	w8, [x29, #-60]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB275_28
	b	LBB275_22
LBB275_22:                              ;   in Loop: Header=BB275_21 Depth=1
	movi	d0, #0000000000000000
	str	s0, [sp, #64]
	str	wzr, [sp, #60]
	b	LBB275_23
LBB275_23:                              ;   Parent Loop BB275_21 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #60]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB275_26
	b	LBB275_24
LBB275_24:                              ;   in Loop: Header=BB275_23 Depth=2
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #60]
	ldur	w2, [x29, #-60]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s1, [x0]
	ldr	s0, [sp, #64]
	fadd	s0, s0, s1
	str	s0, [sp, #64]
	b	LBB275_25
LBB275_25:                              ;   in Loop: Header=BB275_23 Depth=2
	ldr	w8, [sp, #60]
	add	w8, w8, #1
	str	w8, [sp, #60]
	b	LBB275_23
LBB275_26:                              ;   in Loop: Header=BB275_21 Depth=1
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #64]
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #12992
	add	x0, x8, x9
	ldur	w1, [x29, #-60]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB275_27
LBB275_27:                              ;   in Loop: Header=BB275_21 Depth=1
	ldur	w8, [x29, #-60]
	add	w8, w8, #1
	stur	w8, [x29, #-60]
	b	LBB275_21
LBB275_28:
	str	wzr, [sp, #56]
	b	LBB275_29
LBB275_29:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB275_31 Depth 2
                                        ;       Child Loop BB275_33 Depth 3
                                        ;         Child Loop BB275_35 Depth 4
                                        ;           Child Loop BB275_37 Depth 5
	ldr	w8, [sp, #56]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB275_48
	b	LBB275_30
LBB275_30:                              ;   in Loop: Header=BB275_29 Depth=1
	str	wzr, [sp, #52]
	b	LBB275_31
LBB275_31:                              ;   Parent Loop BB275_29 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB275_33 Depth 3
                                        ;         Child Loop BB275_35 Depth 4
                                        ;           Child Loop BB275_37 Depth 5
	ldr	w8, [sp, #52]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB275_46
	b	LBB275_32
LBB275_32:                              ;   in Loop: Header=BB275_31 Depth=2
	str	wzr, [sp, #48]
	b	LBB275_33
LBB275_33:                              ;   Parent Loop BB275_29 Depth=1
                                        ;     Parent Loop BB275_31 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB275_35 Depth 4
                                        ;           Child Loop BB275_37 Depth 5
	ldr	w8, [sp, #48]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB275_44
	b	LBB275_34
LBB275_34:                              ;   in Loop: Header=BB275_33 Depth=3
	str	wzr, [sp, #44]
	b	LBB275_35
LBB275_35:                              ;   Parent Loop BB275_29 Depth=1
                                        ;     Parent Loop BB275_31 Depth=2
                                        ;       Parent Loop BB275_33 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB275_37 Depth 5
	ldr	w8, [sp, #44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB275_42
	b	LBB275_36
LBB275_36:                              ;   in Loop: Header=BB275_35 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB275_37
LBB275_37:                              ;   Parent Loop BB275_29 Depth=1
                                        ;     Parent Loop BB275_31 Depth=2
                                        ;       Parent Loop BB275_33 Depth=3
                                        ;         Parent Loop BB275_35 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldr	w8, [sp, #36]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB275_40
	b	LBB275_38
LBB275_38:                              ;   in Loop: Header=BB275_37 Depth=5
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #56]
	ldr	w2, [sp, #36]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #52]
	ldr	w2, [sp, #48]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #36]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #40]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #40]
	b	LBB275_39
LBB275_39:                              ;   in Loop: Header=BB275_37 Depth=5
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB275_37
LBB275_40:                              ;   in Loop: Header=BB275_35 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #40]
	str	w9, [sp, #4]                    ; 4-byte Folded Spill
	mov	x9, #13036
	add	x0, x8, x9
	ldr	w1, [sp, #56]
	ldr	w2, [sp, #52]
	ldr	w3, [sp, #48]
	ldr	w4, [sp, #44]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	w8, [sp, #4]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB275_41
LBB275_41:                              ;   in Loop: Header=BB275_35 Depth=4
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB275_35
LBB275_42:                              ;   in Loop: Header=BB275_33 Depth=3
	b	LBB275_43
LBB275_43:                              ;   in Loop: Header=BB275_33 Depth=3
	ldr	w8, [sp, #48]
	add	w8, w8, #1
	str	w8, [sp, #48]
	b	LBB275_33
LBB275_44:                              ;   in Loop: Header=BB275_31 Depth=2
	b	LBB275_45
LBB275_45:                              ;   in Loop: Header=BB275_31 Depth=2
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB275_31
LBB275_46:                              ;   in Loop: Header=BB275_29 Depth=1
	b	LBB275_47
LBB275_47:                              ;   in Loop: Header=BB275_29 Depth=1
	ldr	w8, [sp, #56]
	add	w8, w8, #1
	str	w8, [sp, #56]
	b	LBB275_29
LBB275_48:
	.cfi_def_cfa wsp, 144
	ldp	x29, x30, [sp, #128]            ; 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE3dotERS0_: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB276_2
	b	LBB276_1
LBB276_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB276_2:
	b	LBB276_3
LBB276_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB276_4
LBB276_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB276_6 Depth 2
                                        ;       Child Loop BB276_8 Depth 3
                                        ;         Child Loop BB276_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB276_19
	b	LBB276_5
LBB276_5:                               ;   in Loop: Header=BB276_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB276_6
LBB276_6:                               ;   Parent Loop BB276_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB276_8 Depth 3
                                        ;         Child Loop BB276_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB276_17
	b	LBB276_7
LBB276_7:                               ;   in Loop: Header=BB276_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB276_8
LBB276_8:                               ;   Parent Loop BB276_4 Depth=1
                                        ;     Parent Loop BB276_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB276_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB276_15
	b	LBB276_9
LBB276_9:                               ;   in Loop: Header=BB276_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB276_10
LBB276_10:                              ;   Parent Loop BB276_4 Depth=1
                                        ;     Parent Loop BB276_6 Depth=2
                                        ;       Parent Loop BB276_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB276_13
	b	LBB276_11
LBB276_11:                              ;   in Loop: Header=BB276_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB276_12
LBB276_12:                              ;   in Loop: Header=BB276_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB276_10
LBB276_13:                              ;   in Loop: Header=BB276_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB276_14
LBB276_14:                              ;   in Loop: Header=BB276_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB276_8
LBB276_15:                              ;   in Loop: Header=BB276_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB276_16
LBB276_16:                              ;   in Loop: Header=BB276_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB276_6
LBB276_17:                              ;   in Loop: Header=BB276_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB276_18
LBB276_18:                              ;   in Loop: Header=BB276_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB276_4
LBB276_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE3dotERS0_: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB277_2
	b	LBB277_1
LBB277_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB277_2:
	b	LBB277_3
LBB277_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB277_4
LBB277_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB277_6 Depth 2
                                        ;       Child Loop BB277_8 Depth 3
                                        ;         Child Loop BB277_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB277_19
	b	LBB277_5
LBB277_5:                               ;   in Loop: Header=BB277_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB277_6
LBB277_6:                               ;   Parent Loop BB277_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB277_8 Depth 3
                                        ;         Child Loop BB277_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB277_17
	b	LBB277_7
LBB277_7:                               ;   in Loop: Header=BB277_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB277_8
LBB277_8:                               ;   Parent Loop BB277_4 Depth=1
                                        ;     Parent Loop BB277_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB277_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB277_15
	b	LBB277_9
LBB277_9:                               ;   in Loop: Header=BB277_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB277_10
LBB277_10:                              ;   Parent Loop BB277_4 Depth=1
                                        ;     Parent Loop BB277_6 Depth=2
                                        ;       Parent Loop BB277_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB277_13
	b	LBB277_11
LBB277_11:                              ;   in Loop: Header=BB277_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB277_12
LBB277_12:                              ;   in Loop: Header=BB277_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB277_10
LBB277_13:                              ;   in Loop: Header=BB277_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB277_14
LBB277_14:                              ;   in Loop: Header=BB277_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB277_8
LBB277_15:                              ;   in Loop: Header=BB277_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB277_16
LBB277_16:                              ;   in Loop: Header=BB277_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB277_6
LBB277_17:                              ;   in Loop: Header=BB277_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB277_18
LBB277_18:                              ;   in Loop: Header=BB277_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB277_4
LBB277_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z16nll_softmax_mainiPPc       ; -- Begin function _Z16nll_softmax_mainiPPc
	.p2align	2
__Z16nll_softmax_mainiPPc:              ; @_Z16nll_softmax_mainiPPc
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #624
	add	x8, sp, #184
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	str	w0, [x8, #436]
	str	x1, [x8, #424]
	ldr	w0, [x8, #436]
	ldr	x1, [x8, #424]
	sub	x8, x29, #152
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	bl	__ZL10parse_argsiPPc
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	mov	w0, #64
	str	w0, [x8, #300]
	ldr	w1, [x8, #336]
	bl	__ZL5min_iii
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	str	w0, [x9, #296]
	mov	w8, #10
	str	w8, [x9, #292]
	ldr	x8, [x9, #328]
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [x9, #288]
	add	x0, sp, #336
	str	x0, [sp, #24]                   ; 8-byte Folded Spill
	bl	__ZN6loggerC1Ev
	ldr	x1, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, sp, #216
	str	x0, [sp, #32]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #32]                   ; 8-byte Folded Reload
	bl	__ZN6logger9start_logE11cmdline_opt
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x1, [x8, #360]
	add	x0, sp, #208
	bl	__ZN9rnd_gen_t4seedEy
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	movi	d0, #0000000000000000
	str	d0, [x8, #16]
	str	d0, [x8, #8]
	str	wzr, [x8]
	b	LBB278_1
LBB278_1:                               ; =>This Inner Loop Header: Depth=1
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w8, [x9]
	ldr	w9, [x9, #288]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB278_4
	b	LBB278_2
LBB278_2:                               ;   in Loop: Header=BB278_1 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w9, [x8]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.121@PAGE
	add	x0, x0, l_.str.121@PAGEOFF
	bl	_printf
	add	x0, sp, #56
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	sub	x1, x29, #152
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w3, [x8, #296]
	add	x1, sp, #336
	add	x2, sp, #208
	mov	w4, #10
	bl	__ZL15grad_check_lossI10NLLSoftmaxILi64ELi10EE6tensorIfLi64ELi10ELi1ELi1EES2_IiLi64ELi1ELi1ELi1EES2_IfLi64ELi1ELi1ELi1EE13NLLSoftmaxCfgEd11cmdline_optP6loggerR9rnd_gen_tT3_ii
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	str	d0, [sp, #176]
	ldr	d0, [x8, #16]
	fcvt	s0, d0
	ldr	d1, [sp, #176]
	fcvt	s1, d1
	bl	__ZL5max_rff
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [x8, #16]
	ldr	d1, [sp, #176]
	ldr	d0, [x8, #8]
	fadd	d0, d0, d1
	str	d0, [x8, #8]
	b	LBB278_3
LBB278_3:                               ;   in Loop: Header=BB278_1 Depth=1
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w8, [x9]
	add	w8, w8, #1
	str	w8, [x9]
	b	LBB278_1
LBB278_4:
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #16]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.122@PAGE
	add	x0, x0, l_.str.122@PAGEOFF
	bl	_printf
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	d0, [x8, #8]
	ldr	s2, [x8, #288]
                                        ; implicit-def: $d1
	fmov	s1, s2
	sshll.2d	v1, v1, #0
                                        ; kill: def $d1 killed $d1 killed $q1
	scvtf	d1, d1
	fdiv	d0, d0, d1
	mov	x8, sp
	str	d0, [x8]
	adrp	x0, l_.str.123@PAGE
	add	x0, x0, l_.str.123@PAGEOFF
	bl	_printf
	add	x0, sp, #336
	bl	__ZN6logger7end_logEv
	mov	w0, #0
	add	sp, sp, #624
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL15grad_check_lossI10NLLSoftmaxILi64ELi10EE6tensorIfLi64ELi10ELi1ELi1EES2_IiLi64ELi1ELi1ELi1EES2_IfLi64ELi1ELi1ELi1EE13NLLSoftmaxCfgEd11cmdline_optP6loggerR9rnd_gen_tT3_ii
__ZL15grad_check_lossI10NLLSoftmaxILi64ELi10EE6tensorIfLi64ELi10ELi1ELi1EES2_IiLi64ELi1ELi1ELi1EES2_IfLi64ELi1ELi1ELi1EE13NLLSoftmaxCfgEd11cmdline_optP6loggerR9rnd_gen_tT3_ii: ; @_ZL15grad_check_lossI10NLLSoftmaxILi64ELi10EE6tensorIfLi64ELi10ELi1ELi1EES2_IiLi64ELi1ELi1ELi1EES2_IfLi64ELi1ELi1ELi1EE13NLLSoftmaxCfgEd11cmdline_optP6loggerR9rnd_gen_tT3_ii
Lfunc_begin5:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception5
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	.cfi_remember_state
	sub	sp, sp, #528
	str	x0, [sp, #168]                  ; 8-byte Folded Spill
	stur	x1, [x29, #-32]
	stur	x2, [x29, #-40]
	stur	w3, [x29, #-44]
	stur	w4, [x29, #-48]
	mov	x0, #5520
	str	x0, [sp, #176]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #176]                  ; 8-byte Folded Reload
	str	x0, [sp, #184]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #184]                  ; 8-byte Folded Reload
Ltmp89:
	bl	__ZN10NLLSoftmaxILi64ELi10EEC1Ev
Ltmp90:
	b	LBB279_1
LBB279_1:
	ldr	x1, [sp, #168]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	stur	x8, [x29, #-56]
	ldur	x8, [x29, #-56]
	str	x8, [sp, #72]                   ; 8-byte Folded Spill
	sub	x0, x29, #192
	str	x0, [sp, #80]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #80]                   ; 8-byte Folded Reload
	ldur	x2, [x29, #-32]
	ldur	x3, [x29, #-40]
	bl	__ZN10NLLSoftmaxILi64ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t13NLLSoftmaxCfg
	mov	x0, #2564
	str	x0, [sp, #128]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #128]                  ; 8-byte Folded Reload
	str	x0, [sp, #88]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #88]                   ; 8-byte Folded Reload
	stur	x0, [x29, #-208]
	ldur	x0, [x29, #-208]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	fmov	s0, #-1.00000000
	str	s0, [sp, #120]                  ; 4-byte Folded Spill
	fmov	s1, #1.00000000
	str	s1, [sp, #124]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	mov	x0, #260
	str	x0, [sp, #104]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #96]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #96]                   ; 8-byte Folded Reload
	stur	x0, [x29, #-216]
	ldur	x0, [x29, #-216]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	ldur	w4, [x29, #-48]
	mov	w3, #0
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tii
	ldr	x0, [sp, #104]                  ; 8-byte Folded Reload
	bl	__Znwm
	ldr	x1, [sp, #104]                  ; 8-byte Folded Reload
	str	x0, [sp, #112]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s0, [sp, #120]                  ; 4-byte Folded Reload
	ldr	s1, [sp, #124]                  ; 4-byte Folded Reload
	stur	x0, [x29, #-224]
	ldur	x0, [x29, #-224]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	ldr	x0, [sp, #128]                  ; 8-byte Folded Reload
	mov	w8, #4719
	movk	w8, #14979, lsl #16
	fmov	s0, w8
	stur	s0, [x29, #-228]
	bl	__Znwm
	ldr	x1, [sp, #128]                  ; 8-byte Folded Reload
	str	x0, [sp, #136]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #136]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-240]
	ldur	x0, [x29, #-240]
	ldur	w1, [x29, #-44]
	ldur	x2, [x29, #-40]
	ldur	s0, [x29, #-228]
	fneg	s0, s0
	ldur	s1, [x29, #-228]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi10ELi1ELi1EEEPT_S3_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-248]
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi10ELi1ELi1EEEPT_S3_i
	stur	x0, [x29, #-256]
	ldur	x0, [x29, #-248]
	ldur	x1, [x29, #-240]
	fmov	s0, #-0.50000000
	str	s0, [sp, #148]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE4add_EfRS0_
	ldur	x0, [x29, #-256]
	ldur	x1, [x29, #-240]
	fmov	s0, #0.50000000
	str	s0, [sp, #152]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE4add_EfRS0_
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI10NLLSoftmaxILi64ELi10EEEPT_S3_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	str	x0, [sp, #280]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI10NLLSoftmaxILi64ELi10EEEPT_S3_i
	str	x0, [sp, #272]
	ldr	x0, [sp, #280]
	ldur	x1, [x29, #-40]
	ldur	s0, [x29, #-228]
	fneg	s0, s0
	ldur	s1, [x29, #-228]
	bl	__ZN10NLLSoftmaxILi64ELi10EE9rand_gradER9rnd_gen_tff
	ldr	x0, [sp, #272]
	ldr	x1, [sp, #280]
	bl	__ZN10NLLSoftmaxILi64ELi10EE9copy_gradERS0_
	ldr	s0, [sp, #148]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #280]
	bl	__ZN10NLLSoftmaxILi64ELi10EE8add_gradEf
	ldr	s0, [sp, #152]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #272]
	bl	__ZN10NLLSoftmaxILi64ELi10EE8add_gradEf
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-224]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-256]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-216]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #280]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #272]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	ldur	x0, [x29, #-56]
	ldur	x1, [x29, #-208]
	ldur	x2, [x29, #-216]
	mov	w3, #1
	str	w3, [sp, #156]                  ; 4-byte Folded Spill
	bl	__ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	str	x0, [sp, #264]
	ldur	x0, [x29, #-56]
	ldur	x1, [x29, #-224]
	ldur	x2, [x29, #-216]
	bl	__ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	ldr	w3, [sp, #156]                  ; 4-byte Folded Reload
	str	x0, [sp, #256]
	ldr	x0, [sp, #280]
	ldur	x1, [x29, #-248]
	ldur	x2, [x29, #-216]
	bl	__ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	ldr	w3, [sp, #156]                  ; 4-byte Folded Reload
	str	x0, [sp, #248]
	ldr	x0, [sp, #272]
	ldur	x1, [x29, #-256]
	ldur	x2, [x29, #-216]
	bl	__ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	str	x0, [sp, #240]
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI10NLLSoftmaxILi64ELi10EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #280]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI10NLLSoftmaxILi64ELi10EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #272]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI10NLLSoftmaxILi64ELi10EEEvPT_i
	ldur	x0, [x29, #-224]
	ldr	x1, [sp, #248]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	str	d0, [sp, #232]
	ldur	x0, [x29, #-224]
	ldr	x1, [sp, #264]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	str	d0, [sp, #224]
	ldur	x0, [x29, #-224]
	ldr	x1, [sp, #240]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	str	d0, [sp, #216]
	ldr	x0, [sp, #256]
	ldur	x1, [x29, #-240]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE3dotERS0_
	str	d0, [sp, #208]
	ldur	x0, [x29, #-56]
	ldr	x1, [sp, #280]
	bl	__ZN10NLLSoftmaxILi64ELi10EE13grad_dot_gradERS0_
	str	d0, [sp, #200]
	ldr	d0, [sp, #208]
	ldr	d1, [sp, #200]
	ldr	d2, [sp, #232]
	ldr	d3, [sp, #224]
	ldr	d4, [sp, #216]
	bl	__ZL10show_errorddddd
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [sp, #192]
	ldur	x0, [x29, #-224]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-208]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-256]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-56]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #280]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #272]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-216]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #168]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-240]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	ldur	x8, [x29, #-224]
	str	x8, [sp, #160]                  ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB279_3
	b	LBB279_2
LBB279_2:
	ldr	x0, [sp, #160]                  ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB279_3
LBB279_3:
	ldur	x8, [x29, #-208]
	str	x8, [sp, #64]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB279_5
	b	LBB279_4
LBB279_4:
	ldr	x0, [sp, #64]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB279_5
LBB279_5:
	ldur	x8, [x29, #-248]
	str	x8, [sp, #56]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB279_7
	b	LBB279_6
LBB279_6:
	ldr	x0, [sp, #56]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB279_7
LBB279_7:
	ldur	x8, [x29, #-256]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB279_9
	b	LBB279_8
LBB279_8:
	ldr	x0, [sp, #48]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB279_9
LBB279_9:
	ldur	x8, [x29, #-56]
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB279_11
	b	LBB279_10
LBB279_10:
	ldr	x0, [sp, #40]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB279_11
LBB279_11:
	ldr	x8, [sp, #280]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB279_13
	b	LBB279_12
LBB279_12:
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB279_13
LBB279_13:
	ldr	x8, [sp, #272]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB279_15
	b	LBB279_14
LBB279_14:
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB279_15
LBB279_15:
	ldur	x8, [x29, #-216]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB279_17
	b	LBB279_16
LBB279_16:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB279_17
LBB279_17:
	ldur	x8, [x29, #-240]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB279_19
	b	LBB279_18
LBB279_18:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB279_19
LBB279_19:
	ldr	d0, [sp, #192]
	add	sp, sp, #528
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
LBB279_20:
	.cfi_restore_state
Ltmp91:
	mov	x9, x0
	ldr	x0, [sp, #184]                  ; 8-byte Folded Reload
	mov	x8, x1
	stur	x9, [x29, #-64]
	stur	w8, [x29, #-68]
	bl	__ZdlPv
	b	LBB279_21
LBB279_21:
	ldur	x0, [x29, #-64]
	bl	__Unwind_Resume
Lfunc_end5:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table279:
Lexception5:
	.byte	255                             ; @LPStart Encoding = omit
	.byte	255                             ; @TType Encoding = omit
	.byte	1                               ; Call site Encoding = uleb128
	.uleb128 Lcst_end5-Lcst_begin5
Lcst_begin5:
	.uleb128 Lfunc_begin5-Lfunc_begin5      ; >> Call Site 1 <<
	.uleb128 Ltmp89-Lfunc_begin5            ;   Call between Lfunc_begin5 and Ltmp89
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp89-Lfunc_begin5            ; >> Call Site 2 <<
	.uleb128 Ltmp90-Ltmp89                  ;   Call between Ltmp89 and Ltmp90
	.uleb128 Ltmp91-Lfunc_begin5            ;     jumps to Ltmp91
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp90-Lfunc_begin5            ; >> Call Site 3 <<
	.uleb128 Lfunc_end5-Ltmp90              ;   Call between Ltmp90 and Lfunc_end5
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
Lcst_end5:
	.p2align	2
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN10NLLSoftmaxILi64ELi10EEC1Ev ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EEC1Ev
	.weak_def_can_be_hidden	__ZN10NLLSoftmaxILi64ELi10EEC1Ev
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EEC1Ev:       ; @_ZN10NLLSoftmaxILi64ELi10EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN10NLLSoftmaxILi64ELi10EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t13NLLSoftmaxCfg ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t13NLLSoftmaxCfg
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t13NLLSoftmaxCfg
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t13NLLSoftmaxCfg: ; @_ZN10NLLSoftmaxILi64ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t13NLLSoftmaxCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	str	x2, [sp, #24]
	str	x3, [sp, #16]
	ldur	x0, [x29, #-16]
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [sp, #24]
	str	x8, [x9, #120]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIiLi64ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tii ; -- Begin function _ZN6tensorIiLi64ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tii
	.weak_definition	__ZN6tensorIiLi64ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tii
	.p2align	2
__ZN6tensorIiLi64ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tii: ; @_ZN6tensorIiLi64ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	stur	w4, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB282_1
LBB282_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB282_3 Depth 2
                                        ;       Child Loop BB282_5 Depth 3
                                        ;         Child Loop BB282_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB282_16
	b	LBB282_2
LBB282_2:                               ;   in Loop: Header=BB282_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB282_3
LBB282_3:                               ;   Parent Loop BB282_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB282_5 Depth 3
                                        ;         Child Loop BB282_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB282_14
	b	LBB282_4
LBB282_4:                               ;   in Loop: Header=BB282_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB282_5
LBB282_5:                               ;   Parent Loop BB282_1 Depth=1
                                        ;     Parent Loop BB282_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB282_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB282_12
	b	LBB282_6
LBB282_6:                               ;   in Loop: Header=BB282_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB282_7
LBB282_7:                               ;   Parent Loop BB282_1 Depth=1
                                        ;     Parent Loop BB282_3 Depth=2
                                        ;       Parent Loop BB282_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB282_10
	b	LBB282_8
LBB282_8:                               ;   in Loop: Header=BB282_7 Depth=4
	ldur	x0, [x29, #-24]
	ldursw	x1, [x29, #-28]
	ldursw	x2, [x29, #-32]
	bl	__ZN9rnd_gen_t5randiEll
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [x0]
	b	LBB282_9
LBB282_9:                               ;   in Loop: Header=BB282_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB282_7
LBB282_10:                              ;   in Loop: Header=BB282_5 Depth=3
	b	LBB282_11
LBB282_11:                              ;   in Loop: Header=BB282_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB282_5
LBB282_12:                              ;   in Loop: Header=BB282_3 Depth=2
	b	LBB282_13
LBB282_13:                              ;   in Loop: Header=BB282_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB282_3
LBB282_14:                              ;   in Loop: Header=BB282_1 Depth=1
	b	LBB282_15
LBB282_15:                              ;   in Loop: Header=BB282_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB282_1
LBB282_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB283_1
LBB283_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB283_3 Depth 2
                                        ;       Child Loop BB283_5 Depth 3
                                        ;         Child Loop BB283_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB283_16
	b	LBB283_2
LBB283_2:                               ;   in Loop: Header=BB283_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB283_3
LBB283_3:                               ;   Parent Loop BB283_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB283_5 Depth 3
                                        ;         Child Loop BB283_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB283_14
	b	LBB283_4
LBB283_4:                               ;   in Loop: Header=BB283_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB283_5
LBB283_5:                               ;   Parent Loop BB283_1 Depth=1
                                        ;     Parent Loop BB283_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB283_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB283_12
	b	LBB283_6
LBB283_6:                               ;   in Loop: Header=BB283_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB283_7
LBB283_7:                               ;   Parent Loop BB283_1 Depth=1
                                        ;     Parent Loop BB283_3 Depth=2
                                        ;       Parent Loop BB283_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB283_10
	b	LBB283_8
LBB283_8:                               ;   in Loop: Header=BB283_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB283_9
LBB283_9:                               ;   in Loop: Header=BB283_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB283_7
LBB283_10:                              ;   in Loop: Header=BB283_5 Depth=3
	b	LBB283_11
LBB283_11:                              ;   in Loop: Header=BB283_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB283_5
LBB283_12:                              ;   in Loop: Header=BB283_3 Depth=2
	b	LBB283_13
LBB283_13:                              ;   in Loop: Header=BB283_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB283_3
LBB283_14:                              ;   in Loop: Header=BB283_1 Depth=1
	b	LBB283_15
LBB283_15:                              ;   in Loop: Header=BB283_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB283_1
LBB283_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI6tensorIfLi64ELi10ELi1ELi1EEEPT_S3_i ; -- Begin function _Z9make_copyI6tensorIfLi64ELi10ELi1ELi1EEEPT_S3_i
	.weak_definition	__Z9make_copyI6tensorIfLi64ELi10ELi1ELi1EEEPT_S3_i
	.p2align	2
__Z9make_copyI6tensorIfLi64ELi10ELi1ELi1EEEPT_S3_i: ; @_Z9make_copyI6tensorIfLi64ELi10ELi1ELi1EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #2564
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi10ELi1ELi1EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi10ELi1ELi1EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi10ELi1ELi1EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi10ELi1ELi1EE4add_EfRS0_: ; @_ZN6tensorIfLi64ELi10ELi1ELi1EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB285_2
	b	LBB285_1
LBB285_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB285_2:
	b	LBB285_3
LBB285_3:
	str	wzr, [sp, #28]
	b	LBB285_4
LBB285_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB285_6 Depth 2
                                        ;       Child Loop BB285_8 Depth 3
                                        ;         Child Loop BB285_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB285_19
	b	LBB285_5
LBB285_5:                               ;   in Loop: Header=BB285_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB285_6
LBB285_6:                               ;   Parent Loop BB285_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB285_8 Depth 3
                                        ;         Child Loop BB285_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB285_17
	b	LBB285_7
LBB285_7:                               ;   in Loop: Header=BB285_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB285_8
LBB285_8:                               ;   Parent Loop BB285_4 Depth=1
                                        ;     Parent Loop BB285_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB285_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB285_15
	b	LBB285_9
LBB285_9:                               ;   in Loop: Header=BB285_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB285_10
LBB285_10:                              ;   Parent Loop BB285_4 Depth=1
                                        ;     Parent Loop BB285_6 Depth=2
                                        ;       Parent Loop BB285_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB285_13
	b	LBB285_11
LBB285_11:                              ;   in Loop: Header=BB285_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB285_12
LBB285_12:                              ;   in Loop: Header=BB285_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB285_10
LBB285_13:                              ;   in Loop: Header=BB285_8 Depth=3
	b	LBB285_14
LBB285_14:                              ;   in Loop: Header=BB285_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB285_8
LBB285_15:                              ;   in Loop: Header=BB285_6 Depth=2
	b	LBB285_16
LBB285_16:                              ;   in Loop: Header=BB285_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB285_6
LBB285_17:                              ;   in Loop: Header=BB285_4 Depth=1
	b	LBB285_18
LBB285_18:                              ;   in Loop: Header=BB285_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB285_4
LBB285_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI10NLLSoftmaxILi64ELi10EEEPT_S3_i ; -- Begin function _Z9make_copyI10NLLSoftmaxILi64ELi10EEEPT_S3_i
	.weak_definition	__Z9make_copyI10NLLSoftmaxILi64ELi10EEEPT_S3_i
	.p2align	2
__Z9make_copyI10NLLSoftmaxILi64ELi10EEEPT_S3_i: ; @_Z9make_copyI10NLLSoftmaxILi64ELi10EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #5520
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE9rand_gradER9rnd_gen_tff ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE9rand_gradER9rnd_gen_tff
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE9rand_gradER9rnd_gen_tff
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE9rand_gradER9rnd_gen_tff: ; @_ZN10NLLSoftmaxILi64ELi10EE9rand_gradER9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	x1, [sp, #16]
	str	s0, [sp, #12]
	str	s1, [sp, #8]
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE9copy_gradERS0_ ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE9copy_gradERS0_
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE9copy_gradERS0_
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE9copy_gradERS0_: ; @_ZN10NLLSoftmaxILi64ELi10EE9copy_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	x1, [sp]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE8add_gradEf ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE8add_gradEf
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE8add_gradEf
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE8add_gradEf: ; @_ZN10NLLSoftmaxILi64ELi10EE8add_gradEf
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	s0, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i ; -- Begin function _Z6to_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	.weak_definition	__Z6to_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	.p2align	2
__Z6to_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i: ; @_Z6to_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI10NLLSoftmaxILi64ELi10EEEvPT_i ; -- Begin function _Z6to_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	.weak_definition	__Z6to_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	.p2align	2
__Z6to_devI10NLLSoftmaxILi64ELi10EEEvPT_i: ; @_Z6to_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi: ; @_ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB292_2
	b	LBB292_1
LBB292_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB292_3
	b	LBB292_4
LBB292_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	x2, [x29, #-24]
	ldur	w3, [x29, #-28]
	bl	__ZN10NLLSoftmaxILi64ELi10EE16forward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	b	LBB292_8
LBB292_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	x2, [x29, #-24]
	ldur	w3, [x29, #-28]
	bl	__ZN10NLLSoftmaxILi64ELi10EE17forward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	b	LBB292_8
LBB292_4:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB292_6
	b	LBB292_5
LBB292_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	x2, [x29, #-24]
	ldur	w3, [x29, #-28]
	bl	__ZN10NLLSoftmaxILi64ELi10EE17forward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	b	LBB292_7
LBB292_6:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	x2, [x29, #-24]
	ldur	w3, [x29, #-28]
	bl	__ZN10NLLSoftmaxILi64ELi10EE16forward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	b	LBB292_7
LBB292_7:
	b	LBB292_8
LBB292_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	add	x0, x8, #2692
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE: ; @_ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB293_2
	b	LBB293_1
LBB293_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB293_3
	b	LBB293_4
LBB293_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	x2, [x29, #-24]
	bl	__ZN10NLLSoftmaxILi64ELi10EE17backward_cpu_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	b	LBB293_8
LBB293_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	x2, [x29, #-24]
	bl	__ZN10NLLSoftmaxILi64ELi10EE18backward_cuda_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	b	LBB293_8
LBB293_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB293_6
	b	LBB293_5
LBB293_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	x2, [x29, #-24]
	bl	__ZN10NLLSoftmaxILi64ELi10EE18backward_cuda_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	b	LBB293_7
LBB293_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	x2, [x29, #-24]
	bl	__ZN10NLLSoftmaxILi64ELi10EE17backward_cpu_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	b	LBB293_7
LBB293_7:
	b	LBB293_8
LBB293_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #2952
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7to_hostI10NLLSoftmaxILi64ELi10EEEvPT_i ; -- Begin function _Z7to_hostI10NLLSoftmaxILi64ELi10EEEvPT_i
	.weak_definition	__Z7to_hostI10NLLSoftmaxILi64ELi10EEEvPT_i
	.p2align	2
__Z7to_hostI10NLLSoftmaxILi64ELi10EEEvPT_i: ; @_Z7to_hostI10NLLSoftmaxILi64ELi10EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB295_2
	b	LBB295_1
LBB295_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB295_2:
	b	LBB295_3
LBB295_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB295_4
LBB295_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB295_6 Depth 2
                                        ;       Child Loop BB295_8 Depth 3
                                        ;         Child Loop BB295_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB295_19
	b	LBB295_5
LBB295_5:                               ;   in Loop: Header=BB295_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB295_6
LBB295_6:                               ;   Parent Loop BB295_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB295_8 Depth 3
                                        ;         Child Loop BB295_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB295_17
	b	LBB295_7
LBB295_7:                               ;   in Loop: Header=BB295_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB295_8
LBB295_8:                               ;   Parent Loop BB295_4 Depth=1
                                        ;     Parent Loop BB295_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB295_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB295_15
	b	LBB295_9
LBB295_9:                               ;   in Loop: Header=BB295_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB295_10
LBB295_10:                              ;   Parent Loop BB295_4 Depth=1
                                        ;     Parent Loop BB295_6 Depth=2
                                        ;       Parent Loop BB295_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB295_13
	b	LBB295_11
LBB295_11:                              ;   in Loop: Header=BB295_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB295_12
LBB295_12:                              ;   in Loop: Header=BB295_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB295_10
LBB295_13:                              ;   in Loop: Header=BB295_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB295_14
LBB295_14:                              ;   in Loop: Header=BB295_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB295_8
LBB295_15:                              ;   in Loop: Header=BB295_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB295_16
LBB295_16:                              ;   in Loop: Header=BB295_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB295_6
LBB295_17:                              ;   in Loop: Header=BB295_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB295_18
LBB295_18:                              ;   in Loop: Header=BB295_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB295_4
LBB295_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE13grad_dot_gradERS0_ ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE13grad_dot_gradERS0_
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE13grad_dot_gradERS0_
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE13grad_dot_gradERS0_: ; @_ZN10NLLSoftmaxILi64ELi10EE13grad_dot_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	x1, [sp]
	movi	d0, #0000000000000000
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i ; -- Begin function _Z7del_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	.weak_definition	__Z7del_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	.p2align	2
__Z7del_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i: ; @_Z7del_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI10NLLSoftmaxILi64ELi10EEEvPT_i ; -- Begin function _Z7del_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	.weak_definition	__Z7del_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	.p2align	2
__Z7del_devI10NLLSoftmaxILi64ELi10EEEvPT_i: ; @_Z7del_devI10NLLSoftmaxILi64ELi10EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i ; -- Begin function _Z7del_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	.weak_definition	__Z7del_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	.p2align	2
__Z7del_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i: ; @_Z7del_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EEC2Ev ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EEC2Ev
	.weak_def_can_be_hidden	__ZN10NLLSoftmaxILi64ELi10EEC2Ev
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EEC2Ev:       ; @_ZN10NLLSoftmaxILi64ELi10EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB301_2
	b	LBB301_1
LBB301_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB301_2:
	b	LBB301_3
LBB301_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE16forward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE16forward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE16forward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE16forward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi: ; @_ZN10NLLSoftmaxILi64ELi10EE16forward_cpu_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	x2, [sp, #8]
	str	w3, [sp, #4]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	x2, [sp, #8]
	ldr	w3, [sp, #4]
	bl	__ZN10NLLSoftmaxILi64ELi10EE12forward_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE17forward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE17forward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE17forward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE17forward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi: ; @_ZN10NLLSoftmaxILi64ELi10EE17forward_cuda_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	x2, [sp, #8]
	str	w3, [sp, #4]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.147@PAGE
	add	x0, x0, l_.str.147@PAGEOFF
	mov	w1, #176
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE12forward_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE12forward_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE12forward_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE12forward_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi: ; @_ZN10NLLSoftmaxILi64ELi10EE12forward_baseER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-32]
	add	x0, x8, #2692
	ldur	w1, [x29, #-32]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	mov	x8, x0
	add	x2, x8, #128
	bl	__ZN10NLLSoftmaxILi64ELi10EE11log_softmaxER6tensorIfLi64ELi10ELi1ELi1EES3_
	stur	wzr, [x29, #-36]
	b	LBB305_1
LBB305_1:                               ; =>This Inner Loop Header: Depth=1
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-32]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB305_4
	b	LBB305_2
LBB305_2:                               ;   in Loop: Header=BB305_1 Depth=1
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	add	x8, x8, #128
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w8, [x29, #-36]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	mov	w4, #0
	str	w4, [sp, #24]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	w4, [sp, #24]                   ; 4-byte Folded Reload
	mov	x8, x0
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w2, [x8]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fneg	s0, s0
	str	s0, [sp, #28]                   ; 4-byte Folded Spill
	add	x0, x8, #2692
	ldur	w1, [x29, #-36]
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #28]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB305_3
LBB305_3:                               ;   in Loop: Header=BB305_1 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB305_1
LBB305_4:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE11log_softmaxER6tensorIfLi64ELi10ELi1ELi1EES3_ ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE11log_softmaxER6tensorIfLi64ELi10ELi1ELi1EES3_
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE11log_softmaxER6tensorIfLi64ELi10ELi1ELi1EES3_
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE11log_softmaxER6tensorIfLi64ELi10ELi1ELi1EES3_: ; @_ZN10NLLSoftmaxILi64ELi10EE11log_softmaxER6tensorIfLi64ELi10ELi1ELi1EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #128]            ; 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	stur	w8, [x29, #-28]
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei
	stur	xzr, [x29, #-40]
	b	LBB306_1
LBB306_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB306_3 Depth 2
                                        ;     Child Loop BB306_10 Depth 2
                                        ;     Child Loop BB306_14 Depth 2
	ldur	x8, [x29, #-40]
	ldursw	x9, [x29, #-28]
	subs	x8, x8, x9
	cset	w8, ge
	tbnz	w8, #0, LBB306_19
	b	LBB306_2
LBB306_2:                               ;   in Loop: Header=BB306_1 Depth=1
	stur	xzr, [x29, #-48]
	stur	xzr, [x29, #-56]
	b	LBB306_3
LBB306_3:                               ;   Parent Loop BB306_1 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldur	x8, [x29, #-56]
	subs	x8, x8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB306_9
	b	LBB306_4
LBB306_4:                               ;   in Loop: Header=BB306_3 Depth=2
	ldur	x0, [x29, #-16]
	ldur	x8, [x29, #-40]
	mov	x1, x8
	ldur	x8, [x29, #-48]
	mov	x2, x8
	mov	w4, #0
	str	w4, [sp, #32]                   ; 4-byte Folded Spill
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	w4, [sp, #32]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	x8, [x29, #-40]
	mov	x1, x8
	ldur	x8, [x29, #-56]
	mov	x2, x8
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #36]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fcmp	s0, s1
	cset	w8, pl
	tbnz	w8, #0, LBB306_6
	b	LBB306_5
LBB306_5:                               ;   in Loop: Header=BB306_3 Depth=2
	ldur	x8, [x29, #-56]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB306_7
LBB306_6:                               ;   in Loop: Header=BB306_3 Depth=2
	ldur	x8, [x29, #-48]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB306_7
LBB306_7:                               ;   in Loop: Header=BB306_3 Depth=2
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-48]
	b	LBB306_8
LBB306_8:                               ;   in Loop: Header=BB306_3 Depth=2
	ldur	x8, [x29, #-56]
	add	x8, x8, #1
	stur	x8, [x29, #-56]
	b	LBB306_3
LBB306_9:                               ;   in Loop: Header=BB306_1 Depth=1
	movi	d0, #0000000000000000
	stur	s0, [x29, #-60]
	str	xzr, [sp, #56]
	b	LBB306_10
LBB306_10:                              ;   Parent Loop BB306_1 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #56]
	subs	x8, x8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB306_13
	b	LBB306_11
LBB306_11:                              ;   in Loop: Header=BB306_10 Depth=2
	ldur	x0, [x29, #-16]
	ldur	x8, [x29, #-40]
	mov	x1, x8
	ldr	x8, [sp, #56]
	mov	x2, x8
	mov	w4, #0
	str	w4, [sp, #20]                   ; 4-byte Folded Spill
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	w4, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	x8, [x29, #-40]
	mov	x1, x8
	ldur	x8, [x29, #-48]
	mov	x2, x8
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	w4, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fsub	s0, s0, s1
	str	s0, [sp, #16]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	x8, [x29, #-40]
	mov	x1, x8
	ldr	x8, [sp, #56]
	mov	x2, x8
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #16]                   ; 4-byte Folded Reload
	ldr	w4, [sp, #20]                   ; 4-byte Folded Reload
	str	s0, [x0]
	ldur	x0, [x29, #-24]
	ldur	x8, [x29, #-40]
	mov	x1, x8
	ldr	x8, [sp, #56]
	mov	x2, x8
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	bl	__Z3expB6v15007f
	fmov	s1, s0
	ldur	s0, [x29, #-60]
	fadd	s0, s0, s1
	stur	s0, [x29, #-60]
	b	LBB306_12
LBB306_12:                              ;   in Loop: Header=BB306_10 Depth=2
	ldr	x8, [sp, #56]
	add	x8, x8, #1
	str	x8, [sp, #56]
	b	LBB306_10
LBB306_13:                              ;   in Loop: Header=BB306_1 Depth=1
	ldur	s0, [x29, #-60]
	bl	__Z3logB6v15007f
	str	s0, [sp, #52]
	str	xzr, [sp, #40]
	b	LBB306_14
LBB306_14:                              ;   Parent Loop BB306_1 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	x8, [sp, #40]
	subs	x8, x8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB306_17
	b	LBB306_15
LBB306_15:                              ;   in Loop: Header=BB306_14 Depth=2
	ldr	s0, [sp, #52]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	x8, [x29, #-40]
	mov	x1, x8
	ldr	x8, [sp, #40]
	mov	x2, x8
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s1, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [x0]
	fsub	s0, s0, s1
	str	s0, [x0]
	b	LBB306_16
LBB306_16:                              ;   in Loop: Header=BB306_14 Depth=2
	ldr	x8, [sp, #40]
	add	x8, x8, #1
	str	x8, [sp, #40]
	b	LBB306_14
LBB306_17:                              ;   in Loop: Header=BB306_1 Depth=1
	b	LBB306_18
LBB306_18:                              ;   in Loop: Header=BB306_1 Depth=1
	ldur	x8, [x29, #-40]
	add	x8, x8, #1
	stur	x8, [x29, #-40]
	b	LBB306_1
LBB306_19:
	.cfi_def_cfa wsp, 144
	ldp	x29, x30, [sp, #128]            ; 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.private_extern	__Z3expB6v15007f        ; -- Begin function _Z3expB6v15007f
	.globl	__Z3expB6v15007f
	.weak_definition	__Z3expB6v15007f
	.p2align	2
__Z3expB6v15007f:                       ; @_Z3expB6v15007f
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	s0, [x29, #-4]
	ldur	s0, [x29, #-4]
	bl	_expf
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.private_extern	__Z3logB6v15007f        ; -- Begin function _Z3logB6v15007f
	.globl	__Z3logB6v15007f
	.weak_definition	__Z3logB6v15007f
	.p2align	2
__Z3logB6v15007f:                       ; @_Z3logB6v15007f
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	s0, [x29, #-4]
	ldur	s0, [x29, #-4]
	bl	_logf
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE17backward_cpu_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE17backward_cpu_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE17backward_cpu_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE17backward_cpu_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE: ; @_ZN10NLLSoftmaxILi64ELi10EE17backward_cpu_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	x2, [sp, #8]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	x2, [sp, #8]
	bl	__ZN10NLLSoftmaxILi64ELi10EE13backward_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE18backward_cuda_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE18backward_cuda_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE18backward_cuda_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE18backward_cuda_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE: ; @_ZN10NLLSoftmaxILi64ELi10EE18backward_cuda_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	x2, [sp, #8]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.147@PAGE
	add	x0, x0, l_.str.147@PAGEOFF
	mov	w1, #281
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN10NLLSoftmaxILi64ELi10EE13backward_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE ; -- Begin function _ZN10NLLSoftmaxILi64ELi10EE13backward_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.weak_definition	__ZN10NLLSoftmaxILi64ELi10EE13backward_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.p2align	2
__ZN10NLLSoftmaxILi64ELi10EE13backward_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE: ; @_ZN10NLLSoftmaxILi64ELi10EE13backward_baseER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-28]
	add	x0, x8, #2952
	ldur	w1, [x29, #-28]
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EE6set_n0Ei
	stur	wzr, [x29, #-32]
	b	LBB311_1
LBB311_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB311_3 Depth 2
	ldur	w8, [x29, #-32]
	ldur	w9, [x29, #-28]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB311_11
	b	LBB311_2
LBB311_2:                               ;   in Loop: Header=BB311_1 Depth=1
	stur	wzr, [x29, #-36]
	b	LBB311_3
LBB311_3:                               ;   Parent Loop BB311_1 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldur	w8, [x29, #-36]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB311_9
	b	LBB311_4
LBB311_4:                               ;   in Loop: Header=BB311_3 Depth=2
	ldur	w8, [x29, #-36]
	str	w8, [sp, #28]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-32]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	ldr	w9, [x0]
	subs	w8, w8, w9
	cset	w8, ne
	tbnz	w8, #0, LBB311_6
	b	LBB311_5
LBB311_5:                               ;   in Loop: Header=BB311_3 Depth=2
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-32]
	mov	w4, #0
	str	w4, [sp, #16]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #16]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	add	x0, x8, #128
	ldur	w1, [x29, #-32]
	ldur	w2, [x29, #-36]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	bl	__Z3expB6v15007f
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #16]                   ; 4-byte Folded Reload
	fmov	s2, s0
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	fmov	s1, #-1.00000000
	fadd	s1, s1, s2
	fmul	s0, s0, s1
	str	s0, [sp, #24]                   ; 4-byte Folded Spill
	add	x0, x8, #2952
	ldur	w1, [x29, #-32]
	ldur	w2, [x29, #-36]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #24]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB311_7
LBB311_6:                               ;   in Loop: Header=BB311_3 Depth=2
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-32]
	mov	w4, #0
	str	w4, [sp, #4]                    ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	add	x0, x8, #128
	ldur	w1, [x29, #-32]
	ldur	w2, [x29, #-36]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	bl	__Z3expB6v15007f
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #4]                    ; 4-byte Folded Reload
	fmov	s1, s0
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #2952
	ldur	w1, [x29, #-32]
	ldur	w2, [x29, #-36]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB311_7
LBB311_7:                               ;   in Loop: Header=BB311_3 Depth=2
	b	LBB311_8
LBB311_8:                               ;   in Loop: Header=BB311_3 Depth=2
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB311_3
LBB311_9:                               ;   in Loop: Header=BB311_1 Depth=1
	b	LBB311_10
LBB311_10:                              ;   in Loop: Header=BB311_1 Depth=1
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB311_1
LBB311_11:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z10mnist_mainiPPc             ; -- Begin function _Z10mnist_mainiPPc
	.p2align	2
__Z10mnist_mainiPPc:                    ; @_Z10mnist_mainiPPc
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #768
	stur	w0, [x29, #-20]
	stur	x1, [x29, #-32]
	ldur	w0, [x29, #-20]
	ldur	x1, [x29, #-32]
	sub	x8, x29, #152
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	bl	__ZL10parse_argsiPPc
	mov	w0, #64
	stur	w0, [x29, #-156]
	ldur	w1, [x29, #-120]
	bl	__ZL5min_iii
	stur	w0, [x29, #-160]
	mov	w8, #1
	stur	w8, [x29, #-164]
	mov	w8, #28
	stur	w8, [x29, #-168]
	stur	w8, [x29, #-172]
	mov	w8, #10
	stur	w8, [x29, #-176]
	ldur	x8, [x29, #-128]
                                        ; kill: def $w8 killed $w8 killed $x8
	stur	w8, [x29, #-180]
	add	x0, sp, #464
	str	x0, [sp, #40]                   ; 8-byte Folded Spill
	bl	__ZN6loggerC1Ev
	ldr	x1, [sp, #32]                   ; 8-byte Folded Reload
	add	x0, sp, #344
	str	x0, [sp, #48]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #48]                   ; 8-byte Folded Reload
	bl	__ZN6logger9start_logE11cmdline_opt
	ldur	x1, [x29, #-96]
	add	x0, sp, #336
	bl	__ZN9rnd_gen_t4seedEy
	movi	d0, #0000000000000000
	str	d0, [sp, #328]
	str	d0, [sp, #320]
	ldur	x8, [x29, #-88]
	str	x8, [sp, #312]
	ldur	x8, [x29, #-80]
	str	x8, [sp, #304]
	ldr	x8, [sp, #312]
	subs	x8, x8, #0
	cset	w8, ne
	and	w8, w8, #0x1
	scvtf	s1, w8
	fmov	s0, #0.25000000
	fmul	s0, s0, s1
	str	s0, [sp, #256]
	ldr	x8, [sp, #312]
	str	x8, [sp, #264]
	ldr	x8, [sp, #304]
	subs	x8, x8, #0
	cset	w8, ne
	and	w8, w8, #0x1
	scvtf	s1, w8
	fmov	s0, #0.50000000
	fmul	s0, s0, s1
	str	s0, [sp, #280]
	ldr	x8, [sp, #304]
	str	x8, [sp, #288]
	str	wzr, [sp, #244]
	b	LBB312_1
LBB312_1:                               ; =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #244]
	ldur	w9, [x29, #-180]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB312_4
	b	LBB312_2
LBB312_2:                               ;   in Loop: Header=BB312_1 Depth=1
	ldr	w9, [sp, #244]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.121@PAGE
	add	x0, x0, l_.str.121@PAGEOFF
	bl	_printf
	add	x0, sp, #112
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	sub	x1, x29, #152
	mov	x2, #120
	bl	_memcpy
	add	x0, sp, #56
	str	x0, [sp, #24]                   ; 8-byte Folded Spill
	add	x1, sp, #248
	mov	x2, #56
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x3, [sp, #24]                   ; 8-byte Folded Reload
	ldur	w4, [x29, #-160]
	add	x1, sp, #464
	add	x2, sp, #336
	mov	w5, #10
	bl	__ZL15grad_check_lossI5MNISTILi64ELi1ELi28ELi28ELi10EE6tensorIfLi64ELi1ELi28ELi28EES2_IiLi64ELi1ELi1ELi1EES2_IfLi64ELi1ELi1ELi1EE8MNISTCfgEd11cmdline_optP6loggerR9rnd_gen_tT3_ii
	str	d0, [sp, #232]
	ldr	d0, [sp, #328]
	fcvt	s0, d0
	ldr	d1, [sp, #232]
	fcvt	s1, d1
	bl	__ZL5max_rff
	fcvt	d0, s0
	str	d0, [sp, #328]
	ldr	d1, [sp, #232]
	ldr	d0, [sp, #320]
	fadd	d0, d0, d1
	str	d0, [sp, #320]
	b	LBB312_3
LBB312_3:                               ;   in Loop: Header=BB312_1 Depth=1
	ldr	w8, [sp, #244]
	add	w8, w8, #1
	str	w8, [sp, #244]
	b	LBB312_1
LBB312_4:
	ldr	x8, [sp, #328]
	mov	x9, sp
	str	x8, [x9]
	adrp	x0, l_.str.122@PAGE
	add	x0, x0, l_.str.122@PAGEOFF
	bl	_printf
	ldr	d0, [sp, #320]
	ldur	s2, [x29, #-180]
                                        ; implicit-def: $d1
	fmov	s1, s2
	sshll.2d	v1, v1, #0
                                        ; kill: def $d1 killed $d1 killed $q1
	scvtf	d1, d1
	fdiv	d0, d0, d1
	mov	x8, sp
	str	d0, [x8]
	adrp	x0, l_.str.123@PAGE
	add	x0, x0, l_.str.123@PAGEOFF
	bl	_printf
	add	x0, sp, #464
	bl	__ZN6logger7end_logEv
	mov	w0, #0
	add	sp, sp, #768
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function _ZL15grad_check_lossI5MNISTILi64ELi1ELi28ELi28ELi10EE6tensorIfLi64ELi1ELi28ELi28EES2_IiLi64ELi1ELi1ELi1EES2_IfLi64ELi1ELi1ELi1EE8MNISTCfgEd11cmdline_optP6loggerR9rnd_gen_tT3_ii
__ZL15grad_check_lossI5MNISTILi64ELi1ELi28ELi28ELi10EE6tensorIfLi64ELi1ELi28ELi28EES2_IiLi64ELi1ELi1ELi1EES2_IfLi64ELi1ELi1ELi1EE8MNISTCfgEd11cmdline_optP6loggerR9rnd_gen_tT3_ii: ; @_ZL15grad_check_lossI5MNISTILi64ELi1ELi28ELi28ELi10EE6tensorIfLi64ELi1ELi28ELi28EES2_IiLi64ELi1ELi1ELi1EES2_IfLi64ELi1ELi1ELi1EE8MNISTCfgEd11cmdline_optP6loggerR9rnd_gen_tT3_ii
Lfunc_begin6:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception6
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	.cfi_remember_state
	sub	sp, sp, #592
	str	x0, [sp, #184]                  ; 8-byte Folded Spill
	str	x3, [sp, #192]                  ; 8-byte Folded Spill
	stur	x1, [x29, #-24]
	stur	x2, [x29, #-32]
	stur	w4, [x29, #-36]
	stur	w5, [x29, #-40]
	mov	x0, #46072
	movk	x0, #1578, lsl #16
	str	x0, [sp, #200]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #200]                  ; 8-byte Folded Reload
	str	x0, [sp, #208]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #208]                  ; 8-byte Folded Reload
Ltmp103:
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC1Ev
Ltmp104:
	b	LBB313_1
LBB313_1:
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	stur	x8, [x29, #-48]
	ldur	x8, [x29, #-48]
	str	x8, [sp, #64]                   ; 8-byte Folded Spill
	sub	x0, x29, #184
	str	x0, [sp, #72]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x1, [sp, #192]                  ; 8-byte Folded Reload
	ldur	x8, [x29, #-24]
	str	x8, [sp, #80]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-32]
	str	x8, [sp, #88]                   ; 8-byte Folded Spill
	sub	x0, x29, #240
	str	x0, [sp, #96]                   ; 8-byte Folded Spill
	mov	x2, #56
	bl	_memcpy
	ldr	x0, [sp, #64]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #72]                   ; 8-byte Folded Reload
	ldr	x2, [sp, #80]                   ; 8-byte Folded Reload
	ldr	x3, [sp, #88]                   ; 8-byte Folded Reload
	ldr	x4, [sp, #96]                   ; 8-byte Folded Reload
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t8MNISTCfg
	mov	x0, #4100
	movk	x0, #3, lsl #16
	str	x0, [sp, #144]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #104]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #104]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-248]
	ldur	x0, [x29, #-248]
	ldur	w1, [x29, #-36]
	ldur	x2, [x29, #-32]
	fmov	s0, #-1.00000000
	str	s0, [sp, #136]                  ; 4-byte Folded Spill
	fmov	s1, #1.00000000
	str	s1, [sp, #140]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE12init_uniformEiR9rnd_gen_tff
	mov	x0, #260
	str	x0, [sp, #120]                  ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #120]                  ; 8-byte Folded Reload
	str	x0, [sp, #112]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #112]                  ; 8-byte Folded Reload
	stur	x0, [x29, #-256]
	ldur	x0, [x29, #-256]
	ldur	w1, [x29, #-36]
	ldur	x2, [x29, #-32]
	ldur	w4, [x29, #-40]
	mov	w3, #0
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EE14init_uniform_iEiR9rnd_gen_tii
	ldr	x0, [sp, #120]                  ; 8-byte Folded Reload
	bl	__Znwm
	ldr	x1, [sp, #120]                  ; 8-byte Folded Reload
	str	x0, [sp, #128]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #128]                  ; 8-byte Folded Reload
	ldr	s0, [sp, #136]                  ; 4-byte Folded Reload
	ldr	s1, [sp, #140]                  ; 4-byte Folded Reload
	str	x0, [sp, #344]
	ldr	x0, [sp, #344]
	ldur	w1, [x29, #-36]
	ldur	x2, [x29, #-32]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	ldr	x0, [sp, #144]                  ; 8-byte Folded Reload
	mov	w8, #4719
	movk	w8, #14979, lsl #16
	fmov	s0, w8
	str	s0, [sp, #340]
	bl	__Znwm
	ldr	x1, [sp, #144]                  ; 8-byte Folded Reload
	str	x0, [sp, #152]                  ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #152]                  ; 8-byte Folded Reload
	str	x0, [sp, #328]
	ldr	x0, [sp, #328]
	ldur	w1, [x29, #-36]
	ldur	x2, [x29, #-32]
	ldr	s0, [sp, #340]
	fneg	s0, s0
	ldr	s1, [sp, #340]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi1ELi28ELi28EEEPT_S3_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	str	x0, [sp, #320]
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI6tensorIfLi64ELi1ELi28ELi28EEEPT_S3_i
	str	x0, [sp, #312]
	ldr	x0, [sp, #320]
	ldr	x1, [sp, #328]
	fmov	s0, #-0.50000000
	str	s0, [sp, #164]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE4add_EfRS0_
	ldr	x0, [sp, #312]
	ldr	x1, [sp, #328]
	fmov	s0, #0.50000000
	str	s0, [sp, #168]                  ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE4add_EfRS0_
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-48]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI5MNISTILi64ELi1ELi28ELi28ELi10EEEPT_S3_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	str	x0, [sp, #304]
	ldur	x0, [x29, #-48]
	ldr	w1, [x8, #100]
	bl	__Z9make_copyI5MNISTILi64ELi1ELi28ELi28ELi10EEEPT_S3_i
	str	x0, [sp, #296]
	ldr	x0, [sp, #304]
	ldur	x1, [x29, #-32]
	ldr	s0, [sp, #340]
	fneg	s0, s0
	ldr	s1, [sp, #340]
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9rand_gradER9rnd_gen_tff
	ldr	x0, [sp, #296]
	ldr	x1, [sp, #304]
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9copy_gradERS0_
	ldr	s0, [sp, #164]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #304]
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8add_gradEf
	ldr	s0, [sp, #168]                  ; 4-byte Folded Reload
	ldr	x0, [sp, #296]
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8add_gradEf
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #344]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #320]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #312]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-256]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-48]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #304]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #296]
	ldr	w1, [x8, #100]
	bl	__Z6to_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	ldur	x0, [x29, #-48]
	ldur	x1, [x29, #-248]
	ldur	x2, [x29, #-256]
	mov	w3, #1
	str	w3, [sp, #172]                  ; 4-byte Folded Spill
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7forwardER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EEi
	str	x0, [sp, #288]
	ldur	x0, [x29, #-48]
	ldr	x1, [sp, #344]
	ldur	x2, [x29, #-256]
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	ldr	w3, [sp, #172]                  ; 4-byte Folded Reload
	str	x0, [sp, #280]
	ldr	x0, [sp, #304]
	ldr	x1, [sp, #320]
	ldur	x2, [x29, #-256]
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7forwardER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EEi
	ldr	w3, [sp, #172]                  ; 4-byte Folded Reload
	str	x0, [sp, #272]
	ldr	x0, [sp, #296]
	ldr	x1, [sp, #312]
	ldur	x2, [x29, #-256]
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7forwardER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EEi
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	str	x0, [sp, #264]
	ldur	x0, [x29, #-48]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #304]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #296]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	ldr	x0, [sp, #344]
	ldr	x1, [sp, #272]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	str	d0, [sp, #256]
	ldr	x0, [sp, #344]
	ldr	x1, [sp, #288]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	str	d0, [sp, #248]
	ldr	x0, [sp, #344]
	ldr	x1, [sp, #264]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	str	d0, [sp, #240]
	ldr	x0, [sp, #280]
	ldr	x1, [sp, #328]
	bl	__ZN6tensorIfLi64ELi1ELi28ELi28EE3dotERS0_
	str	d0, [sp, #232]
	ldur	x0, [x29, #-48]
	ldr	x1, [sp, #304]
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE13grad_dot_gradERS0_
	str	d0, [sp, #224]
	ldr	d0, [sp, #232]
	ldr	d1, [sp, #224]
	ldr	d2, [sp, #256]
	ldr	d3, [sp, #248]
	ldr	d4, [sp, #240]
	bl	__ZL10show_errorddddd
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	fcvt	d0, s0
	str	d0, [sp, #216]
	ldr	x0, [sp, #344]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-248]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #320]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #312]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-48]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #304]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #296]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldur	x0, [x29, #-256]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIiLi64ELi1ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x0, [sp, #328]
	ldr	w1, [x8, #100]
	bl	__Z7del_devI6tensorIfLi64ELi1ELi28ELi28EEEvPT_i
	ldr	x8, [sp, #344]
	str	x8, [sp, #176]                  ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB313_3
	b	LBB313_2
LBB313_2:
	ldr	x0, [sp, #176]                  ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB313_3
LBB313_3:
	ldur	x8, [x29, #-248]
	str	x8, [sp, #56]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB313_5
	b	LBB313_4
LBB313_4:
	ldr	x0, [sp, #56]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB313_5
LBB313_5:
	ldr	x8, [sp, #320]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB313_7
	b	LBB313_6
LBB313_6:
	ldr	x0, [sp, #48]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB313_7
LBB313_7:
	ldr	x8, [sp, #312]
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB313_9
	b	LBB313_8
LBB313_8:
	ldr	x0, [sp, #40]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB313_9
LBB313_9:
	ldur	x8, [x29, #-48]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB313_11
	b	LBB313_10
LBB313_10:
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB313_11
LBB313_11:
	ldr	x8, [sp, #304]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB313_13
	b	LBB313_12
LBB313_12:
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB313_13
LBB313_13:
	ldr	x8, [sp, #296]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB313_15
	b	LBB313_14
LBB313_14:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB313_15
LBB313_15:
	ldur	x8, [x29, #-256]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB313_17
	b	LBB313_16
LBB313_16:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB313_17
LBB313_17:
	ldr	x8, [sp, #328]
	str	x8, [sp]                        ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB313_19
	b	LBB313_18
LBB313_18:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB313_19
LBB313_19:
	ldr	d0, [sp, #216]
	add	sp, sp, #592
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
LBB313_20:
	.cfi_restore_state
Ltmp105:
	mov	x9, x0
	ldr	x0, [sp, #208]                  ; 8-byte Folded Reload
	mov	x8, x1
	stur	x9, [x29, #-56]
	stur	w8, [x29, #-60]
	bl	__ZdlPv
	b	LBB313_21
LBB313_21:
	ldur	x0, [x29, #-56]
	bl	__Unwind_Resume
Lfunc_end6:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table313:
Lexception6:
	.byte	255                             ; @LPStart Encoding = omit
	.byte	255                             ; @TType Encoding = omit
	.byte	1                               ; Call site Encoding = uleb128
	.uleb128 Lcst_end6-Lcst_begin6
Lcst_begin6:
	.uleb128 Lfunc_begin6-Lfunc_begin6      ; >> Call Site 1 <<
	.uleb128 Ltmp103-Lfunc_begin6           ;   Call between Lfunc_begin6 and Ltmp103
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp103-Lfunc_begin6           ; >> Call Site 2 <<
	.uleb128 Ltmp104-Ltmp103                ;   Call between Ltmp103 and Ltmp104
	.uleb128 Ltmp105-Lfunc_begin6           ;     jumps to Ltmp105
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp104-Lfunc_begin6           ; >> Call Site 3 <<
	.uleb128 Lfunc_end6-Ltmp104             ;   Call between Ltmp104 and Lfunc_end6
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
Lcst_end6:
	.p2align	2
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC1Ev ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC1Ev
	.weak_def_can_be_hidden	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC1Ev
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC1Ev: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t8MNISTCfg ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t8MNISTCfg
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t8MNISTCfg
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t8MNISTCfg: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t8MNISTCfg
	.cfi_startproc
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	sp, sp, #1680
	add	x8, sp, #480
	str	x8, [sp, #208]                  ; 8-byte Folded Spill
	str	x1, [sp, #184]                  ; 8-byte Folded Spill
	str	x4, [sp, #144]                  ; 8-byte Folded Spill
	str	x0, [x8, #1192]
	str	x2, [x8, #1184]
	str	x3, [x8, #1176]
	ldr	x0, [x8, #1192]
	str	x0, [sp, #176]                  ; 8-byte Folded Spill
	mov	x2, #120
	str	x2, [sp, #192]                  ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	ldr	x9, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x9, [x9, #1184]
	str	x9, [x8, #120]
	mov	x9, #5272
	movk	x9, #3, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	sub	x0, x29, #160
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x1, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	mov	x9, #50032
	movk	x9, #90, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	add	x0, sp, #1408
	str	x0, [sp, #32]                   ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #24]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	mov	x9, #50176
	movk	x9, #259, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	add	x0, sp, #1280
	str	x0, [sp, #48]                   ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	mov	x9, #2776
	movk	x9, #495, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #56]                   ; 8-byte Folded Spill
	add	x0, sp, #1152
	str	x0, [sp, #64]                   ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #56]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #64]                   ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	mov	x9, #2920
	movk	x9, #783, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #72]                   ; 8-byte Folded Spill
	add	x0, sp, #1024
	str	x0, [sp, #80]                   ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #72]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #80]                   ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	mov	x9, #3064
	movk	x9, #1035, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #88]                   ; 8-byte Folded Spill
	add	x0, sp, #896
	str	x0, [sp, #96]                   ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #88]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #96]                   ; 8-byte Folded Reload
	ldr	x4, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	ldur	q0, [x4, #8]
	str	q0, [x8, #400]
	ldr	x4, [x8, #400]
	ldr	x5, [x8, #408]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	mov	x9, #3224
	movk	x9, #1107, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #104]                  ; 8-byte Folded Spill
	add	x0, sp, #760
	str	x0, [sp, #112]                  ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #104]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #112]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	mov	x9, #39280
	movk	x9, #1575, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #120]                  ; 8-byte Folded Spill
	add	x0, sp, #632
	str	x0, [sp, #128]                  ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #120]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #128]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	mov	x9, #39424
	movk	x9, #1576, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #136]                  ; 8-byte Folded Spill
	add	x0, sp, #504
	str	x0, [sp, #152]                  ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #136]                  ; 8-byte Folded Reload
	ldr	x4, [sp, #144]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #152]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	ldr	q0, [x4, #32]
	str	q0, [x8]
	ldr	x4, [x8]
	ldr	x5, [x8, #8]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	mov	x9, #39584
	movk	x9, #1577, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #160]                  ; 8-byte Folded Spill
	add	x0, sp, #360
	str	x0, [sp, #168]                  ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #160]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #168]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg
	ldr	x8, [sp, #176]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #184]                  ; 8-byte Folded Reload
	ldr	x2, [sp, #192]                  ; 8-byte Folded Reload
	mov	x9, #40552
	movk	x9, #1578, lsl #16
	add	x8, x8, x9
	str	x8, [sp, #200]                  ; 8-byte Folded Spill
	add	x0, sp, #232
	str	x0, [sp, #216]                  ; 8-byte Folded Spill
	bl	_memcpy
	ldr	x0, [sp, #200]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #208]                  ; 8-byte Folded Reload
	ldr	x1, [sp, #216]                  ; 8-byte Folded Reload
	ldr	x2, [x8, #1184]
	ldr	x3, [x8, #1176]
	bl	__ZN10NLLSoftmaxILi64ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t13NLLSoftmaxCfg
	add	sp, sp, #1680
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z9make_copyI5MNISTILi64ELi1ELi28ELi28ELi10EEEPT_S3_i ; -- Begin function _Z9make_copyI5MNISTILi64ELi1ELi28ELi28ELi10EEEPT_S3_i
	.weak_definition	__Z9make_copyI5MNISTILi64ELi1ELi28ELi28ELi10EEEPT_S3_i
	.p2align	2
__Z9make_copyI5MNISTILi64ELi1ELi28ELi28ELi10EEEPT_S3_i: ; @_Z9make_copyI5MNISTILi64ELi1ELi28ELi28ELi10EEEPT_S3_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	mov	x0, #46072
	movk	x0, #1578, lsl #16
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x2, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x1, [x29, #-8]
	bl	_memcpy
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	str	x0, [sp, #24]
	ldr	x0, [sp, #24]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9rand_gradER9rnd_gen_tff ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9rand_gradER9rnd_gen_tff
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9rand_gradER9rnd_gen_tff
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9rand_gradER9rnd_gen_tff: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9rand_gradER9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	s0, [sp, #12]
	str	s1, [sp, #8]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #5272
	movk	x9, #3, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #16]
	ldr	s0, [sp, #12]
	ldr	s1, [sp, #8]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9rand_gradER9rnd_gen_tff
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #50176
	movk	x9, #259, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #16]
	ldr	s0, [sp, #12]
	ldr	s1, [sp, #8]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9rand_gradER9rnd_gen_tff
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #3224
	movk	x9, #1107, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #16]
	ldr	s0, [sp, #12]
	ldr	s1, [sp, #8]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE9rand_gradER9rnd_gen_tff
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #39584
	movk	x9, #1577, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #16]
	ldr	s0, [sp, #12]
	ldr	s1, [sp, #8]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE9rand_gradER9rnd_gen_tff
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9copy_gradERS0_ ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9copy_gradERS0_
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9copy_gradERS0_
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9copy_gradERS0_: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE9copy_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, #5272
	movk	x9, #3, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE9copy_gradERS0_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #50176
	movk	x9, #259, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9copy_gradERS0_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #3224
	movk	x9, #1107, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE9copy_gradERS0_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #39584
	movk	x9, #1577, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE9copy_gradERS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8add_gradEf ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8add_gradEf
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8add_gradEf
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8add_gradEf: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8add_gradEf
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, #5272
	movk	x9, #3, lsl #16
	add	x0, x8, x9
	ldur	s0, [x29, #-12]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8add_gradEf
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #50176
	movk	x9, #259, lsl #16
	add	x0, x8, x9
	ldur	s0, [x29, #-12]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8add_gradEf
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #3224
	movk	x9, #1107, lsl #16
	add	x0, x8, x9
	ldur	s0, [x29, #-12]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE8add_gradEf
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #39584
	movk	x9, #1577, lsl #16
	add	x0, x8, x9
	ldur	s0, [x29, #-12]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8add_gradEf
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z6to_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i ; -- Begin function _Z6to_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	.weak_definition	__Z6to_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	.p2align	2
__Z6to_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i: ; @_Z6to_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7forwardER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EEi ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7forwardER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EEi
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7forwardER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EEi
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7forwardER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EEi: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7forwardER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #128]            ; 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	w3, [x29, #-28]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #5272
	movk	x9, #3, lsl #16
	add	x0, x8, x9
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-28]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-40]
	mov	x9, #50032
	movk	x9, #90, lsl #16
	add	x0, x8, x9
	ldur	x1, [x29, #-40]
	ldur	w2, [x29, #-28]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-48]
	mov	x9, #50176
	movk	x9, #259, lsl #16
	add	x0, x8, x9
	ldur	x1, [x29, #-48]
	ldur	w2, [x29, #-28]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-56]
	mov	x9, #2776
	movk	x9, #495, lsl #16
	add	x0, x8, x9
	ldur	x1, [x29, #-56]
	ldur	w2, [x29, #-28]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #64]
	mov	x9, #2920
	movk	x9, #783, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #64]
	ldur	w2, [x29, #-28]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #56]
	mov	x9, #3064
	movk	x9, #1035, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #56]
	ldur	w2, [x29, #-28]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #48]
	mov	x9, #3224
	movk	x9, #1107, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #48]
	ldur	w2, [x29, #-28]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #40]
	mov	x9, #39280
	movk	x9, #1575, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #40]
	ldur	w2, [x29, #-28]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	mov	x9, #39424
	movk	x9, #1576, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #32]
	ldur	w2, [x29, #-28]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #24]
	mov	x9, #39584
	movk	x9, #1577, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #24]
	ldur	w2, [x29, #-28]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #16]
	mov	x9, #40552
	movk	x9, #1578, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #16]
	ldur	x2, [x29, #-24]
	ldur	w3, [x29, #-28]
	bl	__ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	.cfi_def_cfa wsp, 144
	ldp	x29, x30, [sp, #128]            ; 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #128]            ; 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, #40552
	movk	x9, #1578, lsl #16
	add	x0, x8, x9
	ldur	x1, [x29, #-16]
	ldur	x2, [x29, #-24]
	bl	__ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	mov	x9, #39584
	movk	x9, #1577, lsl #16
	add	x0, x8, x9
	ldur	x1, [x29, #-32]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-40]
	mov	x9, #39424
	movk	x9, #1576, lsl #16
	add	x0, x8, x9
	ldur	x1, [x29, #-40]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-48]
	mov	x9, #39280
	movk	x9, #1575, lsl #16
	add	x0, x8, x9
	ldur	x1, [x29, #-48]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-56]
	mov	x9, #3224
	movk	x9, #1107, lsl #16
	add	x0, x8, x9
	ldur	x1, [x29, #-56]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #64]
	mov	x9, #3064
	movk	x9, #1035, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #64]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #56]
	mov	x9, #2920
	movk	x9, #783, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #56]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #48]
	mov	x9, #2776
	movk	x9, #495, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #48]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	mov	x9, #50176
	movk	x9, #259, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #40]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #32]
	mov	x9, #50032
	movk	x9, #90, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #32]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #24]
	mov	x9, #5272
	movk	x9, #3, lsl #16
	add	x0, x8, x9
	ldr	x1, [sp, #24]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	str	x0, [sp, #16]
	ldr	x0, [sp, #16]
	.cfi_def_cfa wsp, 144
	ldp	x29, x30, [sp, #128]            ; 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7to_hostI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i ; -- Begin function _Z7to_hostI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	.weak_definition	__Z7to_hostI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	.p2align	2
__Z7to_hostI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i: ; @_Z7to_hostI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE13grad_dot_gradERS0_ ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE13grad_dot_gradERS0_
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE13grad_dot_gradERS0_
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE13grad_dot_gradERS0_: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE13grad_dot_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]
	movi	d0, #0000000000000000
	str	d0, [sp]
	ldr	x8, [sp, #8]
	mov	x9, #5272
	movk	x9, #3, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE13grad_dot_gradERS0_
	fmov	d1, d0
	ldr	d0, [sp]
	fadd	d0, d0, d1
	str	d0, [sp]
	ldr	x8, [sp, #8]
	mov	x9, #50176
	movk	x9, #259, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13grad_dot_gradERS0_
	fmov	d1, d0
	ldr	d0, [sp]
	fadd	d0, d0, d1
	str	d0, [sp]
	ldr	x8, [sp, #8]
	mov	x9, #3224
	movk	x9, #1107, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE13grad_dot_gradERS0_
	fmov	d1, d0
	ldr	d0, [sp]
	fadd	d0, d0, d1
	str	d0, [sp]
	ldr	x8, [sp, #8]
	mov	x9, #39584
	movk	x9, #1577, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE13grad_dot_gradERS0_
	fmov	d1, d0
	ldr	d0, [sp]
	fadd	d0, d0, d1
	str	d0, [sp]
	ldr	d0, [sp]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7del_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i ; -- Begin function _Z7del_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	.weak_definition	__Z7del_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	.p2align	2
__Z7del_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i: ; @_Z7del_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC2Ev ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC2Ev
	.weak_def_can_be_hidden	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC2Ev
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC2Ev: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #5272
	movk	x9, #3, lsl #16
	add	x0, x8, x9
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EEC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #50032
	movk	x9, #90, lsl #16
	add	x0, x8, x9
	bl	__ZN4ReluILi64ELi32ELi26ELi26EEC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #50176
	movk	x9, #259, lsl #16
	add	x0, x8, x9
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #2776
	movk	x9, #495, lsl #16
	add	x0, x8, x9
	bl	__ZN4ReluILi64ELi64ELi24ELi24EEC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #2920
	movk	x9, #783, lsl #16
	add	x0, x8, x9
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #3064
	movk	x9, #1035, lsl #16
	add	x0, x8, x9
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EEC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #3224
	movk	x9, #1107, lsl #16
	add	x0, x8, x9
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EEC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #39280
	movk	x9, #1575, lsl #16
	add	x0, x8, x9
	bl	__ZN4ReluILi64ELi128ELi1ELi1EEC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #39424
	movk	x9, #1576, lsl #16
	add	x0, x8, x9
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EEC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #39584
	movk	x9, #1577, lsl #16
	add	x0, x8, x9
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EEC1Ev
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #40552
	movk	x9, #1578, lsl #16
	add	x0, x8, x9
	bl	__ZN10NLLSoftmaxILi64ELi10EEC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EEC1Ev ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EEC1Ev
	.weak_def_can_be_hidden	__ZN4ReluILi64ELi32ELi26ELi26EEC1Ev
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EEC1Ev:    ; @_ZN4ReluILi64ELi32ELi26ELi26EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN4ReluILi64ELi32ELi26ELi26EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC1Ev ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC1Ev
	.weak_def_can_be_hidden	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC1Ev
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC1Ev: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EEC1Ev ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EEC1Ev
	.weak_def_can_be_hidden	__ZN4ReluILi64ELi64ELi24ELi24EEC1Ev
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EEC1Ev:    ; @_ZN4ReluILi64ELi64ELi24ELi24EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN4ReluILi64ELi64ELi24ELi24EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC1Ev ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC1Ev
	.weak_def_can_be_hidden	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC1Ev
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC1Ev: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EEC1Ev ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EEC1Ev
	.weak_def_can_be_hidden	__ZN7DropoutILi64ELi64ELi12ELi12EEC1Ev
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EEC1Ev: ; @_ZN7DropoutILi64ELi64ELi12ELi12EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EEC1Ev ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EEC1Ev
	.weak_def_can_be_hidden	__ZN6LinearILi64ELi128ELi64ELi12ELi12EEC1Ev
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EEC1Ev: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EEC1Ev ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EEC1Ev
	.weak_def_can_be_hidden	__ZN4ReluILi64ELi128ELi1ELi1EEC1Ev
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EEC1Ev:     ; @_ZN4ReluILi64ELi128ELi1ELi1EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN4ReluILi64ELi128ELi1ELi1EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EEC1Ev ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EEC1Ev
	.weak_def_can_be_hidden	__ZN7DropoutILi64ELi128ELi1ELi1EEC1Ev
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EEC1Ev:  ; @_ZN7DropoutILi64ELi128ELi1ELi1EEC1Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EEC2Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EEC2Ev ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EEC2Ev
	.weak_def_can_be_hidden	__ZN4ReluILi64ELi32ELi26ELi26EEC2Ev
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EEC2Ev:    ; @_ZN4ReluILi64ELi32ELi26ELi26EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC2Ev ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC2Ev
	.weak_def_can_be_hidden	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC2Ev
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC2Ev: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EEC2Ev ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EEC2Ev
	.weak_def_can_be_hidden	__ZN4ReluILi64ELi64ELi24ELi24EEC2Ev
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EEC2Ev:    ; @_ZN4ReluILi64ELi64ELi24ELi24EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC2Ev ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC2Ev
	.weak_def_can_be_hidden	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC2Ev
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC2Ev: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EEC2Ev ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EEC2Ev
	.weak_def_can_be_hidden	__ZN7DropoutILi64ELi64ELi12ELi12EEC2Ev
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EEC2Ev: ; @_ZN7DropoutILi64ELi64ELi12ELi12EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EEC2Ev ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EEC2Ev
	.weak_def_can_be_hidden	__ZN6LinearILi64ELi128ELi64ELi12ELi12EEC2Ev
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EEC2Ev: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EEC2Ev ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EEC2Ev
	.weak_def_can_be_hidden	__ZN4ReluILi64ELi128ELi1ELi1EEC2Ev
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EEC2Ev:     ; @_ZN4ReluILi64ELi128ELi1ELi1EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EEC2Ev ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EEC2Ev
	.weak_def_can_be_hidden	__ZN7DropoutILi64ELi128ELi1ELi1EEC2Ev
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EEC2Ev:  ; @_ZN7DropoutILi64ELi128ELi1ELi1EEC2Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	bl	__ZN11cmdline_optC1Ev
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.weak_definition	__ZN4ReluILi64ELi32ELi26ELi26EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg: ; @_ZN4ReluILi64ELi32ELi26ELi26EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	str	x2, [sp, #24]
	str	x3, [sp, #16]
	ldur	x0, [x29, #-16]
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [sp, #24]
	str	x8, [x9, #120]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE4initE11cmdline_optP6loggerR9rnd_gen_t16Convolution2DCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x1, [sp, #24]                   ; 8-byte Folded Spill
	stur	x0, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	ldur	x0, [x29, #-16]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-24]
	str	x8, [x9, #120]
	mov	w0, #288
	bl	__Z4sqrtB6v15007IiENSt3__19enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	fmov	d1, d0
	fmov	d0, #1.00000000
	fdiv	d0, d0, d1
	fcvt	s0, d0
	stur	s0, [x29, #-36]
	add	x0, x8, #136
	ldur	x2, [x29, #-32]
	ldur	s0, [x29, #-36]
	fneg	s0, s0
	ldur	s1, [x29, #-36]
	mov	w1, #64
	str	w1, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE12init_uniformEiR9rnd_gen_tff
	ldr	w1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #8332
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	ldur	x2, [x29, #-32]
	ldur	s0, [x29, #-36]
	fneg	s0, s0
	ldur	s1, [x29, #-36]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #49824
	movk	x9, #230, lsl #16
	add	x0, x8, x9
	ldr	s0, [x1, #16]
	mov	w8, #26214
	movk	w8, #16230, lsl #16
	fmov	s1, w8
	str	s1, [sp, #36]                   ; 4-byte Folded Spill
	mov	w8, #14269
	movk	w8, #13702, lsl #16
	fmov	s2, w8
	str	s2, [sp, #40]                   ; 4-byte Folded Spill
	bl	__ZN8AdaDeltaILi64ELi32ELi3ELi3EE4initEfff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s1, [sp, #36]                   ; 4-byte Folded Reload
	ldr	s2, [sp, #40]                   ; 4-byte Folded Reload
	mov	x9, #17084
	movk	x9, #235, lsl #16
	add	x0, x8, x9
	ldr	s0, [x1, #16]
	bl	__ZN8AdaDeltaILi64ELi1ELi1ELi1EE4initEfff
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.weak_definition	__ZN4ReluILi64ELi64ELi24ELi24EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg: ; @_ZN4ReluILi64ELi64ELi24ELi24EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	str	x2, [sp, #24]
	str	x3, [sp, #16]
	ldur	x0, [x29, #-16]
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [sp, #24]
	str	x8, [x9, #120]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg
	.weak_definition	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE4initE11cmdline_optP6loggerR9rnd_gen_t15MaxPooling2DCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	str	x2, [sp, #24]
	str	x3, [sp, #16]
	ldur	x0, [x29, #-16]
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [sp, #24]
	str	x8, [x9, #120]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	.weak_definition	__ZN7DropoutILi64ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg: ; @_ZN7DropoutILi64ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x4, [x29, #-16]
	stur	x5, [x29, #-8]
	str	x0, [sp, #24]
	str	x2, [sp, #16]
	str	x3, [sp, #8]
	ldr	x0, [sp, #24]
	str	x0, [sp]                        ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	x9, [sp, #16]
	str	x9, [x8, #120]
	ldur	w9, [x29, #-16]
	mov	x10, #144
	movk	x10, #72, lsl #16
	str	w9, [x8, x10]
	add	x0, x8, #128
	ldur	x1, [x29, #-8]
	bl	__ZN9rnd_gen_t4seedEy
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE4initE11cmdline_optP6loggerR9rnd_gen_t9LinearCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x1, [sp, #8]                    ; 8-byte Folded Spill
	stur	x0, [x29, #-16]
	stur	x2, [x29, #-24]
	str	x3, [sp, #32]
	ldur	x0, [x29, #-16]
	str	x0, [sp]                        ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp]                        ; 8-byte Folded Reload
	ldur	x8, [x29, #-24]
	str	x8, [x9, #120]
	mov	w0, #9216
	bl	__Z4sqrtB6v15007IiENSt3__19enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	fmov	d1, d0
	fmov	d0, #1.00000000
	fdiv	d0, d0, d1
	fcvt	s0, d0
	str	s0, [sp, #28]
	add	x0, x8, #136
	ldr	x2, [sp, #32]
	ldr	s0, [sp, #28]
	fneg	s0, s0
	ldr	s1, [sp, #28]
	mov	w1, #64
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #140
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldr	x2, [sp, #32]
	ldr	s0, [sp, #28]
	fneg	s0, s0
	ldr	s1, [sp, #28]
	mov	w1, #128
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	x1, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #33952
	movk	x9, #180, lsl #16
	add	x0, x8, x9
	ldr	s0, [x1, #16]
	mov	w8, #26214
	movk	w8, #16230, lsl #16
	fmov	s1, w8
	str	s1, [sp, #20]                   ; 4-byte Folded Spill
	mov	w8, #14269
	movk	w8, #13702, lsl #16
	fmov	s2, w8
	str	s2, [sp, #24]                   ; 4-byte Folded Spill
	bl	__ZN8AdaDeltaILi64ELi12ELi12ELi128EE4initEfff
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	x1, [sp, #8]                    ; 8-byte Folded Reload
	ldr	s1, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s2, [sp, #24]                   ; 4-byte Folded Reload
	mov	x9, #33980
	movk	x9, #468, lsl #16
	add	x0, x8, x9
	ldr	s0, [x1, #16]
	bl	__ZN8AdaDeltaILi128ELi1ELi1ELi1EE4initEfff
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.weak_definition	__ZN4ReluILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg: ; @_ZN4ReluILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t7ReluCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-16]
	str	x2, [sp, #24]
	str	x3, [sp, #16]
	ldur	x0, [x29, #-16]
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [sp, #24]
	str	x8, [x9, #120]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	.weak_definition	__ZN7DropoutILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg: ; @_ZN7DropoutILi64ELi128ELi1ELi1EE4initE11cmdline_optP6loggerR9rnd_gen_t10DropoutCfg
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x4, [x29, #-16]
	stur	x5, [x29, #-8]
	str	x0, [sp, #24]
	str	x2, [sp, #16]
	str	x3, [sp, #8]
	ldr	x0, [sp, #24]
	str	x0, [sp]                        ; 8-byte Folded Spill
	mov	x2, #120
	bl	_memcpy
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	x9, [sp, #16]
	str	x9, [x8, #120]
	ldur	w9, [x29, #-16]
	mov	x10, #144
	movk	x10, #1, lsl #16
	str	w9, [x8, x10]
	add	x0, x8, #128
	ldur	x1, [x29, #-8]
	bl	__ZN9rnd_gen_t4seedEy
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB351_1
LBB351_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB351_3 Depth 2
                                        ;       Child Loop BB351_5 Depth 3
                                        ;         Child Loop BB351_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB351_16
	b	LBB351_2
LBB351_2:                               ;   in Loop: Header=BB351_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB351_3
LBB351_3:                               ;   Parent Loop BB351_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB351_5 Depth 3
                                        ;         Child Loop BB351_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB351_14
	b	LBB351_4
LBB351_4:                               ;   in Loop: Header=BB351_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB351_5
LBB351_5:                               ;   Parent Loop BB351_1 Depth=1
                                        ;     Parent Loop BB351_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB351_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB351_12
	b	LBB351_6
LBB351_6:                               ;   in Loop: Header=BB351_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB351_7
LBB351_7:                               ;   Parent Loop BB351_1 Depth=1
                                        ;     Parent Loop BB351_3 Depth=2
                                        ;       Parent Loop BB351_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB351_10
	b	LBB351_8
LBB351_8:                               ;   in Loop: Header=BB351_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB351_9
LBB351_9:                               ;   in Loop: Header=BB351_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB351_7
LBB351_10:                              ;   in Loop: Header=BB351_5 Depth=3
	b	LBB351_11
LBB351_11:                              ;   in Loop: Header=BB351_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB351_5
LBB351_12:                              ;   in Loop: Header=BB351_3 Depth=2
	b	LBB351_13
LBB351_13:                              ;   in Loop: Header=BB351_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB351_3
LBB351_14:                              ;   in Loop: Header=BB351_1 Depth=1
	b	LBB351_15
LBB351_15:                              ;   in Loop: Header=BB351_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB351_1
LBB351_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi64ELi32ELi3ELi3EE4initEfff ; -- Begin function _ZN8AdaDeltaILi64ELi32ELi3ELi3EE4initEfff
	.weak_definition	__ZN8AdaDeltaILi64ELi32ELi3ELi3EE4initEfff
	.p2align	2
__ZN8AdaDeltaILi64ELi32ELi3ELi3EE4initEfff: ; @_ZN8AdaDeltaILi64ELi32ELi3ELi3EE4initEfff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	s1, [x29, #-16]
	stur	s2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w9, [x29, #-12]
	mov	x10, #32784
	movk	x10, #4, lsl #16
	str	w9, [x8, x10]
	ldur	w9, [x29, #-16]
	mov	x10, #32788
	movk	x10, #4, lsl #16
	str	w9, [x8, x10]
	ldur	w9, [x29, #-20]
	mov	x10, #32792
	movk	x10, #4, lsl #16
	str	w9, [x8, x10]
	mov	x9, #8196
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	mov	w1, #64
	str	w1, [sp, #24]                   ; 4-byte Folded Spill
	movi	d0, #0000000000000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE10init_constEif
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE10init_constEif
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	mov	x9, #16392
	movk	x9, #2, lsl #16
	add	x0, x8, x9
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	mov	x9, #24588
	movk	x9, #3, lsl #16
	add	x0, x8, x9
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi64ELi1ELi1ELi1EE4initEfff ; -- Begin function _ZN8AdaDeltaILi64ELi1ELi1ELi1EE4initEfff
	.weak_definition	__ZN8AdaDeltaILi64ELi1ELi1ELi1EE4initEfff
	.p2align	2
__ZN8AdaDeltaILi64ELi1ELi1ELi1EE4initEfff: ; @_ZN8AdaDeltaILi64ELi1ELi1ELi1EE4initEfff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	s1, [x29, #-16]
	stur	s2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w9, [x29, #-12]
	str	w9, [x8, #1040]
	ldur	w9, [x29, #-16]
	str	w9, [x8, #1044]
	ldur	w9, [x29, #-20]
	str	w9, [x8, #1048]
	add	x0, x8, #260
	mov	w1, #64
	str	w1, [sp, #24]                   ; 4-byte Folded Spill
	movi	d0, #0000000000000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE10init_constEif
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE10init_constEif
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #520
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #780
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB354_2
	b	LBB354_1
LBB354_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB354_2:
	b	LBB354_3
LBB354_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	mov	x10, #1152
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	mov	x10, #36
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #12]
	mov	x10, #12
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE10init_constEif ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE10init_constEif
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE10init_constEif
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE10init_constEif: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=64 N1=32 N2=3 N3=3
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB356_1
LBB356_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB356_3 Depth 2
                                        ;       Child Loop BB356_5 Depth 3
                                        ;         Child Loop BB356_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB356_16
	b	LBB356_2
LBB356_2:                               ;   in Loop: Header=BB356_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB356_3
LBB356_3:                               ;   Parent Loop BB356_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB356_5 Depth 3
                                        ;         Child Loop BB356_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB356_14
	b	LBB356_4
LBB356_4:                               ;   in Loop: Header=BB356_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB356_5
LBB356_5:                               ;   Parent Loop BB356_1 Depth=1
                                        ;     Parent Loop BB356_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB356_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB356_12
	b	LBB356_6
LBB356_6:                               ;   in Loop: Header=BB356_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB356_7
LBB356_7:                               ;   Parent Loop BB356_1 Depth=1
                                        ;     Parent Loop BB356_3 Depth=2
                                        ;       Parent Loop BB356_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB356_10
	b	LBB356_8
LBB356_8:                               ;   in Loop: Header=BB356_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB356_9
LBB356_9:                               ;   in Loop: Header=BB356_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB356_7
LBB356_10:                              ;   in Loop: Header=BB356_5 Depth=3
	b	LBB356_11
LBB356_11:                              ;   in Loop: Header=BB356_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB356_5
LBB356_12:                              ;   in Loop: Header=BB356_3 Depth=2
	b	LBB356_13
LBB356_13:                              ;   in Loop: Header=BB356_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB356_3
LBB356_14:                              ;   in Loop: Header=BB356_1 Depth=1
	b	LBB356_15
LBB356_15:                              ;   in Loop: Header=BB356_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB356_1
LBB356_16:
	; InlineAsm Start
	; init_const ends N0=64 N1=32 N2=3 N3=3
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE10init_constEif ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE10init_constEif
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE10init_constEif
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE10init_constEif: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=64 N1=1 N2=1 N3=1
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB357_1
LBB357_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB357_3 Depth 2
                                        ;       Child Loop BB357_5 Depth 3
                                        ;         Child Loop BB357_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB357_16
	b	LBB357_2
LBB357_2:                               ;   in Loop: Header=BB357_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB357_3
LBB357_3:                               ;   Parent Loop BB357_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB357_5 Depth 3
                                        ;         Child Loop BB357_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB357_14
	b	LBB357_4
LBB357_4:                               ;   in Loop: Header=BB357_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB357_5
LBB357_5:                               ;   Parent Loop BB357_1 Depth=1
                                        ;     Parent Loop BB357_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB357_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB357_12
	b	LBB357_6
LBB357_6:                               ;   in Loop: Header=BB357_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB357_7
LBB357_7:                               ;   Parent Loop BB357_1 Depth=1
                                        ;     Parent Loop BB357_3 Depth=2
                                        ;       Parent Loop BB357_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB357_10
	b	LBB357_8
LBB357_8:                               ;   in Loop: Header=BB357_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB357_9
LBB357_9:                               ;   in Loop: Header=BB357_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB357_7
LBB357_10:                              ;   in Loop: Header=BB357_5 Depth=3
	b	LBB357_11
LBB357_11:                              ;   in Loop: Header=BB357_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB357_5
LBB357_12:                              ;   in Loop: Header=BB357_3 Depth=2
	b	LBB357_13
LBB357_13:                              ;   in Loop: Header=BB357_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB357_3
LBB357_14:                              ;   in Loop: Header=BB357_1 Depth=1
	b	LBB357_15
LBB357_15:                              ;   in Loop: Header=BB357_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB357_1
LBB357_16:
	; InlineAsm Start
	; init_const ends N0=64 N1=1 N2=1 N3=1
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB358_1
LBB358_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB358_3 Depth 2
                                        ;       Child Loop BB358_5 Depth 3
                                        ;         Child Loop BB358_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB358_16
	b	LBB358_2
LBB358_2:                               ;   in Loop: Header=BB358_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB358_3
LBB358_3:                               ;   Parent Loop BB358_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB358_5 Depth 3
                                        ;         Child Loop BB358_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB358_14
	b	LBB358_4
LBB358_4:                               ;   in Loop: Header=BB358_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB358_5
LBB358_5:                               ;   Parent Loop BB358_1 Depth=1
                                        ;     Parent Loop BB358_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB358_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB358_12
	b	LBB358_6
LBB358_6:                               ;   in Loop: Header=BB358_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB358_7
LBB358_7:                               ;   Parent Loop BB358_1 Depth=1
                                        ;     Parent Loop BB358_3 Depth=2
                                        ;       Parent Loop BB358_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB358_10
	b	LBB358_8
LBB358_8:                               ;   in Loop: Header=BB358_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB358_9
LBB358_9:                               ;   in Loop: Header=BB358_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB358_7
LBB358_10:                              ;   in Loop: Header=BB358_5 Depth=3
	b	LBB358_11
LBB358_11:                              ;   in Loop: Header=BB358_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB358_5
LBB358_12:                              ;   in Loop: Header=BB358_3 Depth=2
	b	LBB358_13
LBB358_13:                              ;   in Loop: Header=BB358_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB358_3
LBB358_14:                              ;   in Loop: Header=BB358_1 Depth=1
	b	LBB358_15
LBB358_15:                              ;   in Loop: Header=BB358_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB358_1
LBB358_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	s0, [x29, #-28]
	stur	s1, [x29, #-32]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	x8, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB359_1
LBB359_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB359_3 Depth 2
                                        ;       Child Loop BB359_5 Depth 3
                                        ;         Child Loop BB359_7 Depth 4
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB359_16
	b	LBB359_2
LBB359_2:                               ;   in Loop: Header=BB359_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB359_3
LBB359_3:                               ;   Parent Loop BB359_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB359_5 Depth 3
                                        ;         Child Loop BB359_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB359_14
	b	LBB359_4
LBB359_4:                               ;   in Loop: Header=BB359_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB359_5
LBB359_5:                               ;   Parent Loop BB359_1 Depth=1
                                        ;     Parent Loop BB359_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB359_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB359_12
	b	LBB359_6
LBB359_6:                               ;   in Loop: Header=BB359_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB359_7
LBB359_7:                               ;   Parent Loop BB359_1 Depth=1
                                        ;     Parent Loop BB359_3 Depth=2
                                        ;       Parent Loop BB359_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB359_10
	b	LBB359_8
LBB359_8:                               ;   in Loop: Header=BB359_7 Depth=4
	ldur	x0, [x29, #-24]
	ldur	s0, [x29, #-28]
	fcvt	d0, s0
	ldur	s1, [x29, #-32]
	fcvt	d1, s1
	bl	__ZN9rnd_gen_t4randEdd
	fcvt	s0, d0
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB359_9
LBB359_9:                               ;   in Loop: Header=BB359_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB359_7
LBB359_10:                              ;   in Loop: Header=BB359_5 Depth=3
	b	LBB359_11
LBB359_11:                              ;   in Loop: Header=BB359_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB359_5
LBB359_12:                              ;   in Loop: Header=BB359_3 Depth=2
	b	LBB359_13
LBB359_13:                              ;   in Loop: Header=BB359_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB359_3
LBB359_14:                              ;   in Loop: Header=BB359_1 Depth=1
	b	LBB359_15
LBB359_15:                              ;   in Loop: Header=BB359_1 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB359_1
LBB359_16:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi64ELi12ELi12ELi128EE4initEfff ; -- Begin function _ZN8AdaDeltaILi64ELi12ELi12ELi128EE4initEfff
	.weak_definition	__ZN8AdaDeltaILi64ELi12ELi12ELi128EE4initEfff
	.p2align	2
__ZN8AdaDeltaILi64ELi12ELi12ELi128EE4initEfff: ; @_ZN8AdaDeltaILi64ELi12ELi12ELi128EE4initEfff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	s1, [x29, #-16]
	stur	s2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w9, [x29, #-12]
	mov	x10, #16
	movk	x10, #288, lsl #16
	str	w9, [x8, x10]
	ldur	w9, [x29, #-16]
	mov	x10, #20
	movk	x10, #288, lsl #16
	str	w9, [x8, x10]
	ldur	w9, [x29, #-20]
	mov	x10, #24
	movk	x10, #288, lsl #16
	str	w9, [x8, x10]
	mov	x9, #4
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	mov	w1, #64
	str	w1, [sp, #24]                   ; 4-byte Folded Spill
	movi	d0, #0000000000000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE10init_constEif
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE10init_constEif
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	mov	x9, #8
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	mov	x9, #12
	movk	x9, #216, lsl #16
	add	x0, x8, x9
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi128ELi1ELi1ELi1EE4initEfff ; -- Begin function _ZN8AdaDeltaILi128ELi1ELi1ELi1EE4initEfff
	.weak_definition	__ZN8AdaDeltaILi128ELi1ELi1ELi1EE4initEfff
	.p2align	2
__ZN8AdaDeltaILi128ELi1ELi1ELi1EE4initEfff: ; @_ZN8AdaDeltaILi128ELi1ELi1ELi1EE4initEfff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	s1, [x29, #-16]
	stur	s2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w9, [x29, #-12]
	str	w9, [x8, #2064]
	ldur	w9, [x29, #-16]
	str	w9, [x8, #2068]
	ldur	w9, [x29, #-20]
	str	w9, [x8, #2072]
	add	x0, x8, #516
	mov	w1, #128
	str	w1, [sp, #24]                   ; 4-byte Folded Spill
	movi	d0, #0000000000000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE10init_constEif
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE10init_constEif
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #1032
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w1, [sp, #24]                   ; 4-byte Folded Reload
	add	x0, x8, #1548
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB362_2
	b	LBB362_1
LBB362_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB362_2:
	b	LBB362_3
LBB362_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	mov	x10, #8192
	movk	x10, #1, lsl #16
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	mov	x10, #6144
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #9
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #128
	cset	w8, le
	tbnz	w8, #0, LBB364_2
	b	LBB364_1
LBB364_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB364_2:
	b	LBB364_3
LBB364_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #16]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #12]
	add	x8, x8, x9, lsl #2
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE10init_constEif ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE10init_constEif
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE10init_constEif
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE10init_constEif: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=64 N1=12 N2=12 N3=128
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB366_1
LBB366_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB366_3 Depth 2
                                        ;       Child Loop BB366_5 Depth 3
                                        ;         Child Loop BB366_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB366_16
	b	LBB366_2
LBB366_2:                               ;   in Loop: Header=BB366_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB366_3
LBB366_3:                               ;   Parent Loop BB366_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB366_5 Depth 3
                                        ;         Child Loop BB366_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB366_14
	b	LBB366_4
LBB366_4:                               ;   in Loop: Header=BB366_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB366_5
LBB366_5:                               ;   Parent Loop BB366_1 Depth=1
                                        ;     Parent Loop BB366_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB366_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB366_12
	b	LBB366_6
LBB366_6:                               ;   in Loop: Header=BB366_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB366_7
LBB366_7:                               ;   Parent Loop BB366_1 Depth=1
                                        ;     Parent Loop BB366_3 Depth=2
                                        ;       Parent Loop BB366_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB366_10
	b	LBB366_8
LBB366_8:                               ;   in Loop: Header=BB366_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB366_9
LBB366_9:                               ;   in Loop: Header=BB366_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB366_7
LBB366_10:                              ;   in Loop: Header=BB366_5 Depth=3
	b	LBB366_11
LBB366_11:                              ;   in Loop: Header=BB366_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB366_5
LBB366_12:                              ;   in Loop: Header=BB366_3 Depth=2
	b	LBB366_13
LBB366_13:                              ;   in Loop: Header=BB366_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB366_3
LBB366_14:                              ;   in Loop: Header=BB366_1 Depth=1
	b	LBB366_15
LBB366_15:                              ;   in Loop: Header=BB366_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB366_1
LBB366_16:
	; InlineAsm Start
	; init_const ends N0=64 N1=12 N2=12 N3=128
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE10init_constEif ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE10init_constEif
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE10init_constEif
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE10init_constEif: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE10init_constEif
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	s0, [x29, #-16]
	ldur	x0, [x29, #-8]
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	ldur	w1, [x29, #-12]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-24]
	; InlineAsm Start
	; init_const begins N0=128 N1=1 N2=1 N3=1
	; InlineAsm End
	stur	wzr, [x29, #-28]
	b	LBB367_1
LBB367_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB367_3 Depth 2
                                        ;       Child Loop BB367_5 Depth 3
                                        ;         Child Loop BB367_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-12]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB367_16
	b	LBB367_2
LBB367_2:                               ;   in Loop: Header=BB367_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB367_3
LBB367_3:                               ;   Parent Loop BB367_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB367_5 Depth 3
                                        ;         Child Loop BB367_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB367_14
	b	LBB367_4
LBB367_4:                               ;   in Loop: Header=BB367_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB367_5
LBB367_5:                               ;   Parent Loop BB367_1 Depth=1
                                        ;     Parent Loop BB367_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB367_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB367_12
	b	LBB367_6
LBB367_6:                               ;   in Loop: Header=BB367_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB367_7
LBB367_7:                               ;   Parent Loop BB367_1 Depth=1
                                        ;     Parent Loop BB367_3 Depth=2
                                        ;       Parent Loop BB367_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB367_10
	b	LBB367_8
LBB367_8:                               ;   in Loop: Header=BB367_7 Depth=4
	ldur	w8, [x29, #-16]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB367_9
LBB367_9:                               ;   in Loop: Header=BB367_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB367_7
LBB367_10:                              ;   in Loop: Header=BB367_5 Depth=3
	b	LBB367_11
LBB367_11:                              ;   in Loop: Header=BB367_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB367_5
LBB367_12:                              ;   in Loop: Header=BB367_3 Depth=2
	b	LBB367_13
LBB367_13:                              ;   in Loop: Header=BB367_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB367_3
LBB367_14:                              ;   in Loop: Header=BB367_1 Depth=1
	b	LBB367_15
LBB367_15:                              ;   in Loop: Header=BB367_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB367_1
LBB367_16:
	; InlineAsm Start
	; init_const ends N0=128 N1=1 N2=1 N3=1
	; InlineAsm End
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9rand_gradER9rnd_gen_tff ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9rand_gradER9rnd_gen_tff
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9rand_gradER9rnd_gen_tff
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9rand_gradER9rnd_gen_tff: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9rand_gradER9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	s0, [x29, #-20]
	str	s1, [sp, #24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, #8596
	movk	x9, #145, lsl #16
	add	x0, x8, x9
	ldur	x2, [x29, #-16]
	ldur	s0, [x29, #-20]
	ldr	s1, [sp, #24]
	mov	w1, #64
	str	w1, [sp, #20]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w1, [sp, #20]                   ; 4-byte Folded Reload
	mov	x9, #16792
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	ldur	x2, [x29, #-16]
	ldur	s0, [x29, #-20]
	ldr	s1, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE9rand_gradER9rnd_gen_tff ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE9rand_gradER9rnd_gen_tff
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE9rand_gradER9rnd_gen_tff
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE9rand_gradER9rnd_gen_tff: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE9rand_gradER9rnd_gen_tff
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	s0, [sp, #12]
	str	s1, [sp, #8]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldr	x2, [sp, #16]
	ldr	s0, [sp, #12]
	ldr	s1, [sp, #8]
	mov	w1, #64
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE12init_uniformEiR9rnd_gen_tff
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldr	x2, [sp, #16]
	ldr	s0, [sp, #12]
	ldr	s1, [sp, #8]
	mov	w1, #128
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE12init_uniformEiR9rnd_gen_tff
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9copy_gradERS0_ ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9copy_gradERS0_
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9copy_gradERS0_
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9copy_gradERS0_: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE9copy_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x10, [sp, #16]
	mov	x9, #8596
	movk	x9, #145, lsl #16
	add	x1, x10, x9
	add	x0, x8, x9
	mov	x2, #8196
	movk	x2, #1, lsl #16
	bl	_memcpy
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x10, [sp, #16]
	mov	x9, #16792
	movk	x9, #146, lsl #16
	add	x1, x10, x9
	add	x0, x8, x9
	mov	x2, #260
	bl	_memcpy
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE9copy_gradERS0_ ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE9copy_gradERS0_
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE9copy_gradERS0_
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE9copy_gradERS0_: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE9copy_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x10, [sp, #16]
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x1, x10, x9
	add	x0, x8, x9
	mov	x2, #4
	movk	x2, #72, lsl #16
	bl	_memcpy
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x10, [sp, #16]
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x1, x10, x9
	add	x0, x8, x9
	mov	x2, #516
	bl	_memcpy
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8add_gradEf ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8add_gradEf
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8add_gradEf
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8add_gradEf: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8add_gradEf
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, x8
	add	x0, x9, #136
	ldur	s0, [x29, #-12]
	mov	x9, #8596
	movk	x9, #145, lsl #16
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE4add_EfRS0_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #8332
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	ldur	s0, [x29, #-12]
	mov	x9, #16792
	movk	x9, #146, lsl #16
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE8add_gradEf ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE8add_gradEf
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE8add_gradEf
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE8add_gradEf: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE8add_gradEf
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, x8
	add	x0, x9, #136
	ldur	s0, [x29, #-12]
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE4add_EfRS0_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #140
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	s0, [x29, #-12]
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x1, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE4add_EfRS0_: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB374_2
	b	LBB374_1
LBB374_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB374_2:
	b	LBB374_3
LBB374_3:
	str	wzr, [sp, #28]
	b	LBB374_4
LBB374_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB374_6 Depth 2
                                        ;       Child Loop BB374_8 Depth 3
                                        ;         Child Loop BB374_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB374_19
	b	LBB374_5
LBB374_5:                               ;   in Loop: Header=BB374_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB374_6
LBB374_6:                               ;   Parent Loop BB374_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB374_8 Depth 3
                                        ;         Child Loop BB374_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB374_17
	b	LBB374_7
LBB374_7:                               ;   in Loop: Header=BB374_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB374_8
LBB374_8:                               ;   Parent Loop BB374_4 Depth=1
                                        ;     Parent Loop BB374_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB374_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB374_15
	b	LBB374_9
LBB374_9:                               ;   in Loop: Header=BB374_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB374_10
LBB374_10:                              ;   Parent Loop BB374_4 Depth=1
                                        ;     Parent Loop BB374_6 Depth=2
                                        ;       Parent Loop BB374_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB374_13
	b	LBB374_11
LBB374_11:                              ;   in Loop: Header=BB374_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB374_12
LBB374_12:                              ;   in Loop: Header=BB374_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB374_10
LBB374_13:                              ;   in Loop: Header=BB374_8 Depth=3
	b	LBB374_14
LBB374_14:                              ;   in Loop: Header=BB374_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB374_8
LBB374_15:                              ;   in Loop: Header=BB374_6 Depth=2
	b	LBB374_16
LBB374_16:                              ;   in Loop: Header=BB374_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB374_6
LBB374_17:                              ;   in Loop: Header=BB374_4 Depth=1
	b	LBB374_18
LBB374_18:                              ;   in Loop: Header=BB374_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB374_4
LBB374_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE4add_EfRS0_: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB375_2
	b	LBB375_1
LBB375_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB375_2:
	b	LBB375_3
LBB375_3:
	str	wzr, [sp, #28]
	b	LBB375_4
LBB375_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB375_6 Depth 2
                                        ;       Child Loop BB375_8 Depth 3
                                        ;         Child Loop BB375_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB375_19
	b	LBB375_5
LBB375_5:                               ;   in Loop: Header=BB375_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB375_6
LBB375_6:                               ;   Parent Loop BB375_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB375_8 Depth 3
                                        ;         Child Loop BB375_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB375_17
	b	LBB375_7
LBB375_7:                               ;   in Loop: Header=BB375_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB375_8
LBB375_8:                               ;   Parent Loop BB375_4 Depth=1
                                        ;     Parent Loop BB375_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB375_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB375_15
	b	LBB375_9
LBB375_9:                               ;   in Loop: Header=BB375_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB375_10
LBB375_10:                              ;   Parent Loop BB375_4 Depth=1
                                        ;     Parent Loop BB375_6 Depth=2
                                        ;       Parent Loop BB375_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB375_13
	b	LBB375_11
LBB375_11:                              ;   in Loop: Header=BB375_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB375_12
LBB375_12:                              ;   in Loop: Header=BB375_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB375_10
LBB375_13:                              ;   in Loop: Header=BB375_8 Depth=3
	b	LBB375_14
LBB375_14:                              ;   in Loop: Header=BB375_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB375_8
LBB375_15:                              ;   in Loop: Header=BB375_6 Depth=2
	b	LBB375_16
LBB375_16:                              ;   in Loop: Header=BB375_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB375_6
LBB375_17:                              ;   in Loop: Header=BB375_4 Depth=1
	b	LBB375_18
LBB375_18:                              ;   in Loop: Header=BB375_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB375_4
LBB375_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE4add_EfRS0_: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB376_2
	b	LBB376_1
LBB376_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB376_2:
	b	LBB376_3
LBB376_3:
	str	wzr, [sp, #28]
	b	LBB376_4
LBB376_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB376_6 Depth 2
                                        ;       Child Loop BB376_8 Depth 3
                                        ;         Child Loop BB376_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB376_19
	b	LBB376_5
LBB376_5:                               ;   in Loop: Header=BB376_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB376_6
LBB376_6:                               ;   Parent Loop BB376_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB376_8 Depth 3
                                        ;         Child Loop BB376_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB376_17
	b	LBB376_7
LBB376_7:                               ;   in Loop: Header=BB376_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB376_8
LBB376_8:                               ;   Parent Loop BB376_4 Depth=1
                                        ;     Parent Loop BB376_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB376_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB376_15
	b	LBB376_9
LBB376_9:                               ;   in Loop: Header=BB376_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB376_10
LBB376_10:                              ;   Parent Loop BB376_4 Depth=1
                                        ;     Parent Loop BB376_6 Depth=2
                                        ;       Parent Loop BB376_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB376_13
	b	LBB376_11
LBB376_11:                              ;   in Loop: Header=BB376_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB376_12
LBB376_12:                              ;   in Loop: Header=BB376_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB376_10
LBB376_13:                              ;   in Loop: Header=BB376_8 Depth=3
	b	LBB376_14
LBB376_14:                              ;   in Loop: Header=BB376_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB376_8
LBB376_15:                              ;   in Loop: Header=BB376_6 Depth=2
	b	LBB376_16
LBB376_16:                              ;   in Loop: Header=BB376_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB376_6
LBB376_17:                              ;   in Loop: Header=BB376_4 Depth=1
	b	LBB376_18
LBB376_18:                              ;   in Loop: Header=BB376_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB376_4
LBB376_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE4add_EfRS0_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE4add_EfRS0_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE4add_EfRS0_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE4add_EfRS0_: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB377_2
	b	LBB377_1
LBB377_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #200
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB377_2:
	b	LBB377_3
LBB377_3:
	str	wzr, [sp, #28]
	b	LBB377_4
LBB377_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB377_6 Depth 2
                                        ;       Child Loop BB377_8 Depth 3
                                        ;         Child Loop BB377_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB377_19
	b	LBB377_5
LBB377_5:                               ;   in Loop: Header=BB377_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB377_6
LBB377_6:                               ;   Parent Loop BB377_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB377_8 Depth 3
                                        ;         Child Loop BB377_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB377_17
	b	LBB377_7
LBB377_7:                               ;   in Loop: Header=BB377_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB377_8
LBB377_8:                               ;   Parent Loop BB377_4 Depth=1
                                        ;     Parent Loop BB377_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB377_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB377_15
	b	LBB377_9
LBB377_9:                               ;   in Loop: Header=BB377_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB377_10
LBB377_10:                              ;   Parent Loop BB377_4 Depth=1
                                        ;     Parent Loop BB377_6 Depth=2
                                        ;       Parent Loop BB377_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB377_13
	b	LBB377_11
LBB377_11:                              ;   in Loop: Header=BB377_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp]                        ; 4-byte Folded Spill
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp]                        ; 4-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB377_12
LBB377_12:                              ;   in Loop: Header=BB377_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB377_10
LBB377_13:                              ;   in Loop: Header=BB377_8 Depth=3
	b	LBB377_14
LBB377_14:                              ;   in Loop: Header=BB377_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB377_8
LBB377_15:                              ;   in Loop: Header=BB377_6 Depth=2
	b	LBB377_16
LBB377_16:                              ;   in Loop: Header=BB377_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB377_6
LBB377_17:                              ;   in Loop: Header=BB377_4 Depth=1
	b	LBB377_18
LBB377_18:                              ;   in Loop: Header=BB377_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB377_4
LBB377_19:
	ldr	x0, [sp, #32]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi
	.weak_definition	__ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi: ; @_ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB378_2
	b	LBB378_1
LBB378_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB378_3
	b	LBB378_4
LBB378_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	b	LBB378_8
LBB378_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	b	LBB378_8
LBB378_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB378_6
	b	LBB378_5
LBB378_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	b	LBB378_7
LBB378_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	b	LBB378_7
LBB378_7:
	b	LBB378_8
LBB378_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #136
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB379_4
	b	LBB379_1
LBB379_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB379_5
	b	LBB379_2
LBB379_2:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #2
	cset	w8, ne
	tbnz	w8, #0, LBB379_6
	b	LBB379_3
LBB379_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15forward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EEi
	b	LBB379_10
LBB379_4:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	b	LBB379_10
LBB379_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	b	LBB379_10
LBB379_6:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB379_8
	b	LBB379_7
LBB379_7:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	b	LBB379_9
LBB379_8:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	b	LBB379_9
LBB379_9:
	b	LBB379_10
LBB379_10:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #8592
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi
	.weak_definition	__ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi: ; @_ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB380_2
	b	LBB380_1
LBB380_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB380_3
	b	LBB380_4
LBB380_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	b	LBB380_8
LBB380_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	b	LBB380_8
LBB380_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB380_6
	b	LBB380_5
LBB380_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	b	LBB380_7
LBB380_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	b	LBB380_7
LBB380_7:
	b	LBB380_8
LBB380_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #136
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi
	.weak_definition	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB381_2
	b	LBB381_1
LBB381_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB381_3
	b	LBB381_4
LBB381_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	b	LBB381_8
LBB381_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	b	LBB381_8
LBB381_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB381_6
	b	LBB381_5
LBB381_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	b	LBB381_7
LBB381_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	b	LBB381_7
LBB381_7:
	b	LBB381_8
LBB381_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #128
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi
	.weak_definition	__ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi: ; @_ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB382_2
	b	LBB382_1
LBB382_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB382_3
	b	LBB382_4
LBB382_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	b	LBB382_8
LBB382_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	b	LBB382_8
LBB382_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB382_6
	b	LBB382_5
LBB382_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	b	LBB382_7
LBB382_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	b	LBB382_7
LBB382_7:
	b	LBB382_8
LBB382_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #136
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	subs	w8, w8, #0
                                        ; kill: def $x8 killed $w8
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #3
	cset	w8, hi
	tbnz	w8, #0, LBB383_6
; %bb.1:
	ldr	x11, [sp, #16]                  ; 8-byte Folded Reload
	adrp	x10, LJTI383_0@PAGE
	add	x10, x10, LJTI383_0@PAGEOFF
Ltmp112:
	adr	x8, Ltmp112
	ldrsw	x9, [x10, x11, lsl #2]
	add	x8, x8, x9
	br	x8
LBB383_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_simdER6tensorIfLi64ELi64ELi12ELi12EEi
	b	LBB383_10
LBB383_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE15forward_cpu_ompER6tensorIfLi64ELi64ELi12ELi12EEi
	b	LBB383_10
LBB383_4:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	b	LBB383_10
LBB383_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	b	LBB383_10
LBB383_6:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB383_8
	b	LBB383_7
LBB383_7:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	b	LBB383_9
LBB383_8:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	b	LBB383_9
LBB383_9:
	b	LBB383_10
LBB383_10:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #656
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
	.section	__TEXT,__const
	.p2align	2
LJTI383_0:
	.long	LBB383_4-Ltmp112
	.long	LBB383_5-Ltmp112
	.long	LBB383_3-Ltmp112
	.long	LBB383_2-Ltmp112
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB384_2
	b	LBB384_1
LBB384_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB384_3
	b	LBB384_4
LBB384_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB384_8
LBB384_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB384_8
LBB384_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB384_6
	b	LBB384_5
LBB384_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB384_7
LBB384_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB384_7
LBB384_7:
	b	LBB384_8
LBB384_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #136
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-32]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB385_2
	b	LBB385_1
LBB385_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB385_3
	b	LBB385_4
LBB385_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB385_8
LBB385_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB385_8
LBB385_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB385_6
	b	LBB385_5
LBB385_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB385_7
LBB385_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	ldur	w2, [x29, #-20]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	b	LBB385_7
LBB385_7:
	b	LBB385_8
LBB385_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	str	x0, [sp, #40]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-32]
	str	x8, [sp, #32]
	ldr	x8, [sp, #40]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, #136
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.weak_definition	__ZN4ReluILi64ELi32ELi26ELi26EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi: ; @_ZN4ReluILi64ELi32ELi26ELi26EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.weak_definition	__ZN4ReluILi64ELi32ELi26ELi26EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi: ; @_ZN4ReluILi64ELi32ELi26ELi26EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.139@PAGE
	add	x0, x0, l_.str.139@PAGEOFF
	mov	w1, #133
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.weak_definition	__ZN4ReluILi64ELi32ELi26ELi26EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi: ; @_ZN4ReluILi64ELi32ELi26ELi26EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	add	x0, x8, #136
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x9, #128]
	stur	wzr, [x29, #-28]
	b	LBB388_1
LBB388_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB388_3 Depth 2
                                        ;       Child Loop BB388_5 Depth 3
                                        ;         Child Loop BB388_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB388_16
	b	LBB388_2
LBB388_2:                               ;   in Loop: Header=BB388_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB388_3
LBB388_3:                               ;   Parent Loop BB388_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB388_5 Depth 3
                                        ;         Child Loop BB388_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB388_14
	b	LBB388_4
LBB388_4:                               ;   in Loop: Header=BB388_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB388_5
LBB388_5:                               ;   Parent Loop BB388_1 Depth=1
                                        ;     Parent Loop BB388_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB388_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB388_12
	b	LBB388_6
LBB388_6:                               ;   in Loop: Header=BB388_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB388_7
LBB388_7:                               ;   Parent Loop BB388_1 Depth=1
                                        ;     Parent Loop BB388_3 Depth=2
                                        ;       Parent Loop BB388_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB388_10
	b	LBB388_8
LBB388_8:                               ;   in Loop: Header=BB388_7 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s1, [x0]
	movi	d0, #0000000000000000
	bl	__ZL5max_rff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB388_9
LBB388_9:                               ;   in Loop: Header=BB388_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB388_7
LBB388_10:                              ;   in Loop: Header=BB388_5 Depth=3
	b	LBB388_11
LBB388_11:                              ;   in Loop: Header=BB388_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB388_5
LBB388_12:                              ;   in Loop: Header=BB388_3 Depth=2
	b	LBB388_13
LBB388_13:                              ;   in Loop: Header=BB388_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB388_3
LBB388_14:                              ;   in Loop: Header=BB388_1 Depth=1
	b	LBB388_15
LBB388_15:                              ;   in Loop: Header=BB388_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB388_1
LBB388_16:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15forward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EEi ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15forward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EEi
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15forward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EEi
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15forward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EEi: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15forward_cpu_ompER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	sub	x10, x29, #24
	str	x10, [sp, #24]                  ; 8-byte Folded Spill
	stur	w9, [x29, #-24]
	mov	x9, #8592
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EE6set_n0Ei
	ldr	x11, [sp, #24]                  ; 8-byte Folded Reload
	ldr	x10, [sp, #32]                  ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x10, #128]
	ldur	x8, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_25@PAGE
	add	x0, x0, l___unnamed_25@PAGEOFF
	mov	w1, #3
	adrp	x2, _.omp_outlined..148@PAGE
	add	x2, x2, _.omp_outlined..148@PAGEOFF
	bl	___kmpc_fork_call
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16forward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17forward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.125@PAGE
	add	x0, x0, l_.str.125@PAGEOFF
	mov	w1, #290
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi64ELi24ELi24EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi64ELi24ELi24EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi64ELi24ELi24EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi64ELi24ELi24EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi64ELi24ELi24EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB392_2
	b	LBB392_1
LBB392_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB392_2:
	b	LBB392_3
LBB392_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..148
_.omp_outlined..148:                    ; @.omp_outlined..148
Lfunc_begin7:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception7
; %bb.0:
	sub	sp, sp, #320
	.cfi_def_cfa_offset 320
	stp	x28, x27, [sp, #288]            ; 16-byte Folded Spill
	stp	x29, x30, [sp, #304]            ; 16-byte Folded Spill
	add	x29, sp, #304
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	.cfi_remember_state
	sub	x9, x29, #48
	str	x9, [sp, #104]                  ; 8-byte Folded Spill
	str	x0, [x9, #24]
	str	x1, [x9, #16]
	str	x2, [x9, #8]
	str	x3, [x9]
	stur	x4, [x29, #-56]
	ldr	x8, [x9, #8]
	ldr	x9, [x9]
	str	x9, [sp, #112]                  ; 8-byte Folded Spill
	ldur	x9, [x29, #-56]
	stur	x9, [x29, #-64]
	ldr	w8, [x8]
	stur	w8, [x29, #-92]
	ldur	w9, [x29, #-92]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w10, w9, w10
                                        ; implicit-def: $x9
	mov	x9, x10
	sxtw	x9, w9
	lsl	x9, x9, #6
	mov	x10, #24
	mul	x9, x9, x10
	mul	x9, x9, x10
	subs	x9, x9, #1
	stur	x9, [x29, #-104]
	stur	wzr, [x29, #-108]
	stur	wzr, [x29, #-112]
	stur	wzr, [x29, #-116]
	stur	wzr, [x29, #-120]
	ldur	w9, [x29, #-92]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB393_24
	b	LBB393_1
LBB393_1:
	ldr	x8, [sp, #104]                  ; 8-byte Folded Reload
	sub	x4, x29, #128
	stur	xzr, [x29, #-128]
	ldur	x9, [x29, #-104]
	sub	x5, x29, #136
	stur	x9, [x29, #-136]
	sub	x6, x29, #144
	mov	x7, #1
	stur	x7, [x29, #-144]
	sub	x3, x29, #148
	stur	wzr, [x29, #-148]
	ldr	x8, [x8, #24]
	ldr	w1, [x8]
	mov	x8, sp
	str	x7, [x8]
	adrp	x0, l___unnamed_26@PAGE
	add	x0, x0, l___unnamed_26@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_8
	ldur	x8, [x29, #-136]
	ldur	x9, [x29, #-104]
	subs	x8, x8, x9
	cset	w8, le
	tbnz	w8, #0, LBB393_3
	b	LBB393_2
LBB393_2:
	ldur	x8, [x29, #-104]
	str	x8, [sp, #96]                   ; 8-byte Folded Spill
	b	LBB393_4
LBB393_3:
	ldur	x8, [x29, #-136]
	str	x8, [sp, #96]                   ; 8-byte Folded Spill
	b	LBB393_4
LBB393_4:
	ldr	x8, [sp, #96]                   ; 8-byte Folded Reload
	stur	x8, [x29, #-136]
	ldur	x8, [x29, #-128]
	stur	x8, [x29, #-72]
	b	LBB393_5
LBB393_5:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB393_7 Depth 2
                                        ;       Child Loop BB393_9 Depth 3
                                        ;         Child Loop BB393_11 Depth 4
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-136]
	subs	x8, x8, x9
	cset	w8, gt
	tbnz	w8, #0, LBB393_22
	b	LBB393_6
LBB393_6:                               ;   in Loop: Header=BB393_5 Depth=1
	ldur	x8, [x29, #-72]
	mov	x14, #36864
	str	x14, [sp, #88]                  ; 8-byte Folded Spill
	sdiv	x8, x8, x14
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #152]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	mov	x12, #576
	sdiv	x8, x8, x12
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #148]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x10, [x29, #-72]
	sdiv	x10, x10, x14
	mul	x10, x10, x14
	subs	x9, x9, x10
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	mov	x10, #24
	sdiv	x8, x8, x10
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #144]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x11, [x29, #-72]
	sdiv	x11, x11, x14
	mul	x11, x11, x14
	subs	x9, x9, x11
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x11, [x29, #-72]
	sdiv	x11, x11, x14
	mul	x11, x11, x14
	subs	x9, x9, x11
	ldur	x11, [x29, #-72]
	ldur	x13, [x29, #-72]
	sdiv	x13, x13, x14
	mul	x13, x13, x14
	subs	x11, x11, x13
	sdiv	x11, x11, x12
	mul	x11, x11, x12
	subs	x9, x9, x11
	sdiv	x9, x9, x10
	mul	x9, x9, x10
	subs	x8, x8, x9
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #140]
	movi	d0, #0000000000000000
	str	s0, [sp, #136]
	str	wzr, [sp, #132]
	b	LBB393_7
LBB393_7:                               ;   Parent Loop BB393_5 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB393_9 Depth 3
                                        ;         Child Loop BB393_11 Depth 4
	ldr	w8, [sp, #132]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB393_18
	b	LBB393_8
LBB393_8:                               ;   in Loop: Header=BB393_7 Depth=2
	str	wzr, [sp, #128]
	b	LBB393_9
LBB393_9:                               ;   Parent Loop BB393_5 Depth=1
                                        ;     Parent Loop BB393_7 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB393_11 Depth 4
	ldr	w8, [sp, #128]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB393_16
	b	LBB393_10
LBB393_10:                              ;   in Loop: Header=BB393_9 Depth=3
	str	wzr, [sp, #124]
	b	LBB393_11
LBB393_11:                              ;   Parent Loop BB393_5 Depth=1
                                        ;     Parent Loop BB393_7 Depth=2
                                        ;       Parent Loop BB393_9 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #124]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB393_14
	b	LBB393_12
LBB393_12:                              ;   in Loop: Header=BB393_11 Depth=4
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w3, [sp, #128]
	ldr	w4, [sp, #124]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #32]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w3, [sp, #128]
	ldr	w8, [sp, #124]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #28]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #28]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #32]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #36]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s3, [x0]
	fmul	s2, s2, s3
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #40]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w3, [sp, #128]
	ldr	w8, [sp, #124]
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #44]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #40]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #44]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #48]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w3, [sp, #128]
	ldr	w8, [sp, #124]
	add	w4, w8, #3
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #52]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #3
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #48]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #52]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #56]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #128]
	add	w3, w8, #1
	ldr	w4, [sp, #124]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #60]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w8, w8, w9
	add	w3, w8, #1
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #56]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #60]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #64]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #128]
	add	w3, w8, #1
	ldr	w8, [sp, #124]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #68]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w8, w8, w9
	add	w3, w8, #1
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #64]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #68]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #72]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #128]
	add	w3, w8, #1
	ldr	w8, [sp, #124]
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #76]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w8, w8, w9
	add	w3, w8, #1
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #72]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #76]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #80]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #148]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #128]
	add	w3, w8, #1
	ldr	w8, [sp, #124]
	add	w4, w8, #3
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #84]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #132]
	ldr	w8, [sp, #144]
	ldr	w9, [sp, #128]
	add	w8, w8, w9
	add	w3, w8, #1
	ldr	w8, [sp, #140]
	ldr	w9, [sp, #124]
	add	w8, w8, w9
	add	w4, w8, #3
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #80]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #84]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s1, s0, s1, s2
	ldr	s0, [sp, #136]
	fadd	s0, s0, s1
	str	s0, [sp, #136]
	b	LBB393_13
LBB393_13:                              ;   in Loop: Header=BB393_11 Depth=4
	ldr	w8, [sp, #124]
	add	w8, w8, #4
	str	w8, [sp, #124]
	b	LBB393_11
LBB393_14:                              ;   in Loop: Header=BB393_9 Depth=3
	b	LBB393_15
LBB393_15:                              ;   in Loop: Header=BB393_9 Depth=3
	ldr	w8, [sp, #128]
	add	w8, w8, #2
	str	w8, [sp, #128]
	b	LBB393_9
LBB393_16:                              ;   in Loop: Header=BB393_7 Depth=2
	b	LBB393_17
LBB393_17:                              ;   in Loop: Header=BB393_7 Depth=2
	ldr	w8, [sp, #132]
	add	w8, w8, #1
	str	w8, [sp, #132]
	b	LBB393_7
LBB393_18:                              ;   in Loop: Header=BB393_5 Depth=1
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s0, [sp, #136]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #8332
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #148]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #112]                  ; 8-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #8592
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #152]
	ldr	w2, [sp, #148]
	ldr	w3, [sp, #144]
	ldr	w4, [sp, #140]
Ltmp113:
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
Ltmp114:
	b	LBB393_19
LBB393_19:                              ;   in Loop: Header=BB393_5 Depth=1
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	s0, [x8]
	b	LBB393_20
LBB393_20:                              ;   in Loop: Header=BB393_5 Depth=1
	b	LBB393_21
LBB393_21:                              ;   in Loop: Header=BB393_5 Depth=1
	ldur	x8, [x29, #-72]
	add	x8, x8, #1
	stur	x8, [x29, #-72]
	b	LBB393_5
LBB393_22:
	b	LBB393_23
LBB393_23:
	ldr	x8, [sp, #104]                  ; 8-byte Folded Reload
	ldr	x8, [x8, #24]
	ldr	w1, [x8]
	adrp	x0, l___unnamed_27@PAGE
	add	x0, x0, l___unnamed_27@PAGEOFF
	bl	___kmpc_for_static_fini
	b	LBB393_24
LBB393_24:
	.cfi_def_cfa wsp, 320
	ldp	x29, x30, [sp, #304]            ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #288]            ; 16-byte Folded Reload
	add	sp, sp, #320
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
LBB393_25:
	.cfi_restore_state
Ltmp115:
	bl	___clang_call_terminate
Lfunc_end7:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table393:
Lexception7:
	.byte	255                             ; @LPStart Encoding = omit
	.byte	155                             ; @TType Encoding = indirect pcrel sdata4
	.uleb128 Lttbase0-Lttbaseref0
Lttbaseref0:
	.byte	1                               ; Call site Encoding = uleb128
	.uleb128 Lcst_end7-Lcst_begin7
Lcst_begin7:
	.uleb128 Lfunc_begin7-Lfunc_begin7      ; >> Call Site 1 <<
	.uleb128 Ltmp113-Lfunc_begin7           ;   Call between Lfunc_begin7 and Ltmp113
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp113-Lfunc_begin7           ; >> Call Site 2 <<
	.uleb128 Ltmp114-Ltmp113                ;   Call between Ltmp113 and Ltmp114
	.uleb128 Ltmp115-Lfunc_begin7           ;     jumps to Ltmp115
	.byte	1                               ;   On action: 1
Lcst_end7:
	.byte	1                               ; >> Action Record 1 <<
                                        ;   Catch TypeInfo 1
	.byte	0                               ;   No further actions
	.p2align	2
                                        ; >> Catch TypeInfos <<
	.long	0                               ; TypeInfo 1
Lttbase0:
	.p2align	2
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii: ; @_ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	mov	x10, #16384
	movk	x10, #2, lsl #16
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	mov	x10, #2304
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #12]
	mov	x10, #96
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.private_extern	___clang_call_terminate ; -- Begin function __clang_call_terminate
	.globl	___clang_call_terminate
	.weak_definition	___clang_call_terminate
	.p2align	2
___clang_call_terminate:                ; @__clang_call_terminate
; %bb.0:
	stp	x29, x30, [sp, #-16]!           ; 16-byte Folded Spill
	bl	___cxa_begin_catch
	bl	__ZSt9terminatev
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE12forward_baseER6tensorIfLi64ELi32ELi26ELi26EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	mov	x9, #8592
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EE6set_n0Ei
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x9, #128]
	stur	wzr, [x29, #-28]
	b	LBB396_1
LBB396_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB396_3 Depth 2
                                        ;       Child Loop BB396_5 Depth 3
                                        ;         Child Loop BB396_7 Depth 4
                                        ;           Child Loop BB396_9 Depth 5
                                        ;             Child Loop BB396_11 Depth 6
                                        ;               Child Loop BB396_13 Depth 7
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB396_28
	b	LBB396_2
LBB396_2:                               ;   in Loop: Header=BB396_1 Depth=1
	stur	wzr, [x29, #-32]
	b	LBB396_3
LBB396_3:                               ;   Parent Loop BB396_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB396_5 Depth 3
                                        ;         Child Loop BB396_7 Depth 4
                                        ;           Child Loop BB396_9 Depth 5
                                        ;             Child Loop BB396_11 Depth 6
                                        ;               Child Loop BB396_13 Depth 7
	ldur	w8, [x29, #-32]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB396_26
	b	LBB396_4
LBB396_4:                               ;   in Loop: Header=BB396_3 Depth=2
	stur	wzr, [x29, #-36]
	b	LBB396_5
LBB396_5:                               ;   Parent Loop BB396_1 Depth=1
                                        ;     Parent Loop BB396_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB396_7 Depth 4
                                        ;           Child Loop BB396_9 Depth 5
                                        ;             Child Loop BB396_11 Depth 6
                                        ;               Child Loop BB396_13 Depth 7
	ldur	w8, [x29, #-36]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB396_24
	b	LBB396_6
LBB396_6:                               ;   in Loop: Header=BB396_5 Depth=3
	str	wzr, [sp, #40]
	b	LBB396_7
LBB396_7:                               ;   Parent Loop BB396_1 Depth=1
                                        ;     Parent Loop BB396_3 Depth=2
                                        ;       Parent Loop BB396_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB396_9 Depth 5
                                        ;             Child Loop BB396_11 Depth 6
                                        ;               Child Loop BB396_13 Depth 7
	ldr	w8, [sp, #40]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB396_22
	b	LBB396_8
LBB396_8:                               ;   in Loop: Header=BB396_7 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #36]
	str	wzr, [sp, #32]
	b	LBB396_9
LBB396_9:                               ;   Parent Loop BB396_1 Depth=1
                                        ;     Parent Loop BB396_3 Depth=2
                                        ;       Parent Loop BB396_5 Depth=3
                                        ;         Parent Loop BB396_7 Depth=4
                                        ; =>        This Loop Header: Depth=5
                                        ;             Child Loop BB396_11 Depth 6
                                        ;               Child Loop BB396_13 Depth 7
	ldr	w8, [sp, #32]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB396_20
	b	LBB396_10
LBB396_10:                              ;   in Loop: Header=BB396_9 Depth=5
	str	wzr, [sp, #28]
	b	LBB396_11
LBB396_11:                              ;   Parent Loop BB396_1 Depth=1
                                        ;     Parent Loop BB396_3 Depth=2
                                        ;       Parent Loop BB396_5 Depth=3
                                        ;         Parent Loop BB396_7 Depth=4
                                        ;           Parent Loop BB396_9 Depth=5
                                        ; =>          This Loop Header: Depth=6
                                        ;               Child Loop BB396_13 Depth 7
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB396_18
	b	LBB396_12
LBB396_12:                              ;   in Loop: Header=BB396_11 Depth=6
	str	wzr, [sp, #24]
	b	LBB396_13
LBB396_13:                              ;   Parent Loop BB396_1 Depth=1
                                        ;     Parent Loop BB396_3 Depth=2
                                        ;       Parent Loop BB396_5 Depth=3
                                        ;         Parent Loop BB396_7 Depth=4
                                        ;           Parent Loop BB396_9 Depth=5
                                        ;             Parent Loop BB396_11 Depth=6
                                        ; =>            This Inner Loop Header: Depth=7
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB396_16
	b	LBB396_14
LBB396_14:                              ;   in Loop: Header=BB396_13 Depth=7
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #136
	ldur	w1, [x29, #-32]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldur	w8, [x29, #-36]
	ldr	w9, [sp, #28]
	add	w3, w8, w9
	ldr	w8, [sp, #40]
	ldr	w9, [sp, #24]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #36]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #36]
	b	LBB396_15
LBB396_15:                              ;   in Loop: Header=BB396_13 Depth=7
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB396_13
LBB396_16:                              ;   in Loop: Header=BB396_11 Depth=6
	b	LBB396_17
LBB396_17:                              ;   in Loop: Header=BB396_11 Depth=6
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB396_11
LBB396_18:                              ;   in Loop: Header=BB396_9 Depth=5
	b	LBB396_19
LBB396_19:                              ;   in Loop: Header=BB396_9 Depth=5
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB396_9
LBB396_20:                              ;   in Loop: Header=BB396_7 Depth=4
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [sp, #36]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	mov	x9, #8332
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-32]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #8592
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-36]
	ldr	w4, [sp, #40]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB396_21
LBB396_21:                              ;   in Loop: Header=BB396_7 Depth=4
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB396_7
LBB396_22:                              ;   in Loop: Header=BB396_5 Depth=3
	b	LBB396_23
LBB396_23:                              ;   in Loop: Header=BB396_5 Depth=3
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB396_5
LBB396_24:                              ;   in Loop: Header=BB396_3 Depth=2
	b	LBB396_25
LBB396_25:                              ;   in Loop: Header=BB396_3 Depth=2
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB396_3
LBB396_26:                              ;   in Loop: Header=BB396_1 Depth=1
	b	LBB396_27
LBB396_27:                              ;   in Loop: Header=BB396_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB396_1
LBB396_28:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.weak_definition	__ZN4ReluILi64ELi64ELi24ELi24EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi: ; @_ZN4ReluILi64ELi64ELi24ELi24EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.weak_definition	__ZN4ReluILi64ELi64ELi24ELi24EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi: ; @_ZN4ReluILi64ELi64ELi24ELi24EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.139@PAGE
	add	x0, x0, l_.str.139@PAGEOFF
	mov	w1, #133
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.weak_definition	__ZN4ReluILi64ELi64ELi24ELi24EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi: ; @_ZN4ReluILi64ELi64ELi24ELi24EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	add	x0, x8, #136
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EE6set_n0Ei
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x9, #128]
	stur	wzr, [x29, #-28]
	b	LBB399_1
LBB399_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB399_3 Depth 2
                                        ;       Child Loop BB399_5 Depth 3
                                        ;         Child Loop BB399_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB399_16
	b	LBB399_2
LBB399_2:                               ;   in Loop: Header=BB399_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB399_3
LBB399_3:                               ;   Parent Loop BB399_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB399_5 Depth 3
                                        ;         Child Loop BB399_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB399_14
	b	LBB399_4
LBB399_4:                               ;   in Loop: Header=BB399_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB399_5
LBB399_5:                               ;   Parent Loop BB399_1 Depth=1
                                        ;     Parent Loop BB399_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB399_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB399_12
	b	LBB399_6
LBB399_6:                               ;   in Loop: Header=BB399_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB399_7
LBB399_7:                               ;   Parent Loop BB399_1 Depth=1
                                        ;     Parent Loop BB399_3 Depth=2
                                        ;       Parent Loop BB399_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB399_10
	b	LBB399_8
LBB399_8:                               ;   in Loop: Header=BB399_7 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s1, [x0]
	movi	d0, #0000000000000000
	bl	__ZL5max_rff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB399_9
LBB399_9:                               ;   in Loop: Header=BB399_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB399_7
LBB399_10:                              ;   in Loop: Header=BB399_5 Depth=3
	b	LBB399_11
LBB399_11:                              ;   in Loop: Header=BB399_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB399_5
LBB399_12:                              ;   in Loop: Header=BB399_3 Depth=2
	b	LBB399_13
LBB399_13:                              ;   in Loop: Header=BB399_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB399_3
LBB399_14:                              ;   in Loop: Header=BB399_1 Depth=1
	b	LBB399_15
LBB399_15:                              ;   in Loop: Header=BB399_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB399_1
LBB399_16:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.weak_definition	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE16forward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.weak_definition	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17forward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.140@PAGE
	add	x0, x0, l_.str.140@PAGEOFF
	mov	w1, #153
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.weak_definition	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE12forward_baseER6tensorIfLi64ELi64ELi24ELi24EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #96]             ; 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	add	x0, x8, #128
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #132
	movk	x9, #36, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIiLi64ELi64ELi12ELi12EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #136
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIiLi64ELi64ELi12ELi12EE6set_n0Ei
	stur	wzr, [x29, #-28]
	b	LBB402_1
LBB402_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB402_3 Depth 2
                                        ;       Child Loop BB402_5 Depth 3
                                        ;         Child Loop BB402_7 Depth 4
                                        ;           Child Loop BB402_9 Depth 5
                                        ;             Child Loop BB402_11 Depth 6
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB402_26
	b	LBB402_2
LBB402_2:                               ;   in Loop: Header=BB402_1 Depth=1
	stur	wzr, [x29, #-32]
	b	LBB402_3
LBB402_3:                               ;   Parent Loop BB402_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB402_5 Depth 3
                                        ;         Child Loop BB402_7 Depth 4
                                        ;           Child Loop BB402_9 Depth 5
                                        ;             Child Loop BB402_11 Depth 6
	ldur	w8, [x29, #-32]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB402_24
	b	LBB402_4
LBB402_4:                               ;   in Loop: Header=BB402_3 Depth=2
	stur	wzr, [x29, #-36]
	b	LBB402_5
LBB402_5:                               ;   Parent Loop BB402_1 Depth=1
                                        ;     Parent Loop BB402_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB402_7 Depth 4
                                        ;           Child Loop BB402_9 Depth 5
                                        ;             Child Loop BB402_11 Depth 6
	ldur	w8, [x29, #-36]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB402_22
	b	LBB402_6
LBB402_6:                               ;   in Loop: Header=BB402_5 Depth=3
	stur	wzr, [x29, #-40]
	b	LBB402_7
LBB402_7:                               ;   Parent Loop BB402_1 Depth=1
                                        ;     Parent Loop BB402_3 Depth=2
                                        ;       Parent Loop BB402_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB402_9 Depth 5
                                        ;             Child Loop BB402_11 Depth 6
	ldur	w8, [x29, #-40]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB402_20
	b	LBB402_8
LBB402_8:                               ;   in Loop: Header=BB402_7 Depth=4
	ldur	w9, [x29, #-36]
	mov	w8, #2
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	mul	w9, w8, w9
	stur	w9, [x29, #-44]
	ldur	w9, [x29, #-40]
	mul	w8, w8, w9
	str	w8, [sp, #48]
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-44]
	ldr	w4, [sp, #48]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	ldr	w9, [x0]
	str	w9, [sp, #44]
	ldur	w9, [x29, #-36]
	mul	w8, w8, w9
	str	w8, [sp, #40]
	b	LBB402_9
LBB402_9:                               ;   Parent Loop BB402_1 Depth=1
                                        ;     Parent Loop BB402_3 Depth=2
                                        ;       Parent Loop BB402_5 Depth=3
                                        ;         Parent Loop BB402_7 Depth=4
                                        ; =>        This Loop Header: Depth=5
                                        ;             Child Loop BB402_11 Depth 6
	ldr	w8, [sp, #40]
	ldur	w9, [x29, #-36]
	add	w10, w9, #1
	mov	w9, #2
	mul	w9, w9, w10
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB402_18
	b	LBB402_10
LBB402_10:                              ;   in Loop: Header=BB402_9 Depth=5
	ldur	w9, [x29, #-40]
	mov	w8, #2
	mul	w8, w8, w9
	str	w8, [sp, #36]
	b	LBB402_11
LBB402_11:                              ;   Parent Loop BB402_1 Depth=1
                                        ;     Parent Loop BB402_3 Depth=2
                                        ;       Parent Loop BB402_5 Depth=3
                                        ;         Parent Loop BB402_7 Depth=4
                                        ;           Parent Loop BB402_9 Depth=5
                                        ; =>          This Inner Loop Header: Depth=6
	ldr	w8, [sp, #36]
	ldur	w9, [x29, #-40]
	add	w10, w9, #1
	mov	w9, #2
	mul	w9, w9, w10
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB402_16
	b	LBB402_12
LBB402_12:                              ;   in Loop: Header=BB402_11 Depth=6
	ldr	s0, [sp, #44]
	str	s0, [sp, #16]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldr	w3, [sp, #40]
	ldr	w4, [sp, #36]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [sp, #16]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fcmp	s0, s1
	cset	w8, pl
	tbnz	w8, #0, LBB402_14
	b	LBB402_13
LBB402_13:                              ;   in Loop: Header=BB402_11 Depth=6
	ldr	w8, [sp, #40]
	stur	w8, [x29, #-44]
	ldr	w8, [sp, #36]
	str	w8, [sp, #48]
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-44]
	ldr	w4, [sp, #48]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	w8, [x0]
	str	w8, [sp, #44]
	b	LBB402_14
LBB402_14:                              ;   in Loop: Header=BB402_11 Depth=6
	b	LBB402_15
LBB402_15:                              ;   in Loop: Header=BB402_11 Depth=6
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB402_11
LBB402_16:                              ;   in Loop: Header=BB402_9 Depth=5
	b	LBB402_17
LBB402_17:                              ;   in Loop: Header=BB402_9 Depth=5
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB402_9
LBB402_18:                              ;   in Loop: Header=BB402_7 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #44]
	str	w9, [sp, #4]                    ; 4-byte Folded Spill
	add	x0, x8, #128
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-36]
	ldur	w4, [x29, #-40]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	w9, [sp, #4]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	str	w9, [x0]
	ldur	w9, [x29, #-44]
	str	w9, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #132
	movk	x9, #36, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-36]
	ldur	w4, [x29, #-40]
	bl	__ZN6tensorIiLi64ELi64ELi12ELi12EEclEiiii
	ldr	w9, [sp, #8]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	str	w9, [x0]
	ldr	w9, [sp, #48]
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #136
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	ldur	w3, [x29, #-36]
	ldur	w4, [x29, #-40]
	bl	__ZN6tensorIiLi64ELi64ELi12ELi12EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB402_19
LBB402_19:                              ;   in Loop: Header=BB402_7 Depth=4
	ldur	w8, [x29, #-40]
	add	w8, w8, #1
	stur	w8, [x29, #-40]
	b	LBB402_7
LBB402_20:                              ;   in Loop: Header=BB402_5 Depth=3
	b	LBB402_21
LBB402_21:                              ;   in Loop: Header=BB402_5 Depth=3
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB402_5
LBB402_22:                              ;   in Loop: Header=BB402_3 Depth=2
	b	LBB402_23
LBB402_23:                              ;   in Loop: Header=BB402_3 Depth=2
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB402_3
LBB402_24:                              ;   in Loop: Header=BB402_1 Depth=1
	b	LBB402_25
LBB402_25:                              ;   in Loop: Header=BB402_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB402_1
LBB402_26:
	.cfi_def_cfa wsp, 112
	ldp	x29, x30, [sp, #96]             ; 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei ; -- Begin function _ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei
	.weak_definition	__ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei
	.p2align	2
__ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei: ; @_ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB403_2
	b	LBB403_1
LBB403_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB403_2:
	b	LBB403_3
LBB403_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIiLi64ELi64ELi12ELi12EE6set_n0Ei ; -- Begin function _ZN6tensorIiLi64ELi64ELi12ELi12EE6set_n0Ei
	.weak_definition	__ZN6tensorIiLi64ELi64ELi12ELi12EE6set_n0Ei
	.p2align	2
__ZN6tensorIiLi64ELi64ELi12ELi12EE6set_n0Ei: ; @_ZN6tensorIiLi64ELi64ELi12ELi12EE6set_n0Ei
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	w8, [x29, #-12]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB404_2
	b	LBB404_1
LBB404_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #111
	adrp	x3, l_.str.36@PAGE
	add	x3, x3, l_.str.36@PAGEOFF
	bl	___assert_rtn
LBB404_2:
	b	LBB404_3
LBB404_3:
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-12]
	str	w8, [x9]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii ; -- Begin function _ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	.weak_definition	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	.p2align	2
__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii: ; @_ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	mov	x10, #36864
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	mov	x10, #576
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #12]
	mov	x10, #48
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIiLi64ELi64ELi12ELi12EEclEiiii ; -- Begin function _ZN6tensorIiLi64ELi64ELi12ELi12EEclEiiii
	.weak_definition	__ZN6tensorIiLi64ELi64ELi12ELi12EEclEiiii
	.p2align	2
__ZN6tensorIiLi64ELi64ELi12ELi12EEclEiiii: ; @_ZN6tensorIiLi64ELi64ELi12ELi12EEclEiiii
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, #24]
	str	w1, [sp, #20]
	str	w2, [sp, #16]
	str	w3, [sp, #12]
	str	w4, [sp, #8]
	ldr	x8, [sp, #24]
	add	x8, x8, #4
	ldrsw	x9, [sp, #20]
	mov	x10, #36864
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #16]
	mov	x10, #576
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #12]
	mov	x10, #48
	mul	x9, x9, x10
	add	x8, x8, x9
	ldrsw	x9, [sp, #8]
	add	x0, x8, x9, lsl #2
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.weak_definition	__ZN7DropoutILi64ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi: ; @_ZN7DropoutILi64ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.weak_definition	__ZN7DropoutILi64ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi: ; @_ZN7DropoutILi64ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.141@PAGE
	add	x0, x0, l_.str.141@PAGEOFF
	mov	w1, #146
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.weak_definition	__ZN7DropoutILi64ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi: ; @_ZN7DropoutILi64ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	add	x0, x8, #136
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	bl	__ZN9rnd_gen_t9get_stateEv
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #152
	movk	x9, #72, lsl #16
	str	x0, [x8, x9]
	ldur	w8, [x29, #-20]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB409_2
	b	LBB409_1
LBB409_1:
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #144
	movk	x9, #72, lsl #16
	ldr	s0, [x8, x9]
	fcvt	d0, s0
	str	d0, [sp, #16]                   ; 8-byte Folded Spill
	b	LBB409_3
LBB409_2:
	movi	d0, #0000000000000000
	str	d0, [sp, #16]                   ; 8-byte Folded Spill
	b	LBB409_3
LBB409_3:
	ldr	d0, [sp, #16]                   ; 8-byte Folded Reload
	fcvt	s0, d0
	stur	s0, [x29, #-28]
	ldur	s1, [x29, #-28]
	fmov	s0, #1.00000000
	fsub	s0, s0, s1
	fcvt	d1, s0
	fmov	d0, #1.00000000
	fdiv	d0, d0, d1
	fcvt	s0, d0
	stur	s0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB409_4
LBB409_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB409_6 Depth 2
                                        ;       Child Loop BB409_8 Depth 3
                                        ;         Child Loop BB409_10 Depth 4
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB409_22
	b	LBB409_5
LBB409_5:                               ;   in Loop: Header=BB409_4 Depth=1
	str	wzr, [sp, #40]
	b	LBB409_6
LBB409_6:                               ;   Parent Loop BB409_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB409_8 Depth 3
                                        ;         Child Loop BB409_10 Depth 4
	ldr	w8, [sp, #40]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB409_20
	b	LBB409_7
LBB409_7:                               ;   in Loop: Header=BB409_6 Depth=2
	str	wzr, [sp, #36]
	b	LBB409_8
LBB409_8:                               ;   Parent Loop BB409_4 Depth=1
                                        ;     Parent Loop BB409_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB409_10 Depth 4
	ldr	w8, [sp, #36]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB409_18
	b	LBB409_9
LBB409_9:                               ;   in Loop: Header=BB409_8 Depth=3
	str	wzr, [sp, #32]
	b	LBB409_10
LBB409_10:                              ;   Parent Loop BB409_4 Depth=1
                                        ;     Parent Loop BB409_6 Depth=2
                                        ;       Parent Loop BB409_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #32]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB409_16
	b	LBB409_11
LBB409_11:                              ;   in Loop: Header=BB409_10 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	bl	__ZN9rnd_gen_t6rand01Ev
	ldur	s1, [x29, #-28]
	fcvt	d1, s1
	fcmp	d0, d1
	cset	w8, pl
	tbnz	w8, #0, LBB409_13
	b	LBB409_12
LBB409_12:                              ;   in Loop: Header=BB409_10 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, x8, #136
	ldur	w1, [x29, #-36]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	movi	d0, #0000000000000000
	str	s0, [x0]
	b	LBB409_14
LBB409_13:                              ;   in Loop: Header=BB409_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	ldur	s1, [x29, #-32]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldur	w1, [x29, #-36]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB409_14
LBB409_14:                              ;   in Loop: Header=BB409_10 Depth=4
	b	LBB409_15
LBB409_15:                              ;   in Loop: Header=BB409_10 Depth=4
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB409_10
LBB409_16:                              ;   in Loop: Header=BB409_8 Depth=3
	b	LBB409_17
LBB409_17:                              ;   in Loop: Header=BB409_8 Depth=3
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB409_8
LBB409_18:                              ;   in Loop: Header=BB409_6 Depth=2
	b	LBB409_19
LBB409_19:                              ;   in Loop: Header=BB409_6 Depth=2
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB409_6
LBB409_20:                              ;   in Loop: Header=BB409_4 Depth=1
	b	LBB409_21
LBB409_21:                              ;   in Loop: Header=BB409_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB409_4
LBB409_22:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_simdER6tensorIfLi64ELi64ELi12ELi12EEi ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_simdER6tensorIfLi64ELi64ELi12ELi12EEi
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_simdER6tensorIfLi64ELi64ELi12ELi12EEi
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_simdER6tensorIfLi64ELi64ELi12ELi12EEi: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_simdER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #96]             ; 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	mov	x9, #656
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x9, #128]
	stur	wzr, [x29, #-28]
	b	LBB410_1
LBB410_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB410_3 Depth 2
                                        ;       Child Loop BB410_5 Depth 3
                                        ;         Child Loop BB410_7 Depth 4
                                        ;           Child Loop BB410_9 Depth 5
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB410_21
	b	LBB410_2
LBB410_2:                               ;   in Loop: Header=BB410_1 Depth=1
	stur	wzr, [x29, #-32]
	b	LBB410_3
LBB410_3:                               ;   Parent Loop BB410_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB410_5 Depth 3
                                        ;         Child Loop BB410_7 Depth 4
                                        ;           Child Loop BB410_9 Depth 5
	ldur	w8, [x29, #-32]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB410_19
	b	LBB410_4
LBB410_4:                               ;   in Loop: Header=BB410_3 Depth=2
	movi	d0, #0000000000000000
	stur	s0, [x29, #-36]
	ldur	x8, [x29, #-16]
	str	x8, [sp, #48]
	str	wzr, [sp, #40]
	str	s0, [sp, #32]
	b	LBB410_5
LBB410_5:                               ;   Parent Loop BB410_1 Depth=1
                                        ;     Parent Loop BB410_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB410_7 Depth 4
                                        ;           Child Loop BB410_9 Depth 5
	ldr	w8, [sp, #40]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB410_17
	b	LBB410_6
LBB410_6:                               ;   in Loop: Header=BB410_5 Depth=3
	ldr	w8, [sp, #40]
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #36]
	str	wzr, [sp, #28]
	b	LBB410_7
LBB410_7:                               ;   Parent Loop BB410_1 Depth=1
                                        ;     Parent Loop BB410_3 Depth=2
                                        ;       Parent Loop BB410_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB410_9 Depth 5
	ldr	w8, [sp, #28]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB410_14
	b	LBB410_8
LBB410_8:                               ;   in Loop: Header=BB410_7 Depth=4
	str	wzr, [sp, #24]
	b	LBB410_9
LBB410_9:                               ;   Parent Loop BB410_1 Depth=1
                                        ;     Parent Loop BB410_3 Depth=2
                                        ;       Parent Loop BB410_5 Depth=3
                                        ;         Parent Loop BB410_7 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldr	w8, [sp, #24]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB410_12
	b	LBB410_10
LBB410_10:                              ;   in Loop: Header=BB410_9 Depth=5
	ldr	x0, [sp, #48]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #28]
	ldr	w3, [sp, #24]
	ldur	w4, [x29, #-32]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #32]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #32]
	b	LBB410_11
LBB410_11:                              ;   in Loop: Header=BB410_9 Depth=5
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB410_9
LBB410_12:                              ;   in Loop: Header=BB410_7 Depth=4
	b	LBB410_13
LBB410_13:                              ;   in Loop: Header=BB410_7 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB410_7
LBB410_14:                              ;   in Loop: Header=BB410_5 Depth=3
	b	LBB410_15
LBB410_15:                              ;   in Loop: Header=BB410_5 Depth=3
	b	LBB410_16
LBB410_16:                              ;   in Loop: Header=BB410_5 Depth=3
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB410_5
LBB410_17:                              ;   in Loop: Header=BB410_3 Depth=2
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	w9, #64
	str	w9, [sp, #36]
	ldur	s0, [x29, #-36]
	ldr	s1, [sp, #32]
	fadd	s0, s0, s1
	stur	s0, [x29, #-36]
	ldur	s0, [x29, #-36]
	str	s0, [sp]                        ; 4-byte Folded Spill
	mov	x9, #140
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-32]
	mov	w4, #0
	str	w4, [sp, #4]                    ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp]                        ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #656
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB410_18
LBB410_18:                              ;   in Loop: Header=BB410_3 Depth=2
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB410_3
LBB410_19:                              ;   in Loop: Header=BB410_1 Depth=1
	b	LBB410_20
LBB410_20:                              ;   in Loop: Header=BB410_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB410_1
LBB410_21:
	.cfi_def_cfa wsp, 112
	ldp	x29, x30, [sp, #96]             ; 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE15forward_cpu_ompER6tensorIfLi64ELi64ELi12ELi12EEi ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE15forward_cpu_ompER6tensorIfLi64ELi64ELi12ELi12EEi
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE15forward_cpu_ompER6tensorIfLi64ELi64ELi12ELi12EEi
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE15forward_cpu_ompER6tensorIfLi64ELi64ELi12ELi12EEi: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE15forward_cpu_ompER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	sub	x10, x29, #24
	str	x10, [sp, #24]                  ; 8-byte Folded Spill
	stur	w9, [x29, #-24]
	mov	x9, #656
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x11, [sp, #24]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldur	x9, [x29, #-16]
	str	x9, [x8, #128]
	ldur	x10, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_28@PAGE
	add	x0, x0, l___unnamed_28@PAGEOFF
	mov	w1, #3
	adrp	x2, _.omp_outlined..149@PAGE
	add	x2, x2, _.omp_outlined..149@PAGEOFF
	bl	___kmpc_fork_call
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE16forward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE17forward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.143@PAGE
	add	x0, x0, l_.str.143@PAGEOFF
	mov	w1, #294
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..149
_.omp_outlined..149:                    ; @.omp_outlined..149
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	stp	x29, x30, [sp, #192]            ; 16-byte Folded Spill
	add	x29, sp, #192
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	sub	x8, x29, #8
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	str	x0, [x8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	ldur	x8, [x29, #-24]
	ldur	x9, [x29, #-32]
	ldur	x10, [x29, #-40]
	str	x10, [sp, #40]                  ; 8-byte Folded Spill
	stur	x9, [x29, #-48]
	ldr	w8, [x8]
	stur	w8, [x29, #-68]
	ldur	w9, [x29, #-68]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w10, w9, w10
                                        ; implicit-def: $x9
	mov	x9, x10
	sxtw	x9, w9
	lsl	x9, x9, #7
	subs	x9, x9, #1
	stur	x9, [x29, #-80]
	stur	wzr, [x29, #-84]
	stur	wzr, [x29, #-88]
	ldur	w9, [x29, #-68]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB414_23
	b	LBB414_1
LBB414_1:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	add	x4, sp, #96
	str	xzr, [sp, #96]
	ldur	x9, [x29, #-80]
	add	x5, sp, #88
	str	x9, [sp, #88]
	add	x6, sp, #80
	mov	x7, #1
	str	x7, [sp, #80]
	add	x3, sp, #76
	str	wzr, [sp, #76]
	ldr	x8, [x8]
	ldr	w1, [x8]
	mov	x8, sp
	str	x7, [x8]
	adrp	x0, l___unnamed_29@PAGE
	add	x0, x0, l___unnamed_29@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_8
	ldr	x8, [sp, #88]
	ldur	x9, [x29, #-80]
	subs	x8, x8, x9
	cset	w8, le
	tbnz	w8, #0, LBB414_3
	b	LBB414_2
LBB414_2:
	ldur	x8, [x29, #-80]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB414_4
LBB414_3:
	ldr	x8, [sp, #88]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB414_4
LBB414_4:
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	str	x8, [sp, #88]
	ldr	x8, [sp, #96]
	stur	x8, [x29, #-56]
	b	LBB414_5
LBB414_5:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB414_7 Depth 2
                                        ;       Child Loop BB414_9 Depth 3
                                        ;         Child Loop BB414_11 Depth 4
	ldur	x8, [x29, #-56]
	ldr	x9, [sp, #88]
	subs	x8, x8, x9
	cset	w8, gt
	tbnz	w8, #0, LBB414_21
	b	LBB414_6
LBB414_6:                               ;   in Loop: Header=BB414_5 Depth=1
	ldur	x8, [x29, #-56]
	mov	x10, #128
	sdiv	x8, x8, x10
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #72]
	ldur	x8, [x29, #-56]
	ldur	x9, [x29, #-56]
	sdiv	x9, x9, x10
	subs	x8, x8, x9, lsl #7
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #68]
	movi	d0, #0000000000000000
	str	s0, [sp, #64]
	str	wzr, [sp, #60]
	b	LBB414_7
LBB414_7:                               ;   Parent Loop BB414_5 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB414_9 Depth 3
                                        ;         Child Loop BB414_11 Depth 4
	ldr	w8, [sp, #60]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB414_18
	b	LBB414_8
LBB414_8:                               ;   in Loop: Header=BB414_7 Depth=2
	str	wzr, [sp, #56]
	b	LBB414_9
LBB414_9:                               ;   Parent Loop BB414_5 Depth=1
                                        ;     Parent Loop BB414_7 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB414_11 Depth 4
	ldr	w8, [sp, #56]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB414_16
	b	LBB414_10
LBB414_10:                              ;   in Loop: Header=BB414_9 Depth=3
	str	wzr, [sp, #52]
	b	LBB414_11
LBB414_11:                              ;   Parent Loop BB414_5 Depth=1
                                        ;     Parent Loop BB414_7 Depth=2
                                        ;       Parent Loop BB414_9 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #52]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB414_14
	b	LBB414_12
LBB414_12:                              ;   in Loop: Header=BB414_11 Depth=4
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #60]
	ldr	w3, [sp, #56]
	ldr	w4, [sp, #52]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #60]
	ldr	w2, [sp, #56]
	ldr	w3, [sp, #52]
	ldr	w4, [sp, #68]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #64]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #64]
	b	LBB414_13
LBB414_13:                              ;   in Loop: Header=BB414_11 Depth=4
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB414_11
LBB414_14:                              ;   in Loop: Header=BB414_9 Depth=3
	b	LBB414_15
LBB414_15:                              ;   in Loop: Header=BB414_9 Depth=3
	ldr	w8, [sp, #56]
	add	w8, w8, #1
	str	w8, [sp, #56]
	b	LBB414_9
LBB414_16:                              ;   in Loop: Header=BB414_7 Depth=2
	b	LBB414_17
LBB414_17:                              ;   in Loop: Header=BB414_7 Depth=2
	ldr	w8, [sp, #60]
	add	w8, w8, #1
	str	w8, [sp, #60]
	b	LBB414_7
LBB414_18:                              ;   in Loop: Header=BB414_5 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	s0, [sp, #64]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #140
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #68]
	mov	w4, #0
	str	w4, [sp, #12]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #656
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #68]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #16]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB414_19
LBB414_19:                              ;   in Loop: Header=BB414_5 Depth=1
	b	LBB414_20
LBB414_20:                              ;   in Loop: Header=BB414_5 Depth=1
	ldur	x8, [x29, #-56]
	add	x8, x8, #1
	stur	x8, [x29, #-56]
	b	LBB414_5
LBB414_21:
	b	LBB414_22
LBB414_22:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x8, [x8]
	ldr	w1, [x8]
	adrp	x0, l___unnamed_30@PAGE
	add	x0, x0, l___unnamed_30@PAGEOFF
	bl	___kmpc_for_static_fini
	b	LBB414_23
LBB414_23:
	.cfi_def_cfa wsp, 208
	ldp	x29, x30, [sp, #192]            ; 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE12forward_baseER6tensorIfLi64ELi64ELi12ELi12EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	mov	x9, #656
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x9, [sp, #24]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x9, #128]
	stur	wzr, [x29, #-28]
	b	LBB415_1
LBB415_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB415_3 Depth 2
                                        ;       Child Loop BB415_5 Depth 3
                                        ;         Child Loop BB415_7 Depth 4
                                        ;           Child Loop BB415_9 Depth 5
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB415_20
	b	LBB415_2
LBB415_2:                               ;   in Loop: Header=BB415_1 Depth=1
	stur	wzr, [x29, #-32]
	b	LBB415_3
LBB415_3:                               ;   Parent Loop BB415_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB415_5 Depth 3
                                        ;         Child Loop BB415_7 Depth 4
                                        ;           Child Loop BB415_9 Depth 5
	ldur	w8, [x29, #-32]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB415_18
	b	LBB415_4
LBB415_4:                               ;   in Loop: Header=BB415_3 Depth=2
	movi	d0, #0000000000000000
	stur	s0, [x29, #-36]
	str	wzr, [sp, #40]
	b	LBB415_5
LBB415_5:                               ;   Parent Loop BB415_1 Depth=1
                                        ;     Parent Loop BB415_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB415_7 Depth 4
                                        ;           Child Loop BB415_9 Depth 5
	ldr	w8, [sp, #40]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB415_16
	b	LBB415_6
LBB415_6:                               ;   in Loop: Header=BB415_5 Depth=3
	str	wzr, [sp, #36]
	b	LBB415_7
LBB415_7:                               ;   Parent Loop BB415_1 Depth=1
                                        ;     Parent Loop BB415_3 Depth=2
                                        ;       Parent Loop BB415_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB415_9 Depth 5
	ldr	w8, [sp, #36]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB415_14
	b	LBB415_8
LBB415_8:                               ;   in Loop: Header=BB415_7 Depth=4
	str	wzr, [sp, #32]
	b	LBB415_9
LBB415_9:                               ;   Parent Loop BB415_1 Depth=1
                                        ;     Parent Loop BB415_3 Depth=2
                                        ;       Parent Loop BB415_5 Depth=3
                                        ;         Parent Loop BB415_7 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldr	w8, [sp, #32]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB415_12
	b	LBB415_10
LBB415_10:                              ;   in Loop: Header=BB415_9 Depth=5
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #40]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #32]
	ldur	w4, [x29, #-32]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldur	s2, [x29, #-36]
	fmadd	s0, s0, s1, s2
	stur	s0, [x29, #-36]
	b	LBB415_11
LBB415_11:                              ;   in Loop: Header=BB415_9 Depth=5
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB415_9
LBB415_12:                              ;   in Loop: Header=BB415_7 Depth=4
	b	LBB415_13
LBB415_13:                              ;   in Loop: Header=BB415_7 Depth=4
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB415_7
LBB415_14:                              ;   in Loop: Header=BB415_5 Depth=3
	b	LBB415_15
LBB415_15:                              ;   in Loop: Header=BB415_5 Depth=3
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB415_5
LBB415_16:                              ;   in Loop: Header=BB415_3 Depth=2
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldur	s0, [x29, #-36]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #140
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-32]
	mov	w4, #0
	str	w4, [sp, #12]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #656
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldur	w2, [x29, #-32]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #16]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB415_17
LBB415_17:                              ;   in Loop: Header=BB415_3 Depth=2
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB415_3
LBB415_18:                              ;   in Loop: Header=BB415_1 Depth=1
	b	LBB415_19
LBB415_19:                              ;   in Loop: Header=BB415_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB415_1
LBB415_20:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN4ReluILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN4ReluILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN4ReluILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN4ReluILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.139@PAGE
	add	x0, x0, l_.str.139@PAGEOFF
	mov	w1, #133
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN4ReluILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN4ReluILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	add	x0, x8, #136
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-16]
	str	x8, [x9, #128]
	stur	wzr, [x29, #-28]
	b	LBB418_1
LBB418_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB418_3 Depth 2
                                        ;       Child Loop BB418_5 Depth 3
                                        ;         Child Loop BB418_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB418_16
	b	LBB418_2
LBB418_2:                               ;   in Loop: Header=BB418_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB418_3
LBB418_3:                               ;   Parent Loop BB418_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB418_5 Depth 3
                                        ;         Child Loop BB418_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB418_14
	b	LBB418_4
LBB418_4:                               ;   in Loop: Header=BB418_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB418_5
LBB418_5:                               ;   Parent Loop BB418_1 Depth=1
                                        ;     Parent Loop BB418_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB418_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB418_12
	b	LBB418_6
LBB418_6:                               ;   in Loop: Header=BB418_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB418_7
LBB418_7:                               ;   Parent Loop BB418_1 Depth=1
                                        ;     Parent Loop BB418_3 Depth=2
                                        ;       Parent Loop BB418_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB418_10
	b	LBB418_8
LBB418_8:                               ;   in Loop: Header=BB418_7 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s1, [x0]
	movi	d0, #0000000000000000
	bl	__ZL5max_rff
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB418_9
LBB418_9:                               ;   in Loop: Header=BB418_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB418_7
LBB418_10:                              ;   in Loop: Header=BB418_5 Depth=3
	b	LBB418_11
LBB418_11:                              ;   in Loop: Header=BB418_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB418_5
LBB418_12:                              ;   in Loop: Header=BB418_3 Depth=2
	b	LBB418_13
LBB418_13:                              ;   in Loop: Header=BB418_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB418_3
LBB418_14:                              ;   in Loop: Header=BB418_1 Depth=1
	b	LBB418_15
LBB418_15:                              ;   in Loop: Header=BB418_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB418_1
LBB418_16:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN7DropoutILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN7DropoutILi64ELi128ELi1ELi1EE16forward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x0, [x29, #-8]
	ldr	x1, [sp, #16]
	ldr	w2, [sp, #12]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN7DropoutILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN7DropoutILi64ELi128ELi1ELi1EE17forward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	str	w2, [sp, #12]
	ldur	x8, [x29, #-8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.141@PAGE
	add	x0, x0, l_.str.141@PAGEOFF
	mov	w1, #146
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.weak_definition	__ZN7DropoutILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi: ; @_ZN7DropoutILi64ELi128ELi1ELi1EE12forward_baseER6tensorIfLi64ELi128ELi1ELi1EEi
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-24]
	add	x0, x8, #136
	ldur	w1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	bl	__ZN9rnd_gen_t9get_stateEv
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #152
	movk	x9, #1, lsl #16
	str	x0, [x8, x9]
	ldur	w8, [x29, #-20]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB421_2
	b	LBB421_1
LBB421_1:
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #144
	movk	x9, #1, lsl #16
	ldr	s0, [x8, x9]
	fcvt	d0, s0
	str	d0, [sp, #16]                   ; 8-byte Folded Spill
	b	LBB421_3
LBB421_2:
	movi	d0, #0000000000000000
	str	d0, [sp, #16]                   ; 8-byte Folded Spill
	b	LBB421_3
LBB421_3:
	ldr	d0, [sp, #16]                   ; 8-byte Folded Reload
	fcvt	s0, d0
	stur	s0, [x29, #-28]
	ldur	s1, [x29, #-28]
	fmov	s0, #1.00000000
	fsub	s0, s0, s1
	fcvt	d1, s0
	fmov	d0, #1.00000000
	fdiv	d0, d0, d1
	fcvt	s0, d0
	stur	s0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB421_4
LBB421_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB421_6 Depth 2
                                        ;       Child Loop BB421_8 Depth 3
                                        ;         Child Loop BB421_10 Depth 4
	ldur	w8, [x29, #-36]
	ldur	w9, [x29, #-24]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB421_22
	b	LBB421_5
LBB421_5:                               ;   in Loop: Header=BB421_4 Depth=1
	str	wzr, [sp, #40]
	b	LBB421_6
LBB421_6:                               ;   Parent Loop BB421_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB421_8 Depth 3
                                        ;         Child Loop BB421_10 Depth 4
	ldr	w8, [sp, #40]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB421_20
	b	LBB421_7
LBB421_7:                               ;   in Loop: Header=BB421_6 Depth=2
	str	wzr, [sp, #36]
	b	LBB421_8
LBB421_8:                               ;   Parent Loop BB421_4 Depth=1
                                        ;     Parent Loop BB421_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB421_10 Depth 4
	ldr	w8, [sp, #36]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB421_18
	b	LBB421_9
LBB421_9:                               ;   in Loop: Header=BB421_8 Depth=3
	str	wzr, [sp, #32]
	b	LBB421_10
LBB421_10:                              ;   Parent Loop BB421_4 Depth=1
                                        ;     Parent Loop BB421_6 Depth=2
                                        ;       Parent Loop BB421_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB421_16
	b	LBB421_11
LBB421_11:                              ;   in Loop: Header=BB421_10 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	bl	__ZN9rnd_gen_t6rand01Ev
	ldur	s1, [x29, #-28]
	fcvt	d1, s1
	fcmp	d0, d1
	cset	w8, pl
	tbnz	w8, #0, LBB421_13
	b	LBB421_12
LBB421_12:                              ;   in Loop: Header=BB421_10 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	add	x0, x8, #136
	ldur	w1, [x29, #-36]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	movi	d0, #0000000000000000
	str	s0, [x0]
	b	LBB421_14
LBB421_13:                              ;   in Loop: Header=BB421_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	ldur	s1, [x29, #-32]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldur	w1, [x29, #-36]
	ldr	w2, [sp, #40]
	ldr	w3, [sp, #36]
	ldr	w4, [sp, #32]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB421_14
LBB421_14:                              ;   in Loop: Header=BB421_10 Depth=4
	b	LBB421_15
LBB421_15:                              ;   in Loop: Header=BB421_10 Depth=4
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB421_10
LBB421_16:                              ;   in Loop: Header=BB421_8 Depth=3
	b	LBB421_17
LBB421_17:                              ;   in Loop: Header=BB421_8 Depth=3
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB421_8
LBB421_18:                              ;   in Loop: Header=BB421_6 Depth=2
	b	LBB421_19
LBB421_19:                              ;   in Loop: Header=BB421_6 Depth=2
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB421_6
LBB421_20:                              ;   in Loop: Header=BB421_4 Depth=1
	b	LBB421_21
LBB421_21:                              ;   in Loop: Header=BB421_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB421_4
LBB421_22:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB422_2
	b	LBB422_1
LBB422_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB422_3
	b	LBB422_4
LBB422_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB422_8
LBB422_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB422_8
LBB422_4:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB422_6
	b	LBB422_5
LBB422_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB422_7
LBB422_6:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB422_7
LBB422_7:
	b	LBB422_8
LBB422_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #32908
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB423_2
	b	LBB423_1
LBB423_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB423_3
	b	LBB423_4
LBB423_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB423_8
LBB423_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB423_8
LBB423_4:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB423_6
	b	LBB423_5
LBB423_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB423_7
LBB423_6:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB423_7
LBB423_7:
	b	LBB423_8
LBB423_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #32908
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	subs	w8, w8, #0
                                        ; kill: def $x8 killed $w8
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	subs	x8, x8, #3
	cset	w8, hi
	tbnz	w8, #0, LBB424_6
; %bb.1:
	ldr	x11, [sp, #8]                   ; 8-byte Folded Reload
	adrp	x10, LJTI424_0@PAGE
	add	x10, x10, LJTI424_0@PAGEOFF
Ltmp119:
	adr	x8, Ltmp119
	ldrsw	x9, [x10, x11, lsl #2]
	add	x8, x8, x9
	br	x8
LBB424_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB424_10
LBB424_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16backward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB424_10
LBB424_4:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB424_10
LBB424_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB424_10
LBB424_6:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB424_8
	b	LBB424_7
LBB424_7:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB424_9
LBB424_8:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	b	LBB424_9
LBB424_9:
	b	LBB424_10
LBB424_10:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #33948
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
	.section	__TEXT,__const
	.p2align	2
LJTI424_0:
	.long	LBB424_4-Ltmp119
	.long	LBB424_5-Ltmp119
	.long	LBB424_3-Ltmp119
	.long	LBB424_2-Ltmp119
                                        ; -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE
	.weak_definition	__ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE: ; @_ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB425_2
	b	LBB425_1
LBB425_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB425_3
	b	LBB425_4
LBB425_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE
	b	LBB425_8
LBB425_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE
	b	LBB425_8
LBB425_4:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB425_6
	b	LBB425_5
LBB425_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE
	b	LBB425_7
LBB425_6:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE
	b	LBB425_7
LBB425_7:
	b	LBB425_8
LBB425_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #140
	movk	x9, #36, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE
	.weak_definition	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB426_2
	b	LBB426_1
LBB426_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB426_3
	b	LBB426_4
LBB426_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE
	b	LBB426_8
LBB426_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE
	b	LBB426_8
LBB426_4:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB426_6
	b	LBB426_5
LBB426_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE
	b	LBB426_7
LBB426_6:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE
	b	LBB426_7
LBB426_7:
	b	LBB426_8
LBB426_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #140
	movk	x9, #108, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE
	.weak_definition	__ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE: ; @_ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB427_2
	b	LBB427_1
LBB427_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB427_3
	b	LBB427_4
LBB427_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE
	b	LBB427_8
LBB427_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE
	b	LBB427_8
LBB427_4:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB427_6
	b	LBB427_5
LBB427_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE
	b	LBB427_7
LBB427_6:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE
	b	LBB427_7
LBB427_7:
	b	LBB427_8
LBB427_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #140
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB428_4
	b	LBB428_1
LBB428_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB428_5
	b	LBB428_2
LBB428_2:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #2
	cset	w8, ne
	tbnz	w8, #0, LBB428_6
	b	LBB428_3
LBB428_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16backward_cpu_ompER6tensorIfLi64ELi64ELi24ELi24EE
	b	LBB428_10
LBB428_4:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE
	b	LBB428_10
LBB428_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE
	b	LBB428_10
LBB428_6:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB428_8
	b	LBB428_7
LBB428_7:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE
	b	LBB428_9
LBB428_8:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE
	b	LBB428_9
LBB428_9:
	b	LBB428_10
LBB428_10:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #17052
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	.weak_definition	__ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE: ; @_ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	w8, [x8, #96]
	str	w8, [sp, #12]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB429_2
	b	LBB429_1
LBB429_1:
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB429_3
	b	LBB429_4
LBB429_2:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE
	b	LBB429_8
LBB429_3:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE
	b	LBB429_8
LBB429_4:
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB429_6
	b	LBB429_5
LBB429_5:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE
	b	LBB429_7
LBB429_6:
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldur	x1, [x29, #-16]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE
	b	LBB429_7
LBB429_7:
	b	LBB429_8
LBB429_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #32]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x8, [sp, #32]
	str	x8, [sp, #16]
	ldr	x2, [sp, #24]
	ldr	x3, [sp, #16]
	adrp	x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #32908
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN7DropoutILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN7DropoutILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN7DropoutILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN7DropoutILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN7DropoutILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.141@PAGE
	add	x0, x0, l_.str.141@PAGEOFF
	mov	w1, #254
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN7DropoutILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN7DropoutILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN7DropoutILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN7DropoutILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #32908
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	mov	x9, #152
	movk	x9, #1, lsl #16
	ldr	x1, [x8, x9]
	bl	__ZN9rnd_gen_t4seedEy
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #144
	movk	x9, #1, lsl #16
	ldr	s1, [x8, x9]
	fmov	s0, #1.00000000
	fsub	s0, s0, s1
	fcvt	d1, s0
	fmov	d0, #1.00000000
	fdiv	d0, d0, d1
	fcvt	s0, d0
	stur	s0, [x29, #-24]
	stur	wzr, [x29, #-28]
	b	LBB432_1
LBB432_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB432_3 Depth 2
                                        ;       Child Loop BB432_5 Depth 3
                                        ;         Child Loop BB432_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB432_19
	b	LBB432_2
LBB432_2:                               ;   in Loop: Header=BB432_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB432_3
LBB432_3:                               ;   Parent Loop BB432_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB432_5 Depth 3
                                        ;         Child Loop BB432_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB432_17
	b	LBB432_4
LBB432_4:                               ;   in Loop: Header=BB432_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB432_5
LBB432_5:                               ;   Parent Loop BB432_1 Depth=1
                                        ;     Parent Loop BB432_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB432_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB432_15
	b	LBB432_6
LBB432_6:                               ;   in Loop: Header=BB432_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB432_7
LBB432_7:                               ;   Parent Loop BB432_1 Depth=1
                                        ;     Parent Loop BB432_3 Depth=2
                                        ;       Parent Loop BB432_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB432_13
	b	LBB432_8
LBB432_8:                               ;   in Loop: Header=BB432_7 Depth=4
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	bl	__ZN9rnd_gen_t6rand01Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #144
	movk	x9, #1, lsl #16
	ldr	s1, [x8, x9]
	fcvt	d1, s1
	fcmp	d0, d1
	cset	w8, pl
	tbnz	w8, #0, LBB432_10
	b	LBB432_9
LBB432_9:                               ;   in Loop: Header=BB432_7 Depth=4
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #32908
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	movi	d0, #0000000000000000
	str	s0, [x0]
	b	LBB432_11
LBB432_10:                              ;   in Loop: Header=BB432_7 Depth=4
	ldur	s0, [x29, #-24]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #32908
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB432_11
LBB432_11:                              ;   in Loop: Header=BB432_7 Depth=4
	b	LBB432_12
LBB432_12:                              ;   in Loop: Header=BB432_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB432_7
LBB432_13:                              ;   in Loop: Header=BB432_5 Depth=3
	b	LBB432_14
LBB432_14:                              ;   in Loop: Header=BB432_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB432_5
LBB432_15:                              ;   in Loop: Header=BB432_3 Depth=2
	b	LBB432_16
LBB432_16:                              ;   in Loop: Header=BB432_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB432_3
LBB432_17:                              ;   in Loop: Header=BB432_1 Depth=1
	b	LBB432_18
LBB432_18:                              ;   in Loop: Header=BB432_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB432_1
LBB432_19:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN4ReluILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN4ReluILi64ELi128ELi1ELi1EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN4ReluILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN4ReluILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN4ReluILi64ELi128ELi1ELi1EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.139@PAGE
	add	x0, x0, l_.str.139@PAGEOFF
	mov	w1, #236
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN4ReluILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN4ReluILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN4ReluILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN4ReluILi64ELi128ELi1ELi1EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #32908
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [x8, #128]
	str	x8, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB435_1
LBB435_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB435_3 Depth 2
                                        ;       Child Loop BB435_5 Depth 3
                                        ;         Child Loop BB435_7 Depth 4
	ldr	w8, [sp, #28]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB435_19
	b	LBB435_2
LBB435_2:                               ;   in Loop: Header=BB435_1 Depth=1
	str	wzr, [sp, #24]
	b	LBB435_3
LBB435_3:                               ;   Parent Loop BB435_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB435_5 Depth 3
                                        ;         Child Loop BB435_7 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB435_17
	b	LBB435_4
LBB435_4:                               ;   in Loop: Header=BB435_3 Depth=2
	str	wzr, [sp, #20]
	b	LBB435_5
LBB435_5:                               ;   Parent Loop BB435_1 Depth=1
                                        ;     Parent Loop BB435_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB435_7 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB435_15
	b	LBB435_6
LBB435_6:                               ;   in Loop: Header=BB435_5 Depth=3
	str	wzr, [sp, #16]
	b	LBB435_7
LBB435_7:                               ;   Parent Loop BB435_1 Depth=1
                                        ;     Parent Loop BB435_3 Depth=2
                                        ;       Parent Loop BB435_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB435_13
	b	LBB435_8
LBB435_8:                               ;   in Loop: Header=BB435_7 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	fcmp	s0, #0.0
	cset	w8, lt
	tbnz	w8, #0, LBB435_10
	b	LBB435_9
LBB435_9:                               ;   in Loop: Header=BB435_7 Depth=4
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB435_11
LBB435_10:                              ;   in Loop: Header=BB435_7 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB435_11
LBB435_11:                              ;   in Loop: Header=BB435_7 Depth=4
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [sp]                        ; 4-byte Folded Spill
	mov	x9, #32908
	add	x0, x8, x9
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [sp]                        ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB435_12
LBB435_12:                              ;   in Loop: Header=BB435_7 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB435_7
LBB435_13:                              ;   in Loop: Header=BB435_5 Depth=3
	b	LBB435_14
LBB435_14:                              ;   in Loop: Header=BB435_5 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB435_5
LBB435_15:                              ;   in Loop: Header=BB435_3 Depth=2
	b	LBB435_16
LBB435_16:                              ;   in Loop: Header=BB435_3 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB435_3
LBB435_17:                              ;   in Loop: Header=BB435_1 Depth=1
	b	LBB435_18
LBB435_18:                              ;   in Loop: Header=BB435_1 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB435_1
LBB435_19:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_simdER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	x29, x30, [sp, #224]            ; 16-byte Folded Spill
	add	x29, sp, #224
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	mov	w1, #64
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	mov	w1, #128
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #33948
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #128]
	stur	x8, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB436_1
LBB436_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB436_3 Depth 2
                                        ;       Child Loop BB436_5 Depth 3
                                        ;         Child Loop BB436_7 Depth 4
                                        ;           Child Loop BB436_10 Depth 5
	ldur	w8, [x29, #-36]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB436_23
	b	LBB436_2
LBB436_2:                               ;   in Loop: Header=BB436_1 Depth=1
	stur	wzr, [x29, #-40]
	b	LBB436_3
LBB436_3:                               ;   Parent Loop BB436_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB436_5 Depth 3
                                        ;         Child Loop BB436_7 Depth 4
                                        ;           Child Loop BB436_10 Depth 5
	ldur	w8, [x29, #-40]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB436_21
	b	LBB436_4
LBB436_4:                               ;   in Loop: Header=BB436_3 Depth=2
	stur	wzr, [x29, #-44]
	b	LBB436_5
LBB436_5:                               ;   Parent Loop BB436_1 Depth=1
                                        ;     Parent Loop BB436_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB436_7 Depth 4
                                        ;           Child Loop BB436_10 Depth 5
	ldur	w8, [x29, #-44]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB436_19
	b	LBB436_6
LBB436_6:                               ;   in Loop: Header=BB436_5 Depth=3
	stur	wzr, [x29, #-48]
	b	LBB436_7
LBB436_7:                               ;   Parent Loop BB436_1 Depth=1
                                        ;     Parent Loop BB436_3 Depth=2
                                        ;       Parent Loop BB436_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB436_10 Depth 5
	ldur	w8, [x29, #-48]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB436_17
	b	LBB436_8
LBB436_8:                               ;   in Loop: Header=BB436_7 Depth=4
	movi	d0, #0000000000000000
	stur	s0, [x29, #-52]
	; InlineAsm Start
	; ========== (backward_cpu_simd A) loop begins ==========
	; InlineAsm End
	ldur	x8, [x29, #-16]
	stur	x8, [x29, #-64]
	ldur	x8, [x29, #-32]
	stur	x8, [x29, #-72]
	ldur	w8, [x29, #-20]
	stur	w8, [x29, #-80]
	ldur	w9, [x29, #-80]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w9, w9, w10
	subs	w9, w9, #1
	stur	w9, [x29, #-84]
	stur	wzr, [x29, #-88]
	ldur	w9, [x29, #-80]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB436_15
	b	LBB436_9
LBB436_9:                               ;   in Loop: Header=BB436_7 Depth=4
	stur	wzr, [x29, #-92]
	movi	d0, #0000000000000000
	stur	s0, [x29, #-100]
	b	LBB436_10
LBB436_10:                              ;   Parent Loop BB436_1 Depth=1
                                        ;     Parent Loop BB436_3 Depth=2
                                        ;       Parent Loop BB436_5 Depth=3
                                        ;         Parent Loop BB436_7 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldur	w8, [x29, #-92]
	ldur	w9, [x29, #-84]
	add	w9, w9, #1
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB436_14
	b	LBB436_11
LBB436_11:                              ;   in Loop: Header=BB436_10 Depth=5
	ldur	w8, [x29, #-92]
	lsr	w8, w8, #0
	mov	w4, #0
	add	w8, w8, #0
	stur	w8, [x29, #-96]
	ldur	x0, [x29, #-64]
	ldur	w1, [x29, #-96]
	ldur	w2, [x29, #-48]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldur	w1, [x29, #-96]
	ldur	w2, [x29, #-36]
	ldur	w3, [x29, #-40]
	ldur	w4, [x29, #-44]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldur	s2, [x29, #-100]
	fmadd	s0, s0, s1, s2
	stur	s0, [x29, #-100]
	b	LBB436_12
LBB436_12:                              ;   in Loop: Header=BB436_10 Depth=5
	b	LBB436_13
LBB436_13:                              ;   in Loop: Header=BB436_10 Depth=5
	ldur	w8, [x29, #-92]
	add	w8, w8, #1
	stur	w8, [x29, #-92]
	b	LBB436_10
LBB436_14:                              ;   in Loop: Header=BB436_7 Depth=4
	ldur	w8, [x29, #-80]
	subs	w8, w8, #0
	mov	w9, #1
	sdiv	w8, w8, w9
	lsr	w8, w8, #0
	add	w8, w8, #0
	stur	w8, [x29, #-96]
	ldur	s0, [x29, #-52]
	ldur	s1, [x29, #-100]
	fadd	s0, s0, s1
	stur	s0, [x29, #-52]
	b	LBB436_15
LBB436_15:                              ;   in Loop: Header=BB436_7 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	; InlineAsm Start
	; ========== (backward_cpu_simd A) loop ends ==========
	; InlineAsm End
	ldur	w9, [x29, #-52]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-40]
	ldur	w3, [x29, #-44]
	ldur	w4, [x29, #-48]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB436_16
LBB436_16:                              ;   in Loop: Header=BB436_7 Depth=4
	ldur	w8, [x29, #-48]
	add	w8, w8, #1
	stur	w8, [x29, #-48]
	b	LBB436_7
LBB436_17:                              ;   in Loop: Header=BB436_5 Depth=3
	b	LBB436_18
LBB436_18:                              ;   in Loop: Header=BB436_5 Depth=3
	ldur	w8, [x29, #-44]
	add	w8, w8, #1
	stur	w8, [x29, #-44]
	b	LBB436_5
LBB436_19:                              ;   in Loop: Header=BB436_3 Depth=2
	b	LBB436_20
LBB436_20:                              ;   in Loop: Header=BB436_3 Depth=2
	ldur	w8, [x29, #-40]
	add	w8, w8, #1
	stur	w8, [x29, #-40]
	b	LBB436_3
LBB436_21:                              ;   in Loop: Header=BB436_1 Depth=1
	b	LBB436_22
LBB436_22:                              ;   in Loop: Header=BB436_1 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB436_1
LBB436_23:
	stur	wzr, [x29, #-104]
	b	LBB436_24
LBB436_24:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB436_27 Depth 2
	ldur	w8, [x29, #-104]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB436_34
	b	LBB436_25
LBB436_25:                              ;   in Loop: Header=BB436_24 Depth=1
	movi	d0, #0000000000000000
	stur	s0, [x29, #-108]
	; InlineAsm Start
	; ========== (backward_cpu_simd B) loop begins ==========
	; InlineAsm End
	ldur	x8, [x29, #-16]
	str	x8, [sp, #104]
	ldur	w8, [x29, #-20]
	str	w8, [sp, #96]
	ldr	w9, [sp, #96]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w9, w9, w10
	subs	w9, w9, #1
	str	w9, [sp, #92]
	str	wzr, [sp, #88]
	ldr	w9, [sp, #96]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB436_32
	b	LBB436_26
LBB436_26:                              ;   in Loop: Header=BB436_24 Depth=1
	str	wzr, [sp, #84]
	movi	d0, #0000000000000000
	str	s0, [sp, #76]
	b	LBB436_27
LBB436_27:                              ;   Parent Loop BB436_24 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #84]
	ldr	w9, [sp, #92]
	add	w9, w9, #1
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB436_31
	b	LBB436_28
LBB436_28:                              ;   in Loop: Header=BB436_27 Depth=2
	ldr	w8, [sp, #84]
	lsr	w8, w8, #0
	mov	w4, #0
	add	w8, w8, #0
	str	w8, [sp, #80]
	ldr	x0, [sp, #104]
	ldr	w1, [sp, #80]
	ldur	w2, [x29, #-104]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s1, [x0]
	ldr	s0, [sp, #76]
	fadd	s0, s0, s1
	str	s0, [sp, #76]
	b	LBB436_29
LBB436_29:                              ;   in Loop: Header=BB436_27 Depth=2
	b	LBB436_30
LBB436_30:                              ;   in Loop: Header=BB436_27 Depth=2
	ldr	w8, [sp, #84]
	add	w8, w8, #1
	str	w8, [sp, #84]
	b	LBB436_27
LBB436_31:                              ;   in Loop: Header=BB436_24 Depth=1
	ldr	w8, [sp, #96]
	subs	w8, w8, #0
	mov	w9, #1
	sdiv	w8, w8, w9
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #80]
	ldur	s0, [x29, #-108]
	ldr	s1, [sp, #76]
	fadd	s0, s0, s1
	stur	s0, [x29, #-108]
	b	LBB436_32
LBB436_32:                              ;   in Loop: Header=BB436_24 Depth=1
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	; InlineAsm Start
	; ========== (backward_cpu_simd B) loop ends ==========
	; InlineAsm End
	ldur	w9, [x29, #-108]
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-104]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB436_33
LBB436_33:                              ;   in Loop: Header=BB436_24 Depth=1
	ldur	w8, [x29, #-104]
	add	w8, w8, #1
	stur	w8, [x29, #-104]
	b	LBB436_24
LBB436_34:
	str	wzr, [sp, #72]
	b	LBB436_35
LBB436_35:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB436_37 Depth 2
                                        ;       Child Loop BB436_39 Depth 3
                                        ;         Child Loop BB436_41 Depth 4
                                        ;           Child Loop BB436_43 Depth 5
	ldr	w8, [sp, #72]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB436_55
	b	LBB436_36
LBB436_36:                              ;   in Loop: Header=BB436_35 Depth=1
	str	wzr, [sp, #68]
	b	LBB436_37
LBB436_37:                              ;   Parent Loop BB436_35 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB436_39 Depth 3
                                        ;         Child Loop BB436_41 Depth 4
                                        ;           Child Loop BB436_43 Depth 5
	ldr	w8, [sp, #68]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB436_53
	b	LBB436_38
LBB436_38:                              ;   in Loop: Header=BB436_37 Depth=2
	str	wzr, [sp, #64]
	b	LBB436_39
LBB436_39:                              ;   Parent Loop BB436_35 Depth=1
                                        ;     Parent Loop BB436_37 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB436_41 Depth 4
                                        ;           Child Loop BB436_43 Depth 5
	ldr	w8, [sp, #64]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB436_51
	b	LBB436_40
LBB436_40:                              ;   in Loop: Header=BB436_39 Depth=3
	str	wzr, [sp, #60]
	b	LBB436_41
LBB436_41:                              ;   Parent Loop BB436_35 Depth=1
                                        ;     Parent Loop BB436_37 Depth=2
                                        ;       Parent Loop BB436_39 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB436_43 Depth 5
	ldr	w8, [sp, #60]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB436_49
	b	LBB436_42
LBB436_42:                              ;   in Loop: Header=BB436_41 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #56]
	; InlineAsm Start
	; ========== (backward_cpu_simd C) loop begins ==========
	; InlineAsm End
	ldur	x8, [x29, #-16]
	str	x8, [sp, #48]
	str	wzr, [sp, #40]
	str	s0, [sp, #32]
	b	LBB436_43
LBB436_43:                              ;   Parent Loop BB436_35 Depth=1
                                        ;     Parent Loop BB436_37 Depth=2
                                        ;       Parent Loop BB436_39 Depth=3
                                        ;         Parent Loop BB436_41 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldr	w8, [sp, #40]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB436_47
	b	LBB436_44
LBB436_44:                              ;   in Loop: Header=BB436_43 Depth=5
	ldr	w8, [sp, #40]
	lsr	w8, w8, #0
	mov	w4, #0
	add	w8, w8, #0
	str	w8, [sp, #36]
	ldr	x0, [sp, #48]
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #36]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #68]
	ldr	w2, [sp, #64]
	ldr	w3, [sp, #60]
	ldr	w4, [sp, #36]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #32]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #32]
	b	LBB436_45
LBB436_45:                              ;   in Loop: Header=BB436_43 Depth=5
	b	LBB436_46
LBB436_46:                              ;   in Loop: Header=BB436_43 Depth=5
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB436_43
LBB436_47:                              ;   in Loop: Header=BB436_41 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	w9, #128
	str	w9, [sp, #36]
	ldr	s0, [sp, #56]
	ldr	s1, [sp, #32]
	fadd	s0, s0, s1
	str	s0, [sp, #56]
	; InlineAsm Start
	; ========== (backward_cpu_simd C) loop ends ==========
	; InlineAsm End
	ldr	w9, [sp, #56]
	str	w9, [sp, #4]                    ; 4-byte Folded Spill
	mov	x9, #33948
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #64]
	ldr	w4, [sp, #60]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	w8, [sp, #4]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB436_48
LBB436_48:                              ;   in Loop: Header=BB436_41 Depth=4
	ldr	w8, [sp, #60]
	add	w8, w8, #1
	str	w8, [sp, #60]
	b	LBB436_41
LBB436_49:                              ;   in Loop: Header=BB436_39 Depth=3
	b	LBB436_50
LBB436_50:                              ;   in Loop: Header=BB436_39 Depth=3
	ldr	w8, [sp, #64]
	add	w8, w8, #1
	str	w8, [sp, #64]
	b	LBB436_39
LBB436_51:                              ;   in Loop: Header=BB436_37 Depth=2
	b	LBB436_52
LBB436_52:                              ;   in Loop: Header=BB436_37 Depth=2
	ldr	w8, [sp, #68]
	add	w8, w8, #1
	str	w8, [sp, #68]
	b	LBB436_37
LBB436_53:                              ;   in Loop: Header=BB436_35 Depth=1
	b	LBB436_54
LBB436_54:                              ;   in Loop: Header=BB436_35 Depth=1
	ldr	w8, [sp, #72]
	add	w8, w8, #1
	str	w8, [sp, #72]
	b	LBB436_35
LBB436_55:
	.cfi_def_cfa wsp, 240
	ldp	x29, x30, [sp, #224]            ; 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16backward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE16backward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16backward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16backward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE16backward_cpu_ompER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #96]             ; 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	sub	x10, x29, #20
	str	x10, [sp, #40]                  ; 8-byte Folded Spill
	stur	w9, [x29, #-20]
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	mov	w1, #64
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	mov	w1, #128
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	mov	x9, #33948
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei
	ldr	x12, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x9, [x8, #128]
	stur	x9, [x29, #-32]
	ldur	x11, [x29, #-16]
	ldur	x10, [x29, #-32]
	mov	x9, sp
	str	x12, [x9]
	str	x11, [x9, #8]
	str	x10, [x9, #16]
	str	x8, [x9, #24]
	adrp	x0, l___unnamed_31@PAGE
	add	x0, x0, l___unnamed_31@PAGEOFF
	mov	w1, #4
	adrp	x2, _.omp_outlined..150@PAGE
	add	x2, x2, _.omp_outlined..150@PAGEOFF
	bl	___kmpc_fork_call
	ldr	x11, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldur	x10, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_32@PAGE
	add	x0, x0, l___unnamed_32@PAGEOFF
	mov	w1, #3
	stur	w1, [x29, #-36]                 ; 4-byte Folded Spill
	adrp	x2, _.omp_outlined..151@PAGE
	add	x2, x2, _.omp_outlined..151@PAGEOFF
	bl	___kmpc_fork_call
	ldr	x11, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldur	w1, [x29, #-36]                 ; 4-byte Folded Reload
	ldur	x10, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_33@PAGE
	add	x0, x0, l___unnamed_33@PAGEOFF
	adrp	x2, _.omp_outlined..152@PAGE
	add	x2, x2, _.omp_outlined..152@PAGEOFF
	bl	___kmpc_fork_call
	.cfi_def_cfa wsp, 112
	ldp	x29, x30, [sp, #96]             ; 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.143@PAGE
	add	x0, x0, l_.str.143@PAGEOFF
	mov	w1, #522
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..150
_.omp_outlined..150:                    ; @.omp_outlined..150
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #176]            ; 16-byte Folded Spill
	add	x29, sp, #176
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	stur	x5, [x29, #-48]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-32]
	ldur	x8, [x29, #-40]
	ldur	x10, [x29, #-48]
	str	x10, [sp, #40]                  ; 8-byte Folded Spill
	stur	x9, [x29, #-56]
	stur	x8, [x29, #-64]
	add	x4, sp, #88
	str	wzr, [sp, #88]
	add	x5, sp, #84
	mov	w8, #1179647
	str	w8, [sp, #84]
	add	x6, sp, #80
	mov	w7, #1
	str	w7, [sp, #80]
	add	x3, sp, #76
	str	wzr, [sp, #76]
	ldur	x8, [x29, #-8]
	ldr	w1, [x8]
	str	w1, [sp, #48]                   ; 4-byte Folded Spill
	mov	x8, sp
	str	w7, [x8]
	adrp	x0, l___unnamed_34@PAGE
	add	x0, x0, l___unnamed_34@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_4
	ldr	w8, [sp, #84]
	subs	w8, w8, #288, lsl #12           ; =1179648
	cset	w8, lt
	tbnz	w8, #0, LBB440_2
	b	LBB440_1
LBB440_1:
	mov	w8, #1179647
	str	w8, [sp, #28]                   ; 4-byte Folded Spill
	b	LBB440_3
LBB440_2:
	ldr	w8, [sp, #84]
	str	w8, [sp, #28]                   ; 4-byte Folded Spill
	b	LBB440_3
LBB440_3:
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	str	w8, [sp, #84]
	ldr	w8, [sp, #88]
	stur	w8, [x29, #-68]
	b	LBB440_4
LBB440_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB440_6 Depth 2
	ldur	w8, [x29, #-68]
	ldr	w9, [sp, #84]
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB440_12
	b	LBB440_5
LBB440_5:                               ;   in Loop: Header=BB440_4 Depth=1
	ldur	w8, [x29, #-68]
	mov	w14, #18432
	str	w14, [sp, #24]                  ; 4-byte Folded Spill
	sdiv	w8, w8, w14
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #72]
	ldur	w8, [x29, #-68]
	ldur	w9, [x29, #-68]
	sdiv	w9, w9, w14
	mul	w9, w9, w14
	subs	w8, w8, w9
	mov	w12, #1536
	sdiv	w8, w8, w12
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #68]
	ldur	w8, [x29, #-68]
	ldur	w9, [x29, #-68]
	sdiv	w9, w9, w14
	mul	w9, w9, w14
	subs	w8, w8, w9
	ldur	w9, [x29, #-68]
	ldur	w10, [x29, #-68]
	sdiv	w10, w10, w14
	mul	w10, w10, w14
	subs	w9, w9, w10
	sdiv	w9, w9, w12
	mul	w9, w9, w12
	subs	w8, w8, w9
	mov	w10, #128
	sdiv	w8, w8, w10
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #64]
	ldur	w8, [x29, #-68]
	ldur	w9, [x29, #-68]
	sdiv	w9, w9, w14
	mul	w9, w9, w14
	subs	w8, w8, w9
	ldur	w9, [x29, #-68]
	ldur	w11, [x29, #-68]
	sdiv	w11, w11, w14
	mul	w11, w11, w14
	subs	w9, w9, w11
	sdiv	w9, w9, w12
	mul	w9, w9, w12
	subs	w8, w8, w9
	ldur	w9, [x29, #-68]
	ldur	w11, [x29, #-68]
	sdiv	w11, w11, w14
	mul	w11, w11, w14
	subs	w9, w9, w11
	ldur	w11, [x29, #-68]
	ldur	w13, [x29, #-68]
	sdiv	w13, w13, w14
	mul	w13, w13, w14
	subs	w11, w11, w13
	sdiv	w11, w11, w12
	mul	w11, w11, w12
	subs	w9, w9, w11
	sdiv	w9, w9, w10
	subs	w8, w8, w9, lsl #7
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #60]
	movi	d0, #0000000000000000
	str	s0, [sp, #56]
	str	wzr, [sp, #52]
	b	LBB440_6
LBB440_6:                               ;   Parent Loop BB440_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #52]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB440_9
	b	LBB440_7
LBB440_7:                               ;   in Loop: Header=BB440_6 Depth=2
	ldur	x0, [x29, #-56]
	ldr	w1, [sp, #52]
	ldr	w2, [sp, #60]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #52]
	ldr	w2, [sp, #72]
	ldr	w3, [sp, #68]
	ldr	w4, [sp, #64]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #56]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #56]
	b	LBB440_8
LBB440_8:                               ;   in Loop: Header=BB440_6 Depth=2
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB440_6
LBB440_9:                               ;   in Loop: Header=BB440_4 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #56]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #64]
	ldr	w4, [sp, #60]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB440_10
LBB440_10:                              ;   in Loop: Header=BB440_4 Depth=1
	b	LBB440_11
LBB440_11:                              ;   in Loop: Header=BB440_4 Depth=1
	ldur	w8, [x29, #-68]
	add	w8, w8, #1
	stur	w8, [x29, #-68]
	b	LBB440_4
LBB440_12:
	b	LBB440_13
LBB440_13:
	ldr	w1, [sp, #48]                   ; 4-byte Folded Reload
	adrp	x0, l___unnamed_35@PAGE
	add	x0, x0, l___unnamed_35@PAGEOFF
	bl	___kmpc_for_static_fini
	.cfi_def_cfa wsp, 192
	ldp	x29, x30, [sp, #176]            ; 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..151
_.omp_outlined..151:                    ; @.omp_outlined..151
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #128]            ; 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-32]
	ldur	x9, [x29, #-40]
	str	x9, [sp, #32]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-48]
	sub	x4, x29, #60
	stur	wzr, [x29, #-60]
	add	x5, sp, #64
	mov	w8, #127
	str	w8, [sp, #64]
	add	x6, sp, #60
	mov	w7, #1
	str	w7, [sp, #60]
	add	x3, sp, #56
	str	wzr, [sp, #56]
	ldur	x8, [x29, #-8]
	ldr	w1, [x8]
	str	w1, [sp, #40]                   ; 4-byte Folded Spill
	mov	x8, sp
	str	w7, [x8]
	adrp	x0, l___unnamed_36@PAGE
	add	x0, x0, l___unnamed_36@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_4
	ldr	w8, [sp, #64]
	subs	w8, w8, #127
	cset	w8, le
	tbnz	w8, #0, LBB441_2
	b	LBB441_1
LBB441_1:
	mov	w8, #127
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	b	LBB441_3
LBB441_2:
	ldr	w8, [sp, #64]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	b	LBB441_3
LBB441_3:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	str	w8, [sp, #64]
	ldur	w8, [x29, #-60]
	stur	w8, [x29, #-52]
	b	LBB441_4
LBB441_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB441_6 Depth 2
	ldur	w8, [x29, #-52]
	ldr	w9, [sp, #64]
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB441_12
	b	LBB441_5
LBB441_5:                               ;   in Loop: Header=BB441_4 Depth=1
	ldur	w8, [x29, #-52]
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #52]
	movi	d0, #0000000000000000
	str	s0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB441_6
LBB441_6:                               ;   Parent Loop BB441_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	x9, [sp, #24]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #44]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB441_9
	b	LBB441_7
LBB441_7:                               ;   in Loop: Header=BB441_6 Depth=2
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #44]
	ldr	w2, [sp, #52]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s1, [x0]
	ldr	s0, [sp, #48]
	fadd	s0, s0, s1
	str	s0, [sp, #48]
	b	LBB441_8
LBB441_8:                               ;   in Loop: Header=BB441_6 Depth=2
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB441_6
LBB441_9:                               ;   in Loop: Header=BB441_4 Depth=1
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #48]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #52]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB441_10
LBB441_10:                              ;   in Loop: Header=BB441_4 Depth=1
	b	LBB441_11
LBB441_11:                              ;   in Loop: Header=BB441_4 Depth=1
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB441_4
LBB441_12:
	b	LBB441_13
LBB441_13:
	ldr	w1, [sp, #40]                   ; 4-byte Folded Reload
	adrp	x0, l___unnamed_37@PAGE
	add	x0, x0, l___unnamed_37@PAGEOFF
	bl	___kmpc_for_static_fini
	.cfi_def_cfa wsp, 144
	ldp	x29, x30, [sp, #128]            ; 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..152
_.omp_outlined..152:                    ; @.omp_outlined..152
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, #208]            ; 16-byte Folded Spill
	add	x29, sp, #208
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	sub	x8, x29, #24
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	str	x0, [x8, #16]
	str	x1, [x8, #8]
	str	x2, [x8]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	ldr	x8, [x8]
	ldur	x9, [x29, #-32]
	ldur	x10, [x29, #-40]
	str	x10, [sp, #40]                  ; 8-byte Folded Spill
	stur	x9, [x29, #-48]
	ldr	w8, [x8]
	stur	w8, [x29, #-76]
	ldur	w9, [x29, #-76]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w10, w9, w10
                                        ; implicit-def: $x9
	mov	x9, x10
	sxtw	x9, w9
	lsl	x9, x9, #6
	mov	x10, #12
	mul	x9, x9, x10
	mul	x9, x9, x10
	subs	x9, x9, #1
	stur	x9, [x29, #-88]
	stur	wzr, [x29, #-92]
	stur	wzr, [x29, #-96]
	stur	wzr, [x29, #-100]
	str	wzr, [sp, #104]
	ldur	w9, [x29, #-76]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB442_15
	b	LBB442_1
LBB442_1:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	add	x4, sp, #96
	str	xzr, [sp, #96]
	ldur	x9, [x29, #-88]
	add	x5, sp, #88
	str	x9, [sp, #88]
	add	x6, sp, #80
	mov	x7, #1
	str	x7, [sp, #80]
	add	x3, sp, #76
	str	wzr, [sp, #76]
	ldr	x8, [x8, #16]
	ldr	w1, [x8]
	mov	x8, sp
	str	x7, [x8]
	adrp	x0, l___unnamed_38@PAGE
	add	x0, x0, l___unnamed_38@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_8
	ldr	x8, [sp, #88]
	ldur	x9, [x29, #-88]
	subs	x8, x8, x9
	cset	w8, le
	tbnz	w8, #0, LBB442_3
	b	LBB442_2
LBB442_2:
	ldur	x8, [x29, #-88]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB442_4
LBB442_3:
	ldr	x8, [sp, #88]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	b	LBB442_4
LBB442_4:
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	str	x8, [sp, #88]
	ldr	x8, [sp, #96]
	stur	x8, [x29, #-56]
	b	LBB442_5
LBB442_5:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB442_7 Depth 2
	ldur	x8, [x29, #-56]
	ldr	x9, [sp, #88]
	subs	x8, x8, x9
	cset	w8, gt
	tbnz	w8, #0, LBB442_13
	b	LBB442_6
LBB442_6:                               ;   in Loop: Header=BB442_5 Depth=1
	ldur	x8, [x29, #-56]
	mov	x14, #9216
	str	x14, [sp, #16]                  ; 8-byte Folded Spill
	sdiv	x8, x8, x14
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #72]
	ldur	x8, [x29, #-56]
	ldur	x9, [x29, #-56]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	mov	x12, #144
	sdiv	x8, x8, x12
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #68]
	ldur	x8, [x29, #-56]
	ldur	x9, [x29, #-56]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	ldur	x9, [x29, #-56]
	ldur	x10, [x29, #-56]
	sdiv	x10, x10, x14
	mul	x10, x10, x14
	subs	x9, x9, x10
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	mov	x10, #12
	sdiv	x8, x8, x10
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #64]
	ldur	x8, [x29, #-56]
	ldur	x9, [x29, #-56]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	ldur	x9, [x29, #-56]
	ldur	x11, [x29, #-56]
	sdiv	x11, x11, x14
	mul	x11, x11, x14
	subs	x9, x9, x11
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	ldur	x9, [x29, #-56]
	ldur	x11, [x29, #-56]
	sdiv	x11, x11, x14
	mul	x11, x11, x14
	subs	x9, x9, x11
	ldur	x11, [x29, #-56]
	ldur	x13, [x29, #-56]
	sdiv	x13, x13, x14
	mul	x13, x13, x14
	subs	x11, x11, x13
	sdiv	x11, x11, x12
	mul	x11, x11, x12
	subs	x9, x9, x11
	sdiv	x9, x9, x10
	mul	x9, x9, x10
	subs	x8, x8, x9
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #60]
	movi	d0, #0000000000000000
	str	s0, [sp, #56]
	str	wzr, [sp, #52]
	b	LBB442_7
LBB442_7:                               ;   Parent Loop BB442_5 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #52]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB442_10
	b	LBB442_8
LBB442_8:                               ;   in Loop: Header=BB442_7 Depth=2
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #52]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #68]
	ldr	w2, [sp, #64]
	ldr	w3, [sp, #60]
	ldr	w4, [sp, #52]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #56]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #56]
	b	LBB442_9
LBB442_9:                               ;   in Loop: Header=BB442_7 Depth=2
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB442_7
LBB442_10:                              ;   in Loop: Header=BB442_5 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #56]
	str	w9, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #33948
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #64]
	ldr	w4, [sp, #60]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	w8, [sp, #8]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB442_11
LBB442_11:                              ;   in Loop: Header=BB442_5 Depth=1
	b	LBB442_12
LBB442_12:                              ;   in Loop: Header=BB442_5 Depth=1
	ldur	x8, [x29, #-56]
	add	x8, x8, #1
	stur	x8, [x29, #-56]
	b	LBB442_5
LBB442_13:
	b	LBB442_14
LBB442_14:
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #16]
	ldr	w1, [x8]
	adrp	x0, l___unnamed_39@PAGE
	add	x0, x0, l___unnamed_39@PAGEOFF
	bl	___kmpc_for_static_fini
	b	LBB442_15
LBB442_15:
	.cfi_def_cfa wsp, 224
	ldp	x29, x30, [sp, #208]            ; 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi128ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #128]            ; 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	mov	w1, #64
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	mov	w1, #128
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	mov	x9, #33948
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #128]
	stur	x8, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB443_1
LBB443_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB443_3 Depth 2
                                        ;       Child Loop BB443_5 Depth 3
                                        ;         Child Loop BB443_7 Depth 4
                                        ;           Child Loop BB443_9 Depth 5
	ldur	w8, [x29, #-36]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB443_20
	b	LBB443_2
LBB443_2:                               ;   in Loop: Header=BB443_1 Depth=1
	stur	wzr, [x29, #-40]
	b	LBB443_3
LBB443_3:                               ;   Parent Loop BB443_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB443_5 Depth 3
                                        ;         Child Loop BB443_7 Depth 4
                                        ;           Child Loop BB443_9 Depth 5
	ldur	w8, [x29, #-40]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB443_18
	b	LBB443_4
LBB443_4:                               ;   in Loop: Header=BB443_3 Depth=2
	stur	wzr, [x29, #-44]
	b	LBB443_5
LBB443_5:                               ;   Parent Loop BB443_1 Depth=1
                                        ;     Parent Loop BB443_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB443_7 Depth 4
                                        ;           Child Loop BB443_9 Depth 5
	ldur	w8, [x29, #-44]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB443_16
	b	LBB443_6
LBB443_6:                               ;   in Loop: Header=BB443_5 Depth=3
	stur	wzr, [x29, #-48]
	b	LBB443_7
LBB443_7:                               ;   Parent Loop BB443_1 Depth=1
                                        ;     Parent Loop BB443_3 Depth=2
                                        ;       Parent Loop BB443_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB443_9 Depth 5
	ldur	w8, [x29, #-48]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB443_14
	b	LBB443_8
LBB443_8:                               ;   in Loop: Header=BB443_7 Depth=4
	movi	d0, #0000000000000000
	stur	s0, [x29, #-52]
	stur	wzr, [x29, #-56]
	b	LBB443_9
LBB443_9:                               ;   Parent Loop BB443_1 Depth=1
                                        ;     Parent Loop BB443_3 Depth=2
                                        ;       Parent Loop BB443_5 Depth=3
                                        ;         Parent Loop BB443_7 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldur	w8, [x29, #-56]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB443_12
	b	LBB443_10
LBB443_10:                              ;   in Loop: Header=BB443_9 Depth=5
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-56]
	ldur	w2, [x29, #-48]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldur	w1, [x29, #-56]
	ldur	w2, [x29, #-36]
	ldur	w3, [x29, #-40]
	ldur	w4, [x29, #-44]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldur	s2, [x29, #-52]
	fmadd	s0, s0, s1, s2
	stur	s0, [x29, #-52]
	b	LBB443_11
LBB443_11:                              ;   in Loop: Header=BB443_9 Depth=5
	ldur	w8, [x29, #-56]
	add	w8, w8, #1
	stur	w8, [x29, #-56]
	b	LBB443_9
LBB443_12:                              ;   in Loop: Header=BB443_7 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldur	w9, [x29, #-52]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-40]
	ldur	w3, [x29, #-44]
	ldur	w4, [x29, #-48]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB443_13
LBB443_13:                              ;   in Loop: Header=BB443_7 Depth=4
	ldur	w8, [x29, #-48]
	add	w8, w8, #1
	stur	w8, [x29, #-48]
	b	LBB443_7
LBB443_14:                              ;   in Loop: Header=BB443_5 Depth=3
	b	LBB443_15
LBB443_15:                              ;   in Loop: Header=BB443_5 Depth=3
	ldur	w8, [x29, #-44]
	add	w8, w8, #1
	stur	w8, [x29, #-44]
	b	LBB443_5
LBB443_16:                              ;   in Loop: Header=BB443_3 Depth=2
	b	LBB443_17
LBB443_17:                              ;   in Loop: Header=BB443_3 Depth=2
	ldur	w8, [x29, #-40]
	add	w8, w8, #1
	stur	w8, [x29, #-40]
	b	LBB443_3
LBB443_18:                              ;   in Loop: Header=BB443_1 Depth=1
	b	LBB443_19
LBB443_19:                              ;   in Loop: Header=BB443_1 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB443_1
LBB443_20:
	stur	wzr, [x29, #-60]
	b	LBB443_21
LBB443_21:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB443_23 Depth 2
	ldur	w8, [x29, #-60]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB443_28
	b	LBB443_22
LBB443_22:                              ;   in Loop: Header=BB443_21 Depth=1
	movi	d0, #0000000000000000
	str	s0, [sp, #64]
	str	wzr, [sp, #60]
	b	LBB443_23
LBB443_23:                              ;   Parent Loop BB443_21 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #60]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB443_26
	b	LBB443_24
LBB443_24:                              ;   in Loop: Header=BB443_23 Depth=2
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #60]
	ldur	w2, [x29, #-60]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	s1, [x0]
	ldr	s0, [sp, #64]
	fadd	s0, s0, s1
	str	s0, [sp, #64]
	b	LBB443_25
LBB443_25:                              ;   in Loop: Header=BB443_23 Depth=2
	ldr	w8, [sp, #60]
	add	w8, w8, #1
	str	w8, [sp, #60]
	b	LBB443_23
LBB443_26:                              ;   in Loop: Header=BB443_21 Depth=1
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #64]
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-60]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB443_27
LBB443_27:                              ;   in Loop: Header=BB443_21 Depth=1
	ldur	w8, [x29, #-60]
	add	w8, w8, #1
	stur	w8, [x29, #-60]
	b	LBB443_21
LBB443_28:
	str	wzr, [sp, #56]
	b	LBB443_29
LBB443_29:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB443_31 Depth 2
                                        ;       Child Loop BB443_33 Depth 3
                                        ;         Child Loop BB443_35 Depth 4
                                        ;           Child Loop BB443_37 Depth 5
	ldr	w8, [sp, #56]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB443_48
	b	LBB443_30
LBB443_30:                              ;   in Loop: Header=BB443_29 Depth=1
	str	wzr, [sp, #52]
	b	LBB443_31
LBB443_31:                              ;   Parent Loop BB443_29 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB443_33 Depth 3
                                        ;         Child Loop BB443_35 Depth 4
                                        ;           Child Loop BB443_37 Depth 5
	ldr	w8, [sp, #52]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB443_46
	b	LBB443_32
LBB443_32:                              ;   in Loop: Header=BB443_31 Depth=2
	str	wzr, [sp, #48]
	b	LBB443_33
LBB443_33:                              ;   Parent Loop BB443_29 Depth=1
                                        ;     Parent Loop BB443_31 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB443_35 Depth 4
                                        ;           Child Loop BB443_37 Depth 5
	ldr	w8, [sp, #48]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB443_44
	b	LBB443_34
LBB443_34:                              ;   in Loop: Header=BB443_33 Depth=3
	str	wzr, [sp, #44]
	b	LBB443_35
LBB443_35:                              ;   Parent Loop BB443_29 Depth=1
                                        ;     Parent Loop BB443_31 Depth=2
                                        ;       Parent Loop BB443_33 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB443_37 Depth 5
	ldr	w8, [sp, #44]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB443_42
	b	LBB443_36
LBB443_36:                              ;   in Loop: Header=BB443_35 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #40]
	str	wzr, [sp, #36]
	b	LBB443_37
LBB443_37:                              ;   Parent Loop BB443_29 Depth=1
                                        ;     Parent Loop BB443_31 Depth=2
                                        ;       Parent Loop BB443_33 Depth=3
                                        ;         Parent Loop BB443_35 Depth=4
                                        ; =>        This Inner Loop Header: Depth=5
	ldr	w8, [sp, #36]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB443_40
	b	LBB443_38
LBB443_38:                              ;   in Loop: Header=BB443_37 Depth=5
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #56]
	ldr	w2, [sp, #36]
	mov	w4, #0
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi128ELi1ELi1EEclEiiii
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #52]
	ldr	w2, [sp, #48]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #36]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #40]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #40]
	b	LBB443_39
LBB443_39:                              ;   in Loop: Header=BB443_37 Depth=5
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB443_37
LBB443_40:                              ;   in Loop: Header=BB443_35 Depth=4
	ldr	x8, [sp, #24]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #40]
	str	w9, [sp, #4]                    ; 4-byte Folded Spill
	mov	x9, #33948
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #56]
	ldr	w2, [sp, #52]
	ldr	w3, [sp, #48]
	ldr	w4, [sp, #44]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	w8, [sp, #4]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB443_41
LBB443_41:                              ;   in Loop: Header=BB443_35 Depth=4
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB443_35
LBB443_42:                              ;   in Loop: Header=BB443_33 Depth=3
	b	LBB443_43
LBB443_43:                              ;   in Loop: Header=BB443_33 Depth=3
	ldr	w8, [sp, #48]
	add	w8, w8, #1
	str	w8, [sp, #48]
	b	LBB443_33
LBB443_44:                              ;   in Loop: Header=BB443_31 Depth=2
	b	LBB443_45
LBB443_45:                              ;   in Loop: Header=BB443_31 Depth=2
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB443_31
LBB443_46:                              ;   in Loop: Header=BB443_29 Depth=1
	b	LBB443_47
LBB443_47:                              ;   in Loop: Header=BB443_29 Depth=1
	ldr	w8, [sp, #56]
	add	w8, w8, #1
	str	w8, [sp, #56]
	b	LBB443_29
LBB443_48:
	.cfi_def_cfa wsp, 144
	ldp	x29, x30, [sp, #128]            ; 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.weak_definition	__ZN7DropoutILi64ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE: ; @_ZN7DropoutILi64ELi64ELi12ELi12EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN7DropoutILi64ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.weak_definition	__ZN7DropoutILi64ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE: ; @_ZN7DropoutILi64ELi64ELi12ELi12EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.141@PAGE
	add	x0, x0, l_.str.141@PAGEOFF
	mov	w1, #254
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN7DropoutILi64ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE ; -- Begin function _ZN7DropoutILi64ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.weak_definition	__ZN7DropoutILi64ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.p2align	2
__ZN7DropoutILi64ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE: ; @_ZN7DropoutILi64ELi64ELi12ELi12EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #140
	movk	x9, #36, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EE6set_n0Ei
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	mov	x9, #152
	movk	x9, #72, lsl #16
	ldr	x1, [x8, x9]
	bl	__ZN9rnd_gen_t4seedEy
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #144
	movk	x9, #72, lsl #16
	ldr	s1, [x8, x9]
	fmov	s0, #1.00000000
	fsub	s0, s0, s1
	fcvt	d1, s0
	fmov	d0, #1.00000000
	fdiv	d0, d0, d1
	fcvt	s0, d0
	stur	s0, [x29, #-24]
	stur	wzr, [x29, #-28]
	b	LBB446_1
LBB446_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB446_3 Depth 2
                                        ;       Child Loop BB446_5 Depth 3
                                        ;         Child Loop BB446_7 Depth 4
	ldur	w8, [x29, #-28]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB446_19
	b	LBB446_2
LBB446_2:                               ;   in Loop: Header=BB446_1 Depth=1
	str	wzr, [sp, #32]
	b	LBB446_3
LBB446_3:                               ;   Parent Loop BB446_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB446_5 Depth 3
                                        ;         Child Loop BB446_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB446_17
	b	LBB446_4
LBB446_4:                               ;   in Loop: Header=BB446_3 Depth=2
	str	wzr, [sp, #28]
	b	LBB446_5
LBB446_5:                               ;   Parent Loop BB446_1 Depth=1
                                        ;     Parent Loop BB446_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB446_7 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB446_15
	b	LBB446_6
LBB446_6:                               ;   in Loop: Header=BB446_5 Depth=3
	str	wzr, [sp, #24]
	b	LBB446_7
LBB446_7:                               ;   Parent Loop BB446_1 Depth=1
                                        ;     Parent Loop BB446_3 Depth=2
                                        ;       Parent Loop BB446_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB446_13
	b	LBB446_8
LBB446_8:                               ;   in Loop: Header=BB446_7 Depth=4
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #128
	bl	__ZN9rnd_gen_t6rand01Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #144
	movk	x9, #72, lsl #16
	ldr	s1, [x8, x9]
	fcvt	d1, s1
	fcmp	d0, d1
	cset	w8, pl
	tbnz	w8, #0, LBB446_10
	b	LBB446_9
LBB446_9:                               ;   in Loop: Header=BB446_7 Depth=4
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #140
	movk	x9, #36, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	movi	d0, #0000000000000000
	str	s0, [x0]
	b	LBB446_11
LBB446_10:                              ;   in Loop: Header=BB446_7 Depth=4
	ldur	s0, [x29, #-24]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	s0, [sp, #8]                    ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #140
	movk	x9, #36, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB446_11
LBB446_11:                              ;   in Loop: Header=BB446_7 Depth=4
	b	LBB446_12
LBB446_12:                              ;   in Loop: Header=BB446_7 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB446_7
LBB446_13:                              ;   in Loop: Header=BB446_5 Depth=3
	b	LBB446_14
LBB446_14:                              ;   in Loop: Header=BB446_5 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB446_5
LBB446_15:                              ;   in Loop: Header=BB446_3 Depth=2
	b	LBB446_16
LBB446_16:                              ;   in Loop: Header=BB446_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB446_3
LBB446_17:                              ;   in Loop: Header=BB446_1 Depth=1
	b	LBB446_18
LBB446_18:                              ;   in Loop: Header=BB446_1 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB446_1
LBB446_19:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.weak_definition	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE17backward_cpu_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.weak_definition	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE18backward_cuda_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.140@PAGE
	add	x0, x0, l_.str.140@PAGEOFF
	mov	w1, #266
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE ; -- Begin function _ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.weak_definition	__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.p2align	2
__ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE: ; @_ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE13backward_baseER6tensorIfLi64ELi64ELi12ELi12EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #140
	movk	x9, #108, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EE6set_n0Ei
	stur	wzr, [x29, #-24]
	b	LBB449_1
LBB449_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB449_3 Depth 2
                                        ;       Child Loop BB449_5 Depth 3
                                        ;         Child Loop BB449_7 Depth 4
	ldur	w8, [x29, #-24]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB449_16
	b	LBB449_2
LBB449_2:                               ;   in Loop: Header=BB449_1 Depth=1
	stur	wzr, [x29, #-28]
	b	LBB449_3
LBB449_3:                               ;   Parent Loop BB449_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB449_5 Depth 3
                                        ;         Child Loop BB449_7 Depth 4
	ldur	w8, [x29, #-28]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB449_14
	b	LBB449_4
LBB449_4:                               ;   in Loop: Header=BB449_3 Depth=2
	stur	wzr, [x29, #-32]
	b	LBB449_5
LBB449_5:                               ;   Parent Loop BB449_1 Depth=1
                                        ;     Parent Loop BB449_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB449_7 Depth 4
	ldur	w8, [x29, #-32]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB449_12
	b	LBB449_6
LBB449_6:                               ;   in Loop: Header=BB449_5 Depth=3
	stur	wzr, [x29, #-36]
	b	LBB449_7
LBB449_7:                               ;   Parent Loop BB449_1 Depth=1
                                        ;     Parent Loop BB449_3 Depth=2
                                        ;       Parent Loop BB449_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldur	w8, [x29, #-36]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB449_10
	b	LBB449_8
LBB449_8:                               ;   in Loop: Header=BB449_7 Depth=4
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #140
	movk	x9, #108, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-24]
	ldur	w2, [x29, #-28]
	ldur	w3, [x29, #-32]
	ldur	w4, [x29, #-36]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	movi	d0, #0000000000000000
	str	s0, [x0]
	b	LBB449_9
LBB449_9:                               ;   in Loop: Header=BB449_7 Depth=4
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB449_7
LBB449_10:                              ;   in Loop: Header=BB449_5 Depth=3
	b	LBB449_11
LBB449_11:                              ;   in Loop: Header=BB449_5 Depth=3
	ldur	w8, [x29, #-32]
	add	w8, w8, #1
	stur	w8, [x29, #-32]
	b	LBB449_5
LBB449_12:                              ;   in Loop: Header=BB449_3 Depth=2
	b	LBB449_13
LBB449_13:                              ;   in Loop: Header=BB449_3 Depth=2
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB449_3
LBB449_14:                              ;   in Loop: Header=BB449_1 Depth=1
	b	LBB449_15
LBB449_15:                              ;   in Loop: Header=BB449_1 Depth=1
	ldur	w8, [x29, #-24]
	add	w8, w8, #1
	stur	w8, [x29, #-24]
	b	LBB449_1
LBB449_16:
	str	wzr, [sp, #40]
	b	LBB449_17
LBB449_17:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB449_19 Depth 2
                                        ;       Child Loop BB449_21 Depth 3
                                        ;         Child Loop BB449_23 Depth 4
	ldr	w8, [sp, #40]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB449_32
	b	LBB449_18
LBB449_18:                              ;   in Loop: Header=BB449_17 Depth=1
	str	wzr, [sp, #36]
	b	LBB449_19
LBB449_19:                              ;   Parent Loop BB449_17 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB449_21 Depth 3
                                        ;         Child Loop BB449_23 Depth 4
	ldr	w8, [sp, #36]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB449_30
	b	LBB449_20
LBB449_20:                              ;   in Loop: Header=BB449_19 Depth=2
	str	wzr, [sp, #32]
	b	LBB449_21
LBB449_21:                              ;   Parent Loop BB449_17 Depth=1
                                        ;     Parent Loop BB449_19 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB449_23 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB449_28
	b	LBB449_22
LBB449_22:                              ;   in Loop: Header=BB449_21 Depth=3
	str	wzr, [sp, #28]
	b	LBB449_23
LBB449_23:                              ;   Parent Loop BB449_17 Depth=1
                                        ;     Parent Loop BB449_19 Depth=2
                                        ;       Parent Loop BB449_21 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB449_26
	b	LBB449_24
LBB449_24:                              ;   in Loop: Header=BB449_23 Depth=4
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	mov	x9, #132
	movk	x9, #36, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #40]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #32]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIiLi64ELi64ELi12ELi12EEclEiiii
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w9, [x0]
	str	w9, [sp, #24]
	mov	x9, #136
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #40]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #32]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIiLi64ELi64ELi12ELi12EEclEiiii
	ldr	w8, [x0]
	str	w8, [sp, #20]
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #40]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #32]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi64ELi12ELi12EEclEiiii
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w9, [x0]
	str	w9, [sp, #4]                    ; 4-byte Folded Spill
	mov	x9, #140
	movk	x9, #108, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #40]
	ldr	w2, [sp, #36]
	ldr	w3, [sp, #24]
	ldr	w4, [sp, #20]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	w8, [sp, #4]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB449_25
LBB449_25:                              ;   in Loop: Header=BB449_23 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB449_23
LBB449_26:                              ;   in Loop: Header=BB449_21 Depth=3
	b	LBB449_27
LBB449_27:                              ;   in Loop: Header=BB449_21 Depth=3
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB449_21
LBB449_28:                              ;   in Loop: Header=BB449_19 Depth=2
	b	LBB449_29
LBB449_29:                              ;   in Loop: Header=BB449_19 Depth=2
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB449_19
LBB449_30:                              ;   in Loop: Header=BB449_17 Depth=1
	b	LBB449_31
LBB449_31:                              ;   in Loop: Header=BB449_17 Depth=1
	ldr	w8, [sp, #40]
	add	w8, w8, #1
	str	w8, [sp, #40]
	b	LBB449_17
LBB449_32:
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.weak_definition	__ZN4ReluILi64ELi64ELi24ELi24EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE: ; @_ZN4ReluILi64ELi64ELi24ELi24EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN4ReluILi64ELi64ELi24ELi24EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.weak_definition	__ZN4ReluILi64ELi64ELi24ELi24EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE: ; @_ZN4ReluILi64ELi64ELi24ELi24EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.139@PAGE
	add	x0, x0, l_.str.139@PAGEOFF
	mov	w1, #236
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi64ELi24ELi24EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE ; -- Begin function _ZN4ReluILi64ELi64ELi24ELi24EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.weak_definition	__ZN4ReluILi64ELi64ELi24ELi24EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.p2align	2
__ZN4ReluILi64ELi64ELi24ELi24EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE: ; @_ZN4ReluILi64ELi64ELi24ELi24EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #140
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EE6set_n0Ei
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [x8, #128]
	str	x8, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB452_1
LBB452_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB452_3 Depth 2
                                        ;       Child Loop BB452_5 Depth 3
                                        ;         Child Loop BB452_7 Depth 4
	ldr	w8, [sp, #28]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB452_19
	b	LBB452_2
LBB452_2:                               ;   in Loop: Header=BB452_1 Depth=1
	str	wzr, [sp, #24]
	b	LBB452_3
LBB452_3:                               ;   Parent Loop BB452_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB452_5 Depth 3
                                        ;         Child Loop BB452_7 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB452_17
	b	LBB452_4
LBB452_4:                               ;   in Loop: Header=BB452_3 Depth=2
	str	wzr, [sp, #20]
	b	LBB452_5
LBB452_5:                               ;   Parent Loop BB452_1 Depth=1
                                        ;     Parent Loop BB452_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB452_7 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB452_15
	b	LBB452_6
LBB452_6:                               ;   in Loop: Header=BB452_5 Depth=3
	str	wzr, [sp, #16]
	b	LBB452_7
LBB452_7:                               ;   Parent Loop BB452_1 Depth=1
                                        ;     Parent Loop BB452_3 Depth=2
                                        ;       Parent Loop BB452_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB452_13
	b	LBB452_8
LBB452_8:                               ;   in Loop: Header=BB452_7 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	fcmp	s0, #0.0
	cset	w8, lt
	tbnz	w8, #0, LBB452_10
	b	LBB452_9
LBB452_9:                               ;   in Loop: Header=BB452_7 Depth=4
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB452_11
LBB452_10:                              ;   in Loop: Header=BB452_7 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB452_11
LBB452_11:                              ;   in Loop: Header=BB452_7 Depth=4
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [sp]                        ; 4-byte Folded Spill
	mov	x9, #140
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [sp]                        ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB452_12
LBB452_12:                              ;   in Loop: Header=BB452_7 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB452_7
LBB452_13:                              ;   in Loop: Header=BB452_5 Depth=3
	b	LBB452_14
LBB452_14:                              ;   in Loop: Header=BB452_5 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB452_5
LBB452_15:                              ;   in Loop: Header=BB452_3 Depth=2
	b	LBB452_16
LBB452_16:                              ;   in Loop: Header=BB452_3 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB452_3
LBB452_17:                              ;   in Loop: Header=BB452_1 Depth=1
	b	LBB452_18
LBB452_18:                              ;   in Loop: Header=BB452_1 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB452_1
LBB452_19:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16backward_cpu_ompER6tensorIfLi64ELi64ELi24ELi24EE ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16backward_cpu_ompER6tensorIfLi64ELi64ELi24ELi24EE
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16backward_cpu_ompER6tensorIfLi64ELi64ELi24ELi24EE
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16backward_cpu_ompER6tensorIfLi64ELi64ELi24ELi24EE: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16backward_cpu_ompER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #96]             ; 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	sub	x10, x29, #20
	str	x10, [sp, #40]                  ; 8-byte Folded Spill
	stur	w9, [x29, #-20]
	mov	x9, #8596
	movk	x9, #145, lsl #16
	add	x0, x8, x9
	mov	w1, #64
	str	w1, [sp, #36]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei
	ldr	w1, [sp, #36]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	mov	x9, #16792
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	mov	x9, #17052
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei
	ldr	x12, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldr	x9, [x8, #128]
	stur	x9, [x29, #-32]
	ldur	x11, [x29, #-16]
	ldur	x10, [x29, #-32]
	mov	x9, sp
	str	x12, [x9]
	str	x11, [x9, #8]
	str	x10, [x9, #16]
	str	x8, [x9, #24]
	adrp	x0, l___unnamed_40@PAGE
	add	x0, x0, l___unnamed_40@PAGEOFF
	mov	w1, #4
	adrp	x2, _.omp_outlined..153@PAGE
	add	x2, x2, _.omp_outlined..153@PAGEOFF
	bl	___kmpc_fork_call
	ldr	x11, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldur	x10, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_41@PAGE
	add	x0, x0, l___unnamed_41@PAGEOFF
	mov	w1, #3
	stur	w1, [x29, #-36]                 ; 4-byte Folded Spill
	adrp	x2, _.omp_outlined..154@PAGE
	add	x2, x2, _.omp_outlined..154@PAGEOFF
	bl	___kmpc_fork_call
	ldr	x11, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	ldur	w1, [x29, #-36]                 ; 4-byte Folded Reload
	ldur	x10, [x29, #-16]
	mov	x9, sp
	str	x11, [x9]
	str	x10, [x9, #8]
	str	x8, [x9, #16]
	adrp	x0, l___unnamed_42@PAGE
	add	x0, x0, l___unnamed_42@PAGEOFF
	adrp	x2, _.omp_outlined..155@PAGE
	add	x2, x2, _.omp_outlined..155@PAGEOFF
	bl	___kmpc_fork_call
	.cfi_def_cfa wsp, 112
	ldp	x29, x30, [sp, #96]             ; 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE17backward_cpu_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE18backward_cuda_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.125@PAGE
	add	x0, x0, l_.str.125@PAGEOFF
	mov	w1, #517
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..153
_.omp_outlined..153:                    ; @.omp_outlined..153
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #272
	.cfi_def_cfa_offset 272
	stp	x28, x27, [sp, #240]            ; 16-byte Folded Spill
	stp	x29, x30, [sp, #256]            ; 16-byte Folded Spill
	add	x29, sp, #256
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	stur	x0, [x29, #-24]
	stur	x1, [x29, #-32]
	stur	x2, [x29, #-40]
	stur	x3, [x29, #-48]
	stur	x4, [x29, #-56]
	stur	x5, [x29, #-64]
	ldur	x8, [x29, #-40]
	str	x8, [sp, #80]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-48]
	ldur	x8, [x29, #-56]
	ldur	x10, [x29, #-64]
	str	x10, [sp, #88]                  ; 8-byte Folded Spill
	stur	x9, [x29, #-72]
	stur	x8, [x29, #-80]
	sub	x4, x29, #104
	stur	wzr, [x29, #-104]
	sub	x5, x29, #108
	mov	w8, #18431
	str	w8, [sp, #104]                  ; 4-byte Folded Spill
	stur	w8, [x29, #-108]
	sub	x6, x29, #112
	mov	w7, #1
	stur	w7, [x29, #-112]
	sub	x3, x29, #116
	stur	wzr, [x29, #-116]
	ldur	x8, [x29, #-24]
	ldr	w1, [x8]
	str	w1, [sp, #100]                  ; 4-byte Folded Spill
	mov	x8, sp
	str	w7, [x8]
	adrp	x0, l___unnamed_43@PAGE
	add	x0, x0, l___unnamed_43@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_4
	ldr	w9, [sp, #104]                  ; 4-byte Folded Reload
	ldur	w8, [x29, #-108]
	subs	w8, w8, w9
	cset	w8, le
	tbnz	w8, #0, LBB456_2
	b	LBB456_1
LBB456_1:
	mov	w8, #18431
	str	w8, [sp, #76]                   ; 4-byte Folded Spill
	b	LBB456_3
LBB456_2:
	ldur	w8, [x29, #-108]
	str	w8, [sp, #76]                   ; 4-byte Folded Spill
	b	LBB456_3
LBB456_3:
	ldr	w8, [sp, #76]                   ; 4-byte Folded Reload
	stur	w8, [x29, #-108]
	ldur	w8, [x29, #-104]
	stur	w8, [x29, #-84]
	b	LBB456_4
LBB456_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB456_6 Depth 2
                                        ;       Child Loop BB456_8 Depth 3
                                        ;         Child Loop BB456_10 Depth 4
	ldur	w8, [x29, #-84]
	ldur	w9, [x29, #-108]
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB456_20
	b	LBB456_5
LBB456_5:                               ;   in Loop: Header=BB456_4 Depth=1
	ldur	w8, [x29, #-84]
	mov	w14, #288
	str	w14, [sp, #72]                  ; 4-byte Folded Spill
	sdiv	w8, w8, w14
	lsr	w8, w8, #0
	add	w8, w8, #0
	stur	w8, [x29, #-120]
	ldur	w8, [x29, #-84]
	ldur	w9, [x29, #-84]
	sdiv	w9, w9, w14
	mul	w9, w9, w14
	subs	w8, w8, w9
	mov	w12, #9
	sdiv	w8, w8, w12
	lsr	w8, w8, #0
	add	w8, w8, #0
	stur	w8, [x29, #-124]
	ldur	w8, [x29, #-84]
	ldur	w9, [x29, #-84]
	sdiv	w9, w9, w14
	mul	w9, w9, w14
	subs	w8, w8, w9
	ldur	w9, [x29, #-84]
	ldur	w10, [x29, #-84]
	sdiv	w10, w10, w14
	mul	w10, w10, w14
	subs	w9, w9, w10
	sdiv	w9, w9, w12
	mul	w9, w9, w12
	subs	w8, w8, w9
	mov	w10, #3
	sdiv	w8, w8, w10
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #128]
	ldur	w8, [x29, #-84]
	ldur	w9, [x29, #-84]
	sdiv	w9, w9, w14
	mul	w9, w9, w14
	subs	w8, w8, w9
	ldur	w9, [x29, #-84]
	ldur	w11, [x29, #-84]
	sdiv	w11, w11, w14
	mul	w11, w11, w14
	subs	w9, w9, w11
	sdiv	w9, w9, w12
	mul	w9, w9, w12
	subs	w8, w8, w9
	ldur	w9, [x29, #-84]
	ldur	w11, [x29, #-84]
	sdiv	w11, w11, w14
	mul	w11, w11, w14
	subs	w9, w9, w11
	ldur	w11, [x29, #-84]
	ldur	w13, [x29, #-84]
	sdiv	w13, w13, w14
	mul	w13, w13, w14
	subs	w11, w11, w13
	sdiv	w11, w11, w12
	mul	w11, w11, w12
	subs	w9, w9, w11
	sdiv	w9, w9, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #124]
	movi	d0, #0000000000000000
	str	s0, [sp, #120]
	str	wzr, [sp, #116]
	b	LBB456_6
LBB456_6:                               ;   Parent Loop BB456_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB456_8 Depth 3
                                        ;         Child Loop BB456_10 Depth 4
	ldr	x9, [sp, #80]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #116]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB456_17
	b	LBB456_7
LBB456_7:                               ;   in Loop: Header=BB456_6 Depth=2
	str	wzr, [sp, #112]
	b	LBB456_8
LBB456_8:                               ;   Parent Loop BB456_4 Depth=1
                                        ;     Parent Loop BB456_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB456_10 Depth 4
	ldr	w8, [sp, #112]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB456_15
	b	LBB456_9
LBB456_9:                               ;   in Loop: Header=BB456_8 Depth=3
	str	wzr, [sp, #108]
	b	LBB456_10
LBB456_10:                              ;   Parent Loop BB456_4 Depth=1
                                        ;     Parent Loop BB456_6 Depth=2
                                        ;       Parent Loop BB456_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #108]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB456_13
	b	LBB456_11
LBB456_11:                              ;   in Loop: Header=BB456_10 Depth=4
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w3, [sp, #112]
	ldr	w4, [sp, #108]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #16]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w3, [sp, #112]
	ldr	w8, [sp, #108]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #1
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #16]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s3, [x0]
	fmul	s2, s2, s3
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #24]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w3, [sp, #112]
	ldr	w8, [sp, #108]
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #28]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #2
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #28]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #32]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w3, [sp, #112]
	ldr	w8, [sp, #108]
	add	w4, w8, #3
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #3
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #32]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #36]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #40]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w8, [sp, #112]
	add	w3, w8, #1
	ldr	w4, [sp, #108]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #44]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	add	w8, w8, #1
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #40]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #44]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #48]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w8, [sp, #112]
	add	w3, w8, #1
	ldr	w8, [sp, #108]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #52]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	add	w8, w8, #1
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #1
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #48]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #52]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #56]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w8, [sp, #112]
	add	w3, w8, #1
	ldr	w8, [sp, #108]
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #60]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	add	w8, w8, #1
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #2
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #56]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #60]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #64]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-72]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-120]
	ldr	w8, [sp, #112]
	add	w3, w8, #1
	ldr	w8, [sp, #108]
	add	w4, w8, #3
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #68]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-80]
	ldr	w1, [sp, #116]
	ldur	w2, [x29, #-124]
	ldr	w8, [sp, #112]
	add	w8, w8, #1
	ldr	w9, [sp, #128]
	add	w3, w8, w9
	ldr	w8, [sp, #108]
	add	w8, w8, #3
	ldr	w9, [sp, #124]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s2, [sp, #64]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #68]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s1, s0, s1, s2
	ldr	s0, [sp, #120]
	fadd	s0, s0, s1
	str	s0, [sp, #120]
	b	LBB456_12
LBB456_12:                              ;   in Loop: Header=BB456_10 Depth=4
	ldr	w8, [sp, #108]
	add	w8, w8, #4
	str	w8, [sp, #108]
	b	LBB456_10
LBB456_13:                              ;   in Loop: Header=BB456_8 Depth=3
	b	LBB456_14
LBB456_14:                              ;   in Loop: Header=BB456_8 Depth=3
	ldr	w8, [sp, #112]
	add	w8, w8, #2
	str	w8, [sp, #112]
	b	LBB456_8
LBB456_15:                              ;   in Loop: Header=BB456_6 Depth=2
	b	LBB456_16
LBB456_16:                              ;   in Loop: Header=BB456_6 Depth=2
	ldr	w8, [sp, #116]
	add	w8, w8, #1
	str	w8, [sp, #116]
	b	LBB456_6
LBB456_17:                              ;   in Loop: Header=BB456_4 Depth=1
	ldr	x8, [sp, #88]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #120]
	str	w9, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #8596
	movk	x9, #145, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-120]
	ldur	w2, [x29, #-124]
	ldr	w3, [sp, #128]
	ldr	w4, [sp, #124]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	w8, [sp, #8]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB456_18
LBB456_18:                              ;   in Loop: Header=BB456_4 Depth=1
	b	LBB456_19
LBB456_19:                              ;   in Loop: Header=BB456_4 Depth=1
	ldur	w8, [x29, #-84]
	add	w8, w8, #1
	stur	w8, [x29, #-84]
	b	LBB456_4
LBB456_20:
	b	LBB456_21
LBB456_21:
	ldr	w1, [sp, #100]                  ; 4-byte Folded Reload
	adrp	x0, l___unnamed_44@PAGE
	add	x0, x0, l___unnamed_44@PAGEOFF
	bl	___kmpc_for_static_fini
	.cfi_def_cfa wsp, 272
	ldp	x29, x30, [sp, #256]            ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #240]            ; 16-byte Folded Reload
	add	sp, sp, #272
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..154
_.omp_outlined..154:                    ; @.omp_outlined..154
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	x29, x30, [sp, #144]            ; 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	stur	x4, [x29, #-40]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-32]
	ldur	x9, [x29, #-40]
	str	x9, [sp, #40]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-48]
	sub	x4, x29, #60
	stur	wzr, [x29, #-60]
	sub	x5, x29, #64
	mov	w8, #63
	stur	w8, [x29, #-64]
	sub	x6, x29, #68
	mov	w7, #1
	stur	w7, [x29, #-68]
	add	x3, sp, #72
	str	wzr, [sp, #72]
	ldur	x8, [x29, #-8]
	ldr	w1, [x8]
	str	w1, [sp, #48]                   ; 4-byte Folded Spill
	mov	x8, sp
	str	w7, [x8]
	adrp	x0, l___unnamed_45@PAGE
	add	x0, x0, l___unnamed_45@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_4
	ldur	w8, [x29, #-64]
	subs	w8, w8, #63
	cset	w8, le
	tbnz	w8, #0, LBB457_2
	b	LBB457_1
LBB457_1:
	mov	w8, #63
	str	w8, [sp, #28]                   ; 4-byte Folded Spill
	b	LBB457_3
LBB457_2:
	ldur	w8, [x29, #-64]
	str	w8, [sp, #28]                   ; 4-byte Folded Spill
	b	LBB457_3
LBB457_3:
	ldr	w8, [sp, #28]                   ; 4-byte Folded Reload
	stur	w8, [x29, #-64]
	ldur	w8, [x29, #-60]
	stur	w8, [x29, #-52]
	b	LBB457_4
LBB457_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB457_6 Depth 2
                                        ;       Child Loop BB457_8 Depth 3
                                        ;         Child Loop BB457_10 Depth 4
	ldur	w8, [x29, #-52]
	ldur	w9, [x29, #-64]
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB457_20
	b	LBB457_5
LBB457_5:                               ;   in Loop: Header=BB457_4 Depth=1
	ldur	w8, [x29, #-52]
	lsr	w8, w8, #0
	add	w8, w8, #0
	str	w8, [sp, #68]
	movi	d0, #0000000000000000
	str	s0, [sp, #64]
	str	wzr, [sp, #60]
	b	LBB457_6
LBB457_6:                               ;   Parent Loop BB457_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB457_8 Depth 3
                                        ;         Child Loop BB457_10 Depth 4
	ldr	x9, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #60]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB457_17
	b	LBB457_7
LBB457_7:                               ;   in Loop: Header=BB457_6 Depth=2
	str	wzr, [sp, #56]
	b	LBB457_8
LBB457_8:                               ;   Parent Loop BB457_4 Depth=1
                                        ;     Parent Loop BB457_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB457_10 Depth 4
	ldr	w8, [sp, #56]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB457_15
	b	LBB457_9
LBB457_9:                               ;   in Loop: Header=BB457_8 Depth=3
	str	wzr, [sp, #52]
	b	LBB457_10
LBB457_10:                              ;   Parent Loop BB457_4 Depth=1
                                        ;     Parent Loop BB457_6 Depth=2
                                        ;       Parent Loop BB457_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #52]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB457_13
	b	LBB457_11
LBB457_11:                              ;   in Loop: Header=BB457_10 Depth=4
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #60]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #56]
	ldr	w4, [sp, #52]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #16]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #60]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #56]
	ldr	w8, [sp, #52]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [sp, #16]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #60]
	ldr	w2, [sp, #68]
	ldr	w8, [sp, #56]
	add	w3, w8, #1
	ldr	w4, [sp, #52]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s0, s0, s1
	str	s0, [sp, #24]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-48]
	ldr	w1, [sp, #60]
	ldr	w2, [sp, #68]
	ldr	w8, [sp, #56]
	add	w3, w8, #1
	ldr	w8, [sp, #52]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fadd	s1, s0, s1
	ldr	s0, [sp, #64]
	fadd	s0, s0, s1
	str	s0, [sp, #64]
	b	LBB457_12
LBB457_12:                              ;   in Loop: Header=BB457_10 Depth=4
	ldr	w8, [sp, #52]
	add	w8, w8, #2
	str	w8, [sp, #52]
	b	LBB457_10
LBB457_13:                              ;   in Loop: Header=BB457_8 Depth=3
	b	LBB457_14
LBB457_14:                              ;   in Loop: Header=BB457_8 Depth=3
	ldr	w8, [sp, #56]
	add	w8, w8, #2
	str	w8, [sp, #56]
	b	LBB457_8
LBB457_15:                              ;   in Loop: Header=BB457_6 Depth=2
	b	LBB457_16
LBB457_16:                              ;   in Loop: Header=BB457_6 Depth=2
	ldr	w8, [sp, #60]
	add	w8, w8, #1
	str	w8, [sp, #60]
	b	LBB457_6
LBB457_17:                              ;   in Loop: Header=BB457_4 Depth=1
	ldr	x8, [sp, #40]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #64]
	str	w9, [sp, #12]                   ; 4-byte Folded Spill
	mov	x9, #16792
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #68]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #12]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB457_18
LBB457_18:                              ;   in Loop: Header=BB457_4 Depth=1
	b	LBB457_19
LBB457_19:                              ;   in Loop: Header=BB457_4 Depth=1
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB457_4
LBB457_20:
	b	LBB457_21
LBB457_21:
	ldr	w1, [sp, #48]                   ; 4-byte Folded Reload
	adrp	x0, l___unnamed_46@PAGE
	add	x0, x0, l___unnamed_46@PAGEOFF
	bl	___kmpc_for_static_fini
	.cfi_def_cfa wsp, 160
	ldp	x29, x30, [sp, #144]            ; 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.p2align	2                               ; -- Begin function .omp_outlined..155
_.omp_outlined..155:                    ; @.omp_outlined..155
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #272
	.cfi_def_cfa_offset 272
	stp	x28, x27, [sp, #240]            ; 16-byte Folded Spill
	stp	x29, x30, [sp, #256]            ; 16-byte Folded Spill
	add	x29, sp, #256
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	sub	x9, x29, #48
	str	x9, [sp, #56]                   ; 8-byte Folded Spill
	str	x0, [x9, #24]
	str	x1, [x9, #16]
	str	x2, [x9, #8]
	str	x3, [x9]
	stur	x4, [x29, #-56]
	ldr	x8, [x9, #8]
	ldr	x9, [x9]
	ldur	x10, [x29, #-56]
	str	x10, [sp, #64]                  ; 8-byte Folded Spill
	stur	x9, [x29, #-64]
	ldr	w8, [x8]
	stur	w8, [x29, #-92]
	ldur	w9, [x29, #-92]
	mov	w8, #0
	subs	w9, w9, #0
	mov	w10, #1
	sdiv	w10, w9, w10
                                        ; implicit-def: $x9
	mov	x9, x10
	sxtw	x9, w9
	lsl	x9, x9, #5
	mov	x10, #26
	mul	x9, x9, x10
	mul	x9, x9, x10
	subs	x9, x9, #1
	stur	x9, [x29, #-104]
	stur	wzr, [x29, #-108]
	stur	wzr, [x29, #-112]
	stur	wzr, [x29, #-116]
	stur	wzr, [x29, #-120]
	ldur	w9, [x29, #-92]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB458_28
	b	LBB458_1
LBB458_1:
	ldr	x8, [sp, #56]                   ; 8-byte Folded Reload
	add	x4, sp, #128
	str	xzr, [sp, #128]
	ldur	x9, [x29, #-104]
	add	x5, sp, #120
	str	x9, [sp, #120]
	add	x6, sp, #112
	mov	x7, #1
	str	x7, [sp, #112]
	add	x3, sp, #108
	str	wzr, [sp, #108]
	ldr	x8, [x8, #24]
	ldr	w1, [x8]
	mov	x8, sp
	str	x7, [x8]
	adrp	x0, l___unnamed_47@PAGE
	add	x0, x0, l___unnamed_47@PAGEOFF
	mov	w2, #34
	bl	___kmpc_for_static_init_8
	ldr	x8, [sp, #120]
	ldur	x9, [x29, #-104]
	subs	x8, x8, x9
	cset	w8, le
	tbnz	w8, #0, LBB458_3
	b	LBB458_2
LBB458_2:
	ldur	x8, [x29, #-104]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	b	LBB458_4
LBB458_3:
	ldr	x8, [sp, #120]
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	b	LBB458_4
LBB458_4:
	ldr	x8, [sp, #48]                   ; 8-byte Folded Reload
	str	x8, [sp, #120]
	ldr	x8, [sp, #128]
	stur	x8, [x29, #-72]
	b	LBB458_5
LBB458_5:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB458_7 Depth 2
                                        ;       Child Loop BB458_9 Depth 3
                                        ;         Child Loop BB458_11 Depth 4
	ldur	x8, [x29, #-72]
	ldr	x9, [sp, #120]
	subs	x8, x8, x9
	cset	w8, gt
	tbnz	w8, #0, LBB458_26
	b	LBB458_6
LBB458_6:                               ;   in Loop: Header=BB458_5 Depth=1
	ldur	x8, [x29, #-72]
	mov	x14, #21632
	str	x14, [sp, #40]                  ; 8-byte Folded Spill
	sdiv	x8, x8, x14
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #104]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	mov	x12, #676
	sdiv	x8, x8, x12
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #100]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x10, [x29, #-72]
	sdiv	x10, x10, x14
	mul	x10, x10, x14
	subs	x9, x9, x10
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	mov	x10, #26
	sdiv	x8, x8, x10
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #96]
	ldur	x8, [x29, #-72]
	ldur	x9, [x29, #-72]
	sdiv	x9, x9, x14
	mul	x9, x9, x14
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x11, [x29, #-72]
	sdiv	x11, x11, x14
	mul	x11, x11, x14
	subs	x9, x9, x11
	sdiv	x9, x9, x12
	mul	x9, x9, x12
	subs	x8, x8, x9
	ldur	x9, [x29, #-72]
	ldur	x11, [x29, #-72]
	sdiv	x11, x11, x14
	mul	x11, x11, x14
	subs	x9, x9, x11
	ldur	x11, [x29, #-72]
	ldur	x13, [x29, #-72]
	sdiv	x13, x13, x14
	mul	x13, x13, x14
	subs	x11, x11, x13
	sdiv	x11, x11, x12
	mul	x11, x11, x12
	subs	x9, x9, x11
	sdiv	x9, x9, x10
	mul	x9, x9, x10
	subs	x8, x8, x9
	lsr	x8, x8, #0
	add	x8, x8, #0
                                        ; kill: def $w8 killed $w8 killed $x8
	str	w8, [sp, #92]
	movi	d0, #0000000000000000
	str	s0, [sp, #88]
	str	wzr, [sp, #84]
	b	LBB458_7
LBB458_7:                               ;   Parent Loop BB458_5 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB458_9 Depth 3
                                        ;         Child Loop BB458_11 Depth 4
	ldr	w8, [sp, #84]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB458_23
	b	LBB458_8
LBB458_8:                               ;   in Loop: Header=BB458_7 Depth=2
	str	wzr, [sp, #80]
	b	LBB458_9
LBB458_9:                               ;   Parent Loop BB458_5 Depth=1
                                        ;     Parent Loop BB458_7 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB458_11 Depth 4
	ldr	w8, [sp, #80]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB458_21
	b	LBB458_10
LBB458_10:                              ;   in Loop: Header=BB458_9 Depth=3
	str	wzr, [sp, #76]
	b	LBB458_11
LBB458_11:                              ;   Parent Loop BB458_5 Depth=1
                                        ;     Parent Loop BB458_7 Depth=2
                                        ;       Parent Loop BB458_9 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #76]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB458_19
	b	LBB458_12
LBB458_12:                              ;   in Loop: Header=BB458_11 Depth=4
	ldr	w8, [sp, #96]
	ldr	w9, [sp, #80]
	subs	w9, w8, w9
	mov	w8, #0
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB458_17
	b	LBB458_13
LBB458_13:                              ;   in Loop: Header=BB458_11 Depth=4
	ldr	w8, [sp, #96]
	ldr	w9, [sp, #80]
	subs	w8, w8, w9
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB458_17
	b	LBB458_14
LBB458_14:                              ;   in Loop: Header=BB458_11 Depth=4
	ldr	w8, [sp, #92]
	ldr	w9, [sp, #76]
	subs	w9, w8, w9
	mov	w8, #0
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB458_17
	b	LBB458_15
LBB458_15:                              ;   in Loop: Header=BB458_11 Depth=4
	ldr	w8, [sp, #92]
	ldr	w9, [sp, #76]
	subs	w8, w8, w9
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB458_17
	b	LBB458_16
LBB458_16:                              ;   in Loop: Header=BB458_11 Depth=4
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #104]
	ldr	w2, [sp, #84]
	ldr	w8, [sp, #96]
	ldr	w9, [sp, #80]
	subs	w3, w8, w9
	ldr	w8, [sp, #92]
	ldr	w9, [sp, #76]
	subs	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	x8, [sp, #64]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #28]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #84]
	ldr	w2, [sp, #100]
	ldr	w3, [sp, #80]
	ldr	w4, [sp, #76]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #24]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #104]
	ldr	w2, [sp, #84]
	ldr	w8, [sp, #96]
	ldr	w9, [sp, #80]
	subs	w3, w8, w9
	ldr	w8, [sp, #92]
	ldr	w9, [sp, #76]
	subs	w8, w8, w9
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	x8, [sp, #64]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #20]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #84]
	ldr	w2, [sp, #100]
	ldr	w3, [sp, #80]
	ldr	w8, [sp, #76]
	add	w4, w8, #1
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s2, [sp, #20]                   ; 4-byte Folded Reload
	ldr	s1, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #28]                   ; 4-byte Folded Reload
	ldr	s3, [x0]
	fmul	s2, s2, s3
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #32]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-64]
	ldr	w1, [sp, #104]
	ldr	w2, [sp, #84]
	ldr	w8, [sp, #96]
	ldr	w9, [sp, #80]
	subs	w3, w8, w9
	ldr	w8, [sp, #92]
	ldr	w9, [sp, #76]
	subs	w8, w8, w9
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	x8, [sp, #64]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #84]
	ldr	w2, [sp, #100]
	ldr	w3, [sp, #80]
	ldr	w8, [sp, #76]
	add	w4, w8, #2
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s2, [sp, #32]                   ; 4-byte Folded Reload
	ldr	s0, [sp, #36]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmadd	s1, s0, s1, s2
	ldr	s0, [sp, #88]
	fadd	s0, s0, s1
	str	s0, [sp, #88]
	b	LBB458_17
LBB458_17:                              ;   in Loop: Header=BB458_11 Depth=4
	b	LBB458_18
LBB458_18:                              ;   in Loop: Header=BB458_11 Depth=4
	ldr	w8, [sp, #76]
	add	w8, w8, #3
	str	w8, [sp, #76]
	b	LBB458_11
LBB458_19:                              ;   in Loop: Header=BB458_9 Depth=3
	b	LBB458_20
LBB458_20:                              ;   in Loop: Header=BB458_9 Depth=3
	ldr	w8, [sp, #80]
	add	w8, w8, #1
	str	w8, [sp, #80]
	b	LBB458_9
LBB458_21:                              ;   in Loop: Header=BB458_7 Depth=2
	b	LBB458_22
LBB458_22:                              ;   in Loop: Header=BB458_7 Depth=2
	ldr	w8, [sp, #84]
	add	w8, w8, #1
	str	w8, [sp, #84]
	b	LBB458_7
LBB458_23:                              ;   in Loop: Header=BB458_5 Depth=1
	ldr	x8, [sp, #64]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #88]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #17052
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #104]
	ldr	w2, [sp, #100]
	ldr	w3, [sp, #96]
	ldr	w4, [sp, #92]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB458_24
LBB458_24:                              ;   in Loop: Header=BB458_5 Depth=1
	b	LBB458_25
LBB458_25:                              ;   in Loop: Header=BB458_5 Depth=1
	ldur	x8, [x29, #-72]
	add	x8, x8, #1
	stur	x8, [x29, #-72]
	b	LBB458_5
LBB458_26:
	b	LBB458_27
LBB458_27:
	ldr	x8, [sp, #56]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #24]
	ldr	w1, [x8]
	adrp	x0, l___unnamed_48@PAGE
	add	x0, x0, l___unnamed_48@PAGEOFF
	bl	___kmpc_for_static_fini
	b	LBB458_28
LBB458_28:
	.cfi_def_cfa wsp, 272
	ldp	x29, x30, [sp, #256]            ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #240]            ; 16-byte Folded Reload
	add	sp, sp, #272
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13backward_baseER6tensorIfLi64ELi64ELi24ELi24EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #160]            ; 16-byte Folded Spill
	add	x29, sp, #160
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #8596
	movk	x9, #145, lsl #16
	add	x0, x8, x9
	mov	w1, #64
	str	w1, [sp, #28]                   ; 4-byte Folded Spill
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE6set_n0Ei
	ldr	w1, [sp, #28]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	mov	x9, #16792
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE6set_n0Ei
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	mov	x9, #17052
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x8, [x8, #128]
	stur	x8, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB459_1
LBB459_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB459_3 Depth 2
                                        ;       Child Loop BB459_5 Depth 3
                                        ;         Child Loop BB459_7 Depth 4
                                        ;           Child Loop BB459_9 Depth 5
                                        ;             Child Loop BB459_11 Depth 6
                                        ;               Child Loop BB459_13 Depth 7
	ldur	w8, [x29, #-36]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB459_28
	b	LBB459_2
LBB459_2:                               ;   in Loop: Header=BB459_1 Depth=1
	stur	wzr, [x29, #-40]
	b	LBB459_3
LBB459_3:                               ;   Parent Loop BB459_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB459_5 Depth 3
                                        ;         Child Loop BB459_7 Depth 4
                                        ;           Child Loop BB459_9 Depth 5
                                        ;             Child Loop BB459_11 Depth 6
                                        ;               Child Loop BB459_13 Depth 7
	ldur	w8, [x29, #-40]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB459_26
	b	LBB459_4
LBB459_4:                               ;   in Loop: Header=BB459_3 Depth=2
	stur	wzr, [x29, #-44]
	b	LBB459_5
LBB459_5:                               ;   Parent Loop BB459_1 Depth=1
                                        ;     Parent Loop BB459_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB459_7 Depth 4
                                        ;           Child Loop BB459_9 Depth 5
                                        ;             Child Loop BB459_11 Depth 6
                                        ;               Child Loop BB459_13 Depth 7
	ldur	w8, [x29, #-44]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB459_24
	b	LBB459_6
LBB459_6:                               ;   in Loop: Header=BB459_5 Depth=3
	stur	wzr, [x29, #-48]
	b	LBB459_7
LBB459_7:                               ;   Parent Loop BB459_1 Depth=1
                                        ;     Parent Loop BB459_3 Depth=2
                                        ;       Parent Loop BB459_5 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB459_9 Depth 5
                                        ;             Child Loop BB459_11 Depth 6
                                        ;               Child Loop BB459_13 Depth 7
	ldur	w8, [x29, #-48]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB459_22
	b	LBB459_8
LBB459_8:                               ;   in Loop: Header=BB459_7 Depth=4
	movi	d0, #0000000000000000
	stur	s0, [x29, #-52]
	stur	wzr, [x29, #-56]
	b	LBB459_9
LBB459_9:                               ;   Parent Loop BB459_1 Depth=1
                                        ;     Parent Loop BB459_3 Depth=2
                                        ;       Parent Loop BB459_5 Depth=3
                                        ;         Parent Loop BB459_7 Depth=4
                                        ; =>        This Loop Header: Depth=5
                                        ;             Child Loop BB459_11 Depth 6
                                        ;               Child Loop BB459_13 Depth 7
	ldur	w8, [x29, #-56]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB459_20
	b	LBB459_10
LBB459_10:                              ;   in Loop: Header=BB459_9 Depth=5
	stur	wzr, [x29, #-60]
	b	LBB459_11
LBB459_11:                              ;   Parent Loop BB459_1 Depth=1
                                        ;     Parent Loop BB459_3 Depth=2
                                        ;       Parent Loop BB459_5 Depth=3
                                        ;         Parent Loop BB459_7 Depth=4
                                        ;           Parent Loop BB459_9 Depth=5
                                        ; =>          This Loop Header: Depth=6
                                        ;               Child Loop BB459_13 Depth 7
	ldur	w8, [x29, #-60]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB459_18
	b	LBB459_12
LBB459_12:                              ;   in Loop: Header=BB459_11 Depth=6
	stur	wzr, [x29, #-64]
	b	LBB459_13
LBB459_13:                              ;   Parent Loop BB459_1 Depth=1
                                        ;     Parent Loop BB459_3 Depth=2
                                        ;       Parent Loop BB459_5 Depth=3
                                        ;         Parent Loop BB459_7 Depth=4
                                        ;           Parent Loop BB459_9 Depth=5
                                        ;             Parent Loop BB459_11 Depth=6
                                        ; =>            This Inner Loop Header: Depth=7
	ldur	w8, [x29, #-64]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB459_16
	b	LBB459_14
LBB459_14:                              ;   in Loop: Header=BB459_13 Depth=7
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-56]
	ldur	w2, [x29, #-36]
	ldur	w3, [x29, #-60]
	ldur	w4, [x29, #-64]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #24]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldur	w1, [x29, #-56]
	ldur	w2, [x29, #-40]
	ldur	w8, [x29, #-60]
	ldur	w9, [x29, #-44]
	add	w3, w8, w9
	ldur	w8, [x29, #-64]
	ldur	w9, [x29, #-48]
	add	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp, #24]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldur	s2, [x29, #-52]
	fmadd	s0, s0, s1, s2
	stur	s0, [x29, #-52]
	b	LBB459_15
LBB459_15:                              ;   in Loop: Header=BB459_13 Depth=7
	ldur	w8, [x29, #-64]
	add	w8, w8, #1
	stur	w8, [x29, #-64]
	b	LBB459_13
LBB459_16:                              ;   in Loop: Header=BB459_11 Depth=6
	b	LBB459_17
LBB459_17:                              ;   in Loop: Header=BB459_11 Depth=6
	ldur	w8, [x29, #-60]
	add	w8, w8, #1
	stur	w8, [x29, #-60]
	b	LBB459_11
LBB459_18:                              ;   in Loop: Header=BB459_9 Depth=5
	b	LBB459_19
LBB459_19:                              ;   in Loop: Header=BB459_9 Depth=5
	ldur	w8, [x29, #-56]
	add	w8, w8, #1
	stur	w8, [x29, #-56]
	b	LBB459_9
LBB459_20:                              ;   in Loop: Header=BB459_7 Depth=4
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldur	w9, [x29, #-52]
	str	w9, [sp, #20]                   ; 4-byte Folded Spill
	mov	x9, #8596
	movk	x9, #145, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-40]
	ldur	w3, [x29, #-44]
	ldur	w4, [x29, #-48]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB459_21
LBB459_21:                              ;   in Loop: Header=BB459_7 Depth=4
	ldur	w8, [x29, #-48]
	add	w8, w8, #1
	stur	w8, [x29, #-48]
	b	LBB459_7
LBB459_22:                              ;   in Loop: Header=BB459_5 Depth=3
	b	LBB459_23
LBB459_23:                              ;   in Loop: Header=BB459_5 Depth=3
	ldur	w8, [x29, #-44]
	add	w8, w8, #1
	stur	w8, [x29, #-44]
	b	LBB459_5
LBB459_24:                              ;   in Loop: Header=BB459_3 Depth=2
	b	LBB459_25
LBB459_25:                              ;   in Loop: Header=BB459_3 Depth=2
	ldur	w8, [x29, #-40]
	add	w8, w8, #1
	stur	w8, [x29, #-40]
	b	LBB459_3
LBB459_26:                              ;   in Loop: Header=BB459_1 Depth=1
	b	LBB459_27
LBB459_27:                              ;   in Loop: Header=BB459_1 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB459_1
LBB459_28:
	stur	wzr, [x29, #-68]
	b	LBB459_29
LBB459_29:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB459_31 Depth 2
                                        ;       Child Loop BB459_33 Depth 3
                                        ;         Child Loop BB459_35 Depth 4
	ldur	w8, [x29, #-68]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB459_44
	b	LBB459_30
LBB459_30:                              ;   in Loop: Header=BB459_29 Depth=1
	movi	d0, #0000000000000000
	stur	s0, [x29, #-72]
	stur	wzr, [x29, #-76]
	b	LBB459_31
LBB459_31:                              ;   Parent Loop BB459_29 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB459_33 Depth 3
                                        ;         Child Loop BB459_35 Depth 4
	ldur	w8, [x29, #-76]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB459_42
	b	LBB459_32
LBB459_32:                              ;   in Loop: Header=BB459_31 Depth=2
	str	wzr, [sp, #80]
	b	LBB459_33
LBB459_33:                              ;   Parent Loop BB459_29 Depth=1
                                        ;     Parent Loop BB459_31 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB459_35 Depth 4
	ldr	w8, [sp, #80]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB459_40
	b	LBB459_34
LBB459_34:                              ;   in Loop: Header=BB459_33 Depth=3
	str	wzr, [sp, #76]
	b	LBB459_35
LBB459_35:                              ;   Parent Loop BB459_29 Depth=1
                                        ;     Parent Loop BB459_31 Depth=2
                                        ;       Parent Loop BB459_33 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #76]
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB459_38
	b	LBB459_36
LBB459_36:                              ;   in Loop: Header=BB459_35 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-76]
	ldur	w2, [x29, #-68]
	ldr	w3, [sp, #80]
	ldr	w4, [sp, #76]
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	s1, [x0]
	ldur	s0, [x29, #-72]
	fadd	s0, s0, s1
	stur	s0, [x29, #-72]
	b	LBB459_37
LBB459_37:                              ;   in Loop: Header=BB459_35 Depth=4
	ldr	w8, [sp, #76]
	add	w8, w8, #1
	str	w8, [sp, #76]
	b	LBB459_35
LBB459_38:                              ;   in Loop: Header=BB459_33 Depth=3
	b	LBB459_39
LBB459_39:                              ;   in Loop: Header=BB459_33 Depth=3
	ldr	w8, [sp, #80]
	add	w8, w8, #1
	str	w8, [sp, #80]
	b	LBB459_33
LBB459_40:                              ;   in Loop: Header=BB459_31 Depth=2
	b	LBB459_41
LBB459_41:                              ;   in Loop: Header=BB459_31 Depth=2
	ldur	w8, [x29, #-76]
	add	w8, w8, #1
	stur	w8, [x29, #-76]
	b	LBB459_31
LBB459_42:                              ;   in Loop: Header=BB459_29 Depth=1
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldur	w9, [x29, #-72]
	str	w9, [sp, #16]                   ; 4-byte Folded Spill
	mov	x9, #16792
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-68]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #16]                   ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB459_43
LBB459_43:                              ;   in Loop: Header=BB459_29 Depth=1
	ldur	w8, [x29, #-68]
	add	w8, w8, #1
	stur	w8, [x29, #-68]
	b	LBB459_29
LBB459_44:
	str	wzr, [sp, #72]
	b	LBB459_45
LBB459_45:                              ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB459_47 Depth 2
                                        ;       Child Loop BB459_49 Depth 3
                                        ;         Child Loop BB459_51 Depth 4
                                        ;           Child Loop BB459_53 Depth 5
                                        ;             Child Loop BB459_55 Depth 6
                                        ;               Child Loop BB459_57 Depth 7
	ldr	w8, [sp, #72]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB459_77
	b	LBB459_46
LBB459_46:                              ;   in Loop: Header=BB459_45 Depth=1
	str	wzr, [sp, #68]
	b	LBB459_47
LBB459_47:                              ;   Parent Loop BB459_45 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB459_49 Depth 3
                                        ;         Child Loop BB459_51 Depth 4
                                        ;           Child Loop BB459_53 Depth 5
                                        ;             Child Loop BB459_55 Depth 6
                                        ;               Child Loop BB459_57 Depth 7
	ldr	w8, [sp, #68]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB459_75
	b	LBB459_48
LBB459_48:                              ;   in Loop: Header=BB459_47 Depth=2
	str	wzr, [sp, #64]
	b	LBB459_49
LBB459_49:                              ;   Parent Loop BB459_45 Depth=1
                                        ;     Parent Loop BB459_47 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB459_51 Depth 4
                                        ;           Child Loop BB459_53 Depth 5
                                        ;             Child Loop BB459_55 Depth 6
                                        ;               Child Loop BB459_57 Depth 7
	ldr	w8, [sp, #64]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB459_73
	b	LBB459_50
LBB459_50:                              ;   in Loop: Header=BB459_49 Depth=3
	str	wzr, [sp, #60]
	b	LBB459_51
LBB459_51:                              ;   Parent Loop BB459_45 Depth=1
                                        ;     Parent Loop BB459_47 Depth=2
                                        ;       Parent Loop BB459_49 Depth=3
                                        ; =>      This Loop Header: Depth=4
                                        ;           Child Loop BB459_53 Depth 5
                                        ;             Child Loop BB459_55 Depth 6
                                        ;               Child Loop BB459_57 Depth 7
	ldr	w8, [sp, #60]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB459_71
	b	LBB459_52
LBB459_52:                              ;   in Loop: Header=BB459_51 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #56]
	str	wzr, [sp, #52]
	b	LBB459_53
LBB459_53:                              ;   Parent Loop BB459_45 Depth=1
                                        ;     Parent Loop BB459_47 Depth=2
                                        ;       Parent Loop BB459_49 Depth=3
                                        ;         Parent Loop BB459_51 Depth=4
                                        ; =>        This Loop Header: Depth=5
                                        ;             Child Loop BB459_55 Depth 6
                                        ;               Child Loop BB459_57 Depth 7
	ldr	w8, [sp, #52]
	subs	w8, w8, #64
	cset	w8, ge
	tbnz	w8, #0, LBB459_69
	b	LBB459_54
LBB459_54:                              ;   in Loop: Header=BB459_53 Depth=5
	str	wzr, [sp, #48]
	b	LBB459_55
LBB459_55:                              ;   Parent Loop BB459_45 Depth=1
                                        ;     Parent Loop BB459_47 Depth=2
                                        ;       Parent Loop BB459_49 Depth=3
                                        ;         Parent Loop BB459_51 Depth=4
                                        ;           Parent Loop BB459_53 Depth=5
                                        ; =>          This Loop Header: Depth=6
                                        ;               Child Loop BB459_57 Depth 7
	ldr	w8, [sp, #48]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB459_67
	b	LBB459_56
LBB459_56:                              ;   in Loop: Header=BB459_55 Depth=6
	str	wzr, [sp, #44]
	b	LBB459_57
LBB459_57:                              ;   Parent Loop BB459_45 Depth=1
                                        ;     Parent Loop BB459_47 Depth=2
                                        ;       Parent Loop BB459_49 Depth=3
                                        ;         Parent Loop BB459_51 Depth=4
                                        ;           Parent Loop BB459_53 Depth=5
                                        ;             Parent Loop BB459_55 Depth=6
                                        ; =>            This Inner Loop Header: Depth=7
	ldr	w8, [sp, #44]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB459_65
	b	LBB459_58
LBB459_58:                              ;   in Loop: Header=BB459_57 Depth=7
	ldr	w8, [sp, #64]
	ldr	w9, [sp, #48]
	subs	w9, w8, w9
	mov	w8, #0
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB459_63
	b	LBB459_59
LBB459_59:                              ;   in Loop: Header=BB459_57 Depth=7
	ldr	w8, [sp, #64]
	ldr	w9, [sp, #48]
	subs	w8, w8, w9
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB459_63
	b	LBB459_60
LBB459_60:                              ;   in Loop: Header=BB459_57 Depth=7
	ldr	w8, [sp, #60]
	ldr	w9, [sp, #44]
	subs	w9, w8, w9
	mov	w8, #0
	subs	w8, w8, w9
	cset	w8, gt
	tbnz	w8, #0, LBB459_63
	b	LBB459_61
LBB459_61:                              ;   in Loop: Header=BB459_57 Depth=7
	ldr	w8, [sp, #60]
	ldr	w9, [sp, #44]
	subs	w8, w8, w9
	subs	w8, w8, #24
	cset	w8, ge
	tbnz	w8, #0, LBB459_63
	b	LBB459_62
LBB459_62:                              ;   in Loop: Header=BB459_57 Depth=7
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #52]
	ldr	w8, [sp, #64]
	ldr	w9, [sp, #48]
	subs	w3, w8, w9
	ldr	w8, [sp, #60]
	ldr	w9, [sp, #44]
	subs	w4, w8, w9
	bl	__ZN6tensorIfLi64ELi64ELi24ELi24EEclEiiii
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	add	x0, x8, #136
	ldr	w1, [sp, #52]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #48]
	ldr	w4, [sp, #44]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	ldr	s2, [sp, #56]
	fmadd	s0, s0, s1, s2
	str	s0, [sp, #56]
	b	LBB459_63
LBB459_63:                              ;   in Loop: Header=BB459_57 Depth=7
	b	LBB459_64
LBB459_64:                              ;   in Loop: Header=BB459_57 Depth=7
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB459_57
LBB459_65:                              ;   in Loop: Header=BB459_55 Depth=6
	b	LBB459_66
LBB459_66:                              ;   in Loop: Header=BB459_55 Depth=6
	ldr	w8, [sp, #48]
	add	w8, w8, #1
	str	w8, [sp, #48]
	b	LBB459_55
LBB459_67:                              ;   in Loop: Header=BB459_53 Depth=5
	b	LBB459_68
LBB459_68:                              ;   in Loop: Header=BB459_53 Depth=5
	ldr	w8, [sp, #52]
	add	w8, w8, #1
	str	w8, [sp, #52]
	b	LBB459_53
LBB459_69:                              ;   in Loop: Header=BB459_51 Depth=4
	ldr	x8, [sp, #32]                   ; 8-byte Folded Reload
	ldr	w9, [sp, #56]
	str	w9, [sp, #8]                    ; 4-byte Folded Spill
	mov	x9, #17052
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #72]
	ldr	w2, [sp, #68]
	ldr	w3, [sp, #64]
	ldr	w4, [sp, #60]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	w8, [sp, #8]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB459_70
LBB459_70:                              ;   in Loop: Header=BB459_51 Depth=4
	ldr	w8, [sp, #60]
	add	w8, w8, #1
	str	w8, [sp, #60]
	b	LBB459_51
LBB459_71:                              ;   in Loop: Header=BB459_49 Depth=3
	b	LBB459_72
LBB459_72:                              ;   in Loop: Header=BB459_49 Depth=3
	ldr	w8, [sp, #64]
	add	w8, w8, #1
	str	w8, [sp, #64]
	b	LBB459_49
LBB459_73:                              ;   in Loop: Header=BB459_47 Depth=2
	b	LBB459_74
LBB459_74:                              ;   in Loop: Header=BB459_47 Depth=2
	ldr	w8, [sp, #68]
	add	w8, w8, #1
	str	w8, [sp, #68]
	b	LBB459_47
LBB459_75:                              ;   in Loop: Header=BB459_45 Depth=1
	b	LBB459_76
LBB459_76:                              ;   in Loop: Header=BB459_45 Depth=1
	ldr	w8, [sp, #72]
	add	w8, w8, #1
	str	w8, [sp, #72]
	b	LBB459_45
LBB459_77:
	.cfi_def_cfa wsp, 176
	ldp	x29, x30, [sp, #160]            ; 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.weak_definition	__ZN4ReluILi64ELi32ELi26ELi26EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE: ; @_ZN4ReluILi64ELi32ELi26ELi26EE17backward_cpu_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x0, [sp, #8]
	ldr	x1, [sp]
	bl	__ZN4ReluILi64ELi32ELi26ELi26EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.weak_definition	__ZN4ReluILi64ELi32ELi26ELi26EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE: ; @_ZN4ReluILi64ELi32ELi26ELi26EE18backward_cuda_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	str	x1, [sp]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.139@PAGE
	add	x0, x0, l_.str.139@PAGEOFF
	mov	w1, #236
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN4ReluILi64ELi32ELi26ELi26EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE ; -- Begin function _ZN4ReluILi64ELi32ELi26ELi26EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.weak_definition	__ZN4ReluILi64ELi32ELi26ELi26EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.p2align	2
__ZN4ReluILi64ELi32ELi26ELi26EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE: ; @_ZN4ReluILi64ELi32ELi26ELi26EE13backward_baseER6tensorIfLi64ELi32ELi26ELi26EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	stur	w9, [x29, #-20]
	mov	x9, #32908
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-20]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EE6set_n0Ei
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	x8, [x8, #128]
	str	x8, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB462_1
LBB462_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB462_3 Depth 2
                                        ;       Child Loop BB462_5 Depth 3
                                        ;         Child Loop BB462_7 Depth 4
	ldr	w8, [sp, #28]
	ldur	w9, [x29, #-20]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB462_19
	b	LBB462_2
LBB462_2:                               ;   in Loop: Header=BB462_1 Depth=1
	str	wzr, [sp, #24]
	b	LBB462_3
LBB462_3:                               ;   Parent Loop BB462_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB462_5 Depth 3
                                        ;         Child Loop BB462_7 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB462_17
	b	LBB462_4
LBB462_4:                               ;   in Loop: Header=BB462_3 Depth=2
	str	wzr, [sp, #20]
	b	LBB462_5
LBB462_5:                               ;   Parent Loop BB462_1 Depth=1
                                        ;     Parent Loop BB462_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB462_7 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB462_15
	b	LBB462_6
LBB462_6:                               ;   in Loop: Header=BB462_5 Depth=3
	str	wzr, [sp, #16]
	b	LBB462_7
LBB462_7:                               ;   Parent Loop BB462_1 Depth=1
                                        ;     Parent Loop BB462_3 Depth=2
                                        ;       Parent Loop BB462_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #26
	cset	w8, ge
	tbnz	w8, #0, LBB462_13
	b	LBB462_8
LBB462_8:                               ;   in Loop: Header=BB462_7 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	fcmp	s0, #0.0
	cset	w8, lt
	tbnz	w8, #0, LBB462_10
	b	LBB462_9
LBB462_9:                               ;   in Loop: Header=BB462_7 Depth=4
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB462_11
LBB462_10:                              ;   in Loop: Header=BB462_7 Depth=4
	movi	d0, #0000000000000000
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	b	LBB462_11
LBB462_11:                              ;   in Loop: Header=BB462_7 Depth=4
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [sp]                        ; 4-byte Folded Spill
	mov	x9, #32908
	movk	x9, #84, lsl #16
	add	x0, x8, x9
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi32ELi26ELi26EEclEiiii
	ldr	s0, [sp]                        ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB462_12
LBB462_12:                              ;   in Loop: Header=BB462_7 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB462_7
LBB462_13:                              ;   in Loop: Header=BB462_5 Depth=3
	b	LBB462_14
LBB462_14:                              ;   in Loop: Header=BB462_5 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB462_5
LBB462_15:                              ;   in Loop: Header=BB462_3 Depth=2
	b	LBB462_16
LBB462_16:                              ;   in Loop: Header=BB462_3 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB462_3
LBB462_17:                              ;   in Loop: Header=BB462_1 Depth=1
	b	LBB462_18
LBB462_18:                              ;   in Loop: Header=BB462_1 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB462_1
LBB462_19:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13grad_dot_gradERS0_ ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13grad_dot_gradERS0_
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13grad_dot_gradERS0_
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13grad_dot_gradERS0_: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE13grad_dot_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #8596
	movk	x9, #145, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE3dotERS0_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	d0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, #16792
	movk	x9, #146, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	fmov	d1, d0
	ldr	d0, [sp, #8]                    ; 8-byte Folded Reload
	fadd	d0, d0, d1
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE13grad_dot_gradERS0_ ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE13grad_dot_gradERS0_
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE13grad_dot_gradERS0_
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE13grad_dot_gradERS0_: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE13grad_dot_gradERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	str	x1, [sp, #16]
	ldur	x8, [x29, #-8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE3dotERS0_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	d0, [sp, #8]                    ; 8-byte Folded Spill
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x0, x8, x9
	ldr	x8, [sp, #16]
	add	x1, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE3dotERS0_
	fmov	d1, d0
	ldr	d0, [sp, #8]                    ; 8-byte Folded Reload
	fadd	d0, d0, d1
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE3dotERS0_: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB465_2
	b	LBB465_1
LBB465_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB465_2:
	b	LBB465_3
LBB465_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB465_4
LBB465_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB465_6 Depth 2
                                        ;       Child Loop BB465_8 Depth 3
                                        ;         Child Loop BB465_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB465_19
	b	LBB465_5
LBB465_5:                               ;   in Loop: Header=BB465_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB465_6
LBB465_6:                               ;   Parent Loop BB465_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB465_8 Depth 3
                                        ;         Child Loop BB465_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB465_17
	b	LBB465_7
LBB465_7:                               ;   in Loop: Header=BB465_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB465_8
LBB465_8:                               ;   Parent Loop BB465_4 Depth=1
                                        ;     Parent Loop BB465_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB465_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB465_15
	b	LBB465_9
LBB465_9:                               ;   in Loop: Header=BB465_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB465_10
LBB465_10:                              ;   Parent Loop BB465_4 Depth=1
                                        ;     Parent Loop BB465_6 Depth=2
                                        ;       Parent Loop BB465_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB465_13
	b	LBB465_11
LBB465_11:                              ;   in Loop: Header=BB465_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB465_12
LBB465_12:                              ;   in Loop: Header=BB465_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB465_10
LBB465_13:                              ;   in Loop: Header=BB465_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB465_14
LBB465_14:                              ;   in Loop: Header=BB465_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB465_8
LBB465_15:                              ;   in Loop: Header=BB465_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB465_16
LBB465_16:                              ;   in Loop: Header=BB465_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB465_6
LBB465_17:                              ;   in Loop: Header=BB465_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB465_18
LBB465_18:                              ;   in Loop: Header=BB465_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB465_4
LBB465_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE3dotERS0_: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB466_2
	b	LBB466_1
LBB466_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB466_2:
	b	LBB466_3
LBB466_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB466_4
LBB466_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB466_6 Depth 2
                                        ;       Child Loop BB466_8 Depth 3
                                        ;         Child Loop BB466_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB466_19
	b	LBB466_5
LBB466_5:                               ;   in Loop: Header=BB466_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB466_6
LBB466_6:                               ;   Parent Loop BB466_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB466_8 Depth 3
                                        ;         Child Loop BB466_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB466_17
	b	LBB466_7
LBB466_7:                               ;   in Loop: Header=BB466_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB466_8
LBB466_8:                               ;   Parent Loop BB466_4 Depth=1
                                        ;     Parent Loop BB466_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB466_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB466_15
	b	LBB466_9
LBB466_9:                               ;   in Loop: Header=BB466_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB466_10
LBB466_10:                              ;   Parent Loop BB466_4 Depth=1
                                        ;     Parent Loop BB466_6 Depth=2
                                        ;       Parent Loop BB466_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB466_13
	b	LBB466_11
LBB466_11:                              ;   in Loop: Header=BB466_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB466_12
LBB466_12:                              ;   in Loop: Header=BB466_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB466_10
LBB466_13:                              ;   in Loop: Header=BB466_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB466_14
LBB466_14:                              ;   in Loop: Header=BB466_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB466_8
LBB466_15:                              ;   in Loop: Header=BB466_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB466_16
LBB466_16:                              ;   in Loop: Header=BB466_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB466_6
LBB466_17:                              ;   in Loop: Header=BB466_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB466_18
LBB466_18:                              ;   in Loop: Header=BB466_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB466_4
LBB466_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE3dotERS0_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE3dotERS0_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE3dotERS0_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE3dotERS0_: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE3dotERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB467_2
	b	LBB467_1
LBB467_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #352
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB467_2:
	b	LBB467_3
LBB467_3:
	movi	d0, #0000000000000000
	stur	d0, [x29, #-32]
	stur	wzr, [x29, #-36]
	b	LBB467_4
LBB467_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB467_6 Depth 2
                                        ;       Child Loop BB467_8 Depth 3
                                        ;         Child Loop BB467_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB467_19
	b	LBB467_5
LBB467_5:                               ;   in Loop: Header=BB467_4 Depth=1
	movi	d0, #0000000000000000
	stur	d0, [x29, #-48]
	stur	wzr, [x29, #-52]
	b	LBB467_6
LBB467_6:                               ;   Parent Loop BB467_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB467_8 Depth 3
                                        ;         Child Loop BB467_10 Depth 4
	ldur	w8, [x29, #-52]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB467_17
	b	LBB467_7
LBB467_7:                               ;   in Loop: Header=BB467_6 Depth=2
	movi	d0, #0000000000000000
	str	d0, [sp, #48]
	str	wzr, [sp, #44]
	b	LBB467_8
LBB467_8:                               ;   Parent Loop BB467_4 Depth=1
                                        ;     Parent Loop BB467_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB467_10 Depth 4
	ldr	w8, [sp, #44]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB467_15
	b	LBB467_9
LBB467_9:                               ;   in Loop: Header=BB467_8 Depth=3
	movi	d0, #0000000000000000
	str	d0, [sp, #32]
	str	wzr, [sp, #28]
	b	LBB467_10
LBB467_10:                              ;   Parent Loop BB467_4 Depth=1
                                        ;     Parent Loop BB467_6 Depth=2
                                        ;       Parent Loop BB467_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB467_13
	b	LBB467_11
LBB467_11:                              ;   in Loop: Header=BB467_10 Depth=4
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-36]
	ldur	w2, [x29, #-52]
	ldr	w3, [sp, #44]
	ldr	w4, [sp, #28]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	fcvt	d1, s0
	ldr	d0, [sp, #32]
	fadd	d0, d0, d1
	str	d0, [sp, #32]
	b	LBB467_12
LBB467_12:                              ;   in Loop: Header=BB467_10 Depth=4
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB467_10
LBB467_13:                              ;   in Loop: Header=BB467_8 Depth=3
	ldr	d1, [sp, #32]
	ldr	d0, [sp, #48]
	fadd	d0, d0, d1
	str	d0, [sp, #48]
	b	LBB467_14
LBB467_14:                              ;   in Loop: Header=BB467_8 Depth=3
	ldr	w8, [sp, #44]
	add	w8, w8, #1
	str	w8, [sp, #44]
	b	LBB467_8
LBB467_15:                              ;   in Loop: Header=BB467_6 Depth=2
	ldr	d1, [sp, #48]
	ldur	d0, [x29, #-48]
	fadd	d0, d0, d1
	stur	d0, [x29, #-48]
	b	LBB467_16
LBB467_16:                              ;   in Loop: Header=BB467_6 Depth=2
	ldur	w8, [x29, #-52]
	add	w8, w8, #1
	stur	w8, [x29, #-52]
	b	LBB467_6
LBB467_17:                              ;   in Loop: Header=BB467_4 Depth=1
	ldur	d1, [x29, #-48]
	ldur	d0, [x29, #-32]
	fadd	d0, d0, d1
	stur	d0, [x29, #-32]
	b	LBB467_18
LBB467_18:                              ;   in Loop: Header=BB467_4 Depth=1
	ldur	w8, [x29, #-36]
	add	w8, w8, #1
	stur	w8, [x29, #-36]
	b	LBB467_4
LBB467_19:
	ldur	d0, [x29, #-32]
	.cfi_def_cfa wsp, 128
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_main                           ; -- Begin function main
	.p2align	2
_main:                                  ; @main
Lfunc_begin8:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception8
; %bb.0:
	stp	x28, x27, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w27, -24
	.cfi_offset w28, -32
	.cfi_remember_state
	sub	sp, sp, #880
	stur	wzr, [x29, #-20]
	stur	w0, [x29, #-24]
	stur	x1, [x29, #-32]
	ldur	w0, [x29, #-24]
	ldur	x1, [x29, #-32]
	sub	x8, x29, #152
	bl	__ZL10parse_argsiPPc
	ldur	w8, [x29, #-36]
	subs	w8, w8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB468_2
	b	LBB468_1
LBB468_1:
	ldur	w8, [x29, #-40]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB468_3
	b	LBB468_2
LBB468_2:
	ldur	x8, [x29, #-32]
	ldr	x0, [x8]
	bl	__ZL5usagePKc
	b	LBB468_3
LBB468_3:
	mov	w8, #64
	stur	w8, [x29, #-156]
	mov	w8, #1
	stur	w8, [x29, #-160]
	mov	w8, #28
	stur	w8, [x29, #-164]
	stur	w8, [x29, #-168]
	mov	w8, #10
	stur	w8, [x29, #-172]
	ldur	w8, [x29, #-120]
	stur	w8, [x29, #-176]
	ldur	w8, [x29, #-176]
	subs	w8, w8, #64
	cset	w8, le
	tbnz	w8, #0, LBB468_5
	b	LBB468_4
LBB468_4:
	adrp	x0, l___func__.main@PAGE
	add	x0, x0, l___func__.main@PAGEOFF
	adrp	x1, l_.str.156@PAGE
	add	x1, x1, l_.str.156@PAGEOFF
	mov	w2, #95
	adrp	x3, l_.str.114@PAGE
	add	x3, x3, l_.str.114@PAGEOFF
	bl	___assert_rtn
LBB468_5:
	b	LBB468_6
LBB468_6:
	add	x0, sp, #584
	str	x0, [sp, #80]                   ; 8-byte Folded Spill
	bl	__ZN6loggerC1Ev
	add	x0, sp, #464
	str	x0, [sp, #72]                   ; 8-byte Folded Spill
	sub	x1, x29, #152
	mov	x2, #120
	bl	_memcpy
	ldr	x0, [sp, #80]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #72]                   ; 8-byte Folded Reload
	bl	__ZN6logger9start_logE11cmdline_opt
	ldur	x1, [x29, #-96]
	add	x0, sp, #456
	bl	__ZN9rnd_gen_t4seedEy
	ldr	x0, [sp, #80]                   ; 8-byte Folded Reload
	mov	w1, #1
	adrp	x2, l_.str.157@PAGE
	add	x2, x2, l_.str.157@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldur	x8, [x29, #-88]
	str	x8, [sp, #448]
	ldur	x8, [x29, #-80]
	str	x8, [sp, #440]
	ldr	x8, [sp, #448]
	subs	x8, x8, #0
	cset	w8, ne
	and	w8, w8, #0x1
	scvtf	s1, w8
	fmov	s0, #0.25000000
	fmul	s0, s0, s1
	str	s0, [sp, #392]
	ldr	x8, [sp, #448]
	str	x8, [sp, #400]
	ldr	x8, [sp, #440]
	subs	x8, x8, #0
	cset	w8, ne
	and	w8, w8, #0x1
	scvtf	s1, w8
	fmov	s0, #0.50000000
	fmul	s0, s0, s1
	str	s0, [sp, #416]
	ldr	x8, [sp, #440]
	str	x8, [sp, #424]
	mov	x0, #46072
	movk	x0, #1578, lsl #16
	str	x0, [sp, #88]                   ; 8-byte Folded Spill
	bl	__Znwm
	ldr	x1, [sp, #88]                   ; 8-byte Folded Reload
	str	x0, [sp, #96]                   ; 8-byte Folded Spill
	bl	_bzero
	ldr	x0, [sp, #96]                   ; 8-byte Folded Reload
Ltmp120:
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EEC1Ev
Ltmp121:
	b	LBB468_7
LBB468_7:
	ldr	x8, [sp, #96]                   ; 8-byte Folded Reload
	str	x8, [sp, #376]
	ldr	x8, [sp, #376]
	str	x8, [sp, #32]                   ; 8-byte Folded Spill
	add	x0, sp, #240
	str	x0, [sp, #40]                   ; 8-byte Folded Spill
	sub	x1, x29, #152
	mov	x2, #120
	bl	_memcpy
	add	x0, sp, #184
	str	x0, [sp, #48]                   ; 8-byte Folded Spill
	add	x1, sp, #384
	mov	x2, #56
	bl	_memcpy
	ldr	x0, [sp, #32]                   ; 8-byte Folded Reload
	ldr	x1, [sp, #40]                   ; 8-byte Folded Reload
	ldr	x4, [sp, #48]                   ; 8-byte Folded Reload
	add	x2, sp, #584
	str	x2, [sp, #64]                   ; 8-byte Folded Spill
	add	x3, sp, #456
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE4initE11cmdline_optP6loggerR9rnd_gen_t8MNISTCfg
	ldr	x0, [sp, #376]
	ldur	w1, [x29, #-52]
	bl	__Z6to_devI5MNISTILi64ELi1ELi28ELi28ELi10EEEvPT_i
	ldr	x0, [sp, #64]                   ; 8-byte Folded Reload
	mov	w1, #1
	str	w1, [sp, #60]                   ; 4-byte Folded Spill
	adrp	x2, l_.str.158@PAGE
	add	x2, x2, l_.str.158@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	x1, [sp, #64]                   ; 8-byte Folded Reload
	ldr	w4, [sp, #60]                   ; 4-byte Folded Reload
	mov	w8, #54841
	movk	w8, #15877, lsl #16
	fmov	s0, w8
	str	s0, [sp, #116]
	mov	w8, #48968
	movk	w8, #16029, lsl #16
	fmov	s0, w8
	str	s0, [sp, #112]
	ldur	x2, [x29, #-144]
	ldursw	x3, [x29, #-116]
	ldr	s0, [sp, #116]
	ldr	s1, [sp, #112]
	add	x0, sp, #152
	bl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi
	ldr	x1, [sp, #64]                   ; 8-byte Folded Reload
	ldur	x2, [x29, #-144]
	ldursw	x3, [x29, #-112]
	ldr	s0, [sp, #116]
	ldr	s1, [sp, #112]
	add	x0, sp, #120
	mov	w4, #0
	bl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi
	ldr	w1, [sp, #60]                   ; 4-byte Folded Reload
	ldr	x0, [sp, #64]                   ; 8-byte Folded Reload
	adrp	x2, l_.str.159@PAGE
	add	x2, x2, l_.str.159@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	str	xzr, [sp, #104]
	b	LBB468_8
LBB468_8:                               ; =>This Inner Loop Header: Depth=1
	ldr	x8, [sp, #104]
	ldur	x9, [x29, #-128]
	subs	x8, x8, x9
	cset	w8, ge
	tbnz	w8, #0, LBB468_12
	b	LBB468_9
LBB468_9:                               ;   in Loop: Header=BB468_8 Depth=1
	ldr	x0, [sp, #376]
	ldur	w2, [x29, #-176]
	ldur	w4, [x29, #-52]
	ldr	x8, [sp, #104]
	add	x5, x8, #1
	ldur	x6, [x29, #-104]
	add	x1, sp, #152
	add	x3, sp, #584
	str	x3, [sp, #24]                   ; 8-byte Folded Spill
	bl	__ZL5trainILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggerill
	ldr	x3, [sp, #24]                   ; 8-byte Folded Reload
	ldr	x0, [sp, #376]
	ldur	w2, [x29, #-176]
	ldur	w4, [x29, #-52]
	ldr	x8, [sp, #104]
	add	x5, x8, #1
	add	x1, sp, #120
	bl	__ZL4testILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggeril
	b	LBB468_10
LBB468_10:                              ;   in Loop: Header=BB468_8 Depth=1
	ldr	x8, [sp, #104]
	add	x8, x8, #1
	str	x8, [sp, #104]
	b	LBB468_8
LBB468_11:
Ltmp122:
	mov	x9, x0
	ldr	x0, [sp, #96]                   ; 8-byte Folded Reload
	mov	x8, x1
	str	x9, [sp, #368]
	str	w8, [sp, #364]
	bl	__ZdlPv
	b	LBB468_15
LBB468_12:
	add	x0, sp, #584
	str	x0, [sp, #8]                    ; 8-byte Folded Spill
	mov	w1, #1
	adrp	x2, l_.str.160@PAGE
	add	x2, x2, l_.str.160@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6logger7end_logEv
	add	x0, sp, #152
	bl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE5closeEv
	add	x0, sp, #120
	bl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE5closeEv
	ldr	x8, [sp, #376]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB468_14
	b	LBB468_13
LBB468_13:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZdlPv
	b	LBB468_14
LBB468_14:
	mov	w0, #0
	add	sp, sp, #880
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp], #32             ; 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore w27
	.cfi_restore w28
	ret
LBB468_15:
	.cfi_restore_state
	ldr	x0, [sp, #368]
	bl	__Unwind_Resume
Lfunc_end8:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table468:
Lexception8:
	.byte	255                             ; @LPStart Encoding = omit
	.byte	255                             ; @TType Encoding = omit
	.byte	1                               ; Call site Encoding = uleb128
	.uleb128 Lcst_end8-Lcst_begin8
Lcst_begin8:
	.uleb128 Lfunc_begin8-Lfunc_begin8      ; >> Call Site 1 <<
	.uleb128 Ltmp120-Lfunc_begin8           ;   Call between Lfunc_begin8 and Ltmp120
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp120-Lfunc_begin8           ; >> Call Site 2 <<
	.uleb128 Ltmp121-Ltmp120                ;   Call between Ltmp120 and Ltmp121
	.uleb128 Ltmp122-Lfunc_begin8           ;     jumps to Ltmp122
	.byte	0                               ;   On action: cleanup
	.uleb128 Ltmp121-Lfunc_begin8           ; >> Call Site 3 <<
	.uleb128 Lfunc_end8-Ltmp121             ;   Call between Ltmp121 and Lfunc_end8
	.byte	0                               ;     has no landing pad
	.byte	0                               ;   On action: cleanup
Lcst_end8:
	.p2align	2
                                        ; -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3                               ; -- Begin function _ZL5trainILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggerill
lCPI469_0:
	.quad	0x4059000000000000              ; double 100
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	2
__ZL5trainILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggerill: ; @_ZL5trainILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggerill
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	x29, x30, [sp, #144]            ; 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	stur	x3, [x29, #-32]
	stur	w4, [x29, #-36]
	stur	x5, [x29, #-48]
	stur	x6, [x29, #-56]
	ldur	x0, [x29, #-16]
	bl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE6rewindEv
	stur	xzr, [x29, #-64]
	ldur	x0, [x29, #-32]
	ldur	x8, [x29, #-48]
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #2
	adrp	x2, l_.str.161@PAGE
	add	x2, x2, l_.str.161@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	str	xzr, [sp, #72]
	b	LBB469_1
LBB469_1:                               ; =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-16]
	ldur	x8, [x29, #-8]
	add	x1, x8, #128
	ldur	x8, [x29, #-8]
	mov	x9, #4228
	movk	x9, #3, lsl #16
	add	x2, x8, x9
	ldur	x8, [x29, #-8]
	mov	x9, #4488
	movk	x9, #3, lsl #16
	add	x3, x8, x9
	ldur	w4, [x29, #-20]
	ldur	w5, [x29, #-36]
	bl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB469_6
	b	LBB469_2
LBB469_2:                               ;   in Loop: Header=BB469_1 Depth=1
	ldur	x0, [x29, #-32]
	ldur	x12, [x29, #-48]
	ldr	x11, [sp, #72]
	ldur	x10, [x29, #-64]
	ldur	x8, [x29, #-64]
	ldur	x9, [x29, #-8]
	ldrsw	x9, [x9, #128]
	add	x8, x8, x9
	mov	x9, sp
	str	x12, [x9]
	str	x11, [x9, #8]
	str	x10, [x9, #16]
	str	x8, [x9, #24]
	mov	w1, #2
	adrp	x2, l_.str.162@PAGE
	add	x2, x2, l_.str.162@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	add	x1, x8, #128
	ldur	x8, [x29, #-8]
	mov	x9, #4228
	movk	x9, #3, lsl #16
	str	x9, [sp, #56]                   ; 8-byte Folded Spill
	add	x2, x8, x9
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE23forward_backward_updateER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EE
	str	s0, [sp, #68]
	ldr	s0, [sp, #68]
	ldur	x8, [x29, #-8]
	mov	x9, #4488
	movk	x9, #3, lsl #16
	ldr	s1, [x8, x9]
	scvtf	s1, s1
	fdiv	s0, s0, s1
	str	s0, [sp, #64]
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	mov	x9, #4748
	movk	x9, #3, lsl #16
	str	x9, [sp, #48]                   ; 8-byte Folded Spill
	add	x1, x8, x9
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7predictER6tensorIiLi64ELi1ELi1ELi1EE
	ldr	x10, [sp, #48]                  ; 8-byte Folded Reload
	ldr	x9, [sp, #56]                   ; 8-byte Folded Reload
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-64]
	mov	x1, x8
	ldur	x8, [x29, #-8]
	add	x2, x8, x10
	ldur	x8, [x29, #-8]
	add	x3, x8, x9
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE14log_predictionEiR6tensorIiLi64ELi1ELi1ELi1EES3_
	ldr	x8, [sp, #72]
	ldur	x10, [x29, #-56]
	sdiv	x9, x8, x10
	mul	x9, x9, x10
	subs	x8, x8, x9
	subs	x8, x8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB469_4
	b	LBB469_3
LBB469_3:                               ;   in Loop: Header=BB469_1 Depth=1
	ldur	x0, [x29, #-32]
	ldur	x11, [x29, #-48]
	ldur	x10, [x29, #-64]
	ldur	x8, [x29, #-16]
	ldr	x9, [x8, #8]
	ldur	d0, [x29, #-64]
	scvtf	d1, d0
	adrp	x8, lCPI469_0@PAGE
	ldr	d0, [x8, lCPI469_0@PAGEOFF]
	fmul	d0, d0, d1
	ldur	x8, [x29, #-16]
	ldr	d1, [x8, #8]
	scvtf	d1, d1
	fdiv	d1, d0, d1
	ldr	s0, [sp, #64]
	fcvt	d0, s0
	mov	x8, sp
	str	x11, [x8]
	str	x10, [x8, #8]
	str	x9, [x8, #16]
	str	d1, [x8, #24]
	str	d0, [x8, #32]
	mov	w1, #1
	adrp	x2, l_.str.163@PAGE
	add	x2, x2, l_.str.163@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	b	LBB469_4
LBB469_4:                               ;   in Loop: Header=BB469_1 Depth=1
	ldur	x0, [x29, #-32]
	ldur	x12, [x29, #-48]
	ldr	x11, [sp, #72]
	ldur	x10, [x29, #-64]
	ldur	x8, [x29, #-64]
	ldur	x9, [x29, #-8]
	ldrsw	x9, [x9, #128]
	add	x8, x8, x9
	mov	x9, sp
	str	x12, [x9]
	str	x11, [x9, #8]
	str	x10, [x9, #16]
	str	x8, [x9, #24]
	mov	w1, #2
	adrp	x2, l_.str.164@PAGE
	add	x2, x2, l_.str.164@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldur	x8, [x29, #-8]
	ldrsw	x9, [x8, #128]
	ldur	x8, [x29, #-64]
	add	x8, x8, x9
	stur	x8, [x29, #-64]
	b	LBB469_5
LBB469_5:                               ;   in Loop: Header=BB469_1 Depth=1
	ldr	x8, [sp, #72]
	add	x8, x8, #1
	str	x8, [sp, #72]
	b	LBB469_1
LBB469_6:
	ldur	x0, [x29, #-32]
	ldur	x8, [x29, #-48]
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #2
	adrp	x2, l_.str.165@PAGE
	add	x2, x2, l_.str.165@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	.cfi_def_cfa wsp, 160
	ldp	x29, x30, [sp, #144]            ; 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3                               ; -- Begin function _ZL4testILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggeril
lCPI470_0:
	.quad	0x4059000000000000              ; double 100
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	2
__ZL4testILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggeril: ; @_ZL4testILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggeril
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	x29, x30, [sp, #144]            ; 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	w2, [x29, #-20]
	stur	x3, [x29, #-32]
	stur	w4, [x29, #-36]
	stur	x5, [x29, #-48]
	movi	d0, #0000000000000000
	stur	s0, [x29, #-52]
	stur	xzr, [x29, #-64]
	str	xzr, [sp, #72]
	ldur	x0, [x29, #-16]
	bl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE6rewindEv
	ldur	x0, [x29, #-32]
	ldur	x8, [x29, #-48]
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #2
	adrp	x2, l_.str.167@PAGE
	add	x2, x2, l_.str.167@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	str	xzr, [sp, #64]
	b	LBB470_1
LBB470_1:                               ; =>This Inner Loop Header: Depth=1
	ldur	x0, [x29, #-16]
	ldur	x8, [x29, #-8]
	add	x1, x8, #128
	ldur	x8, [x29, #-8]
	mov	x9, #4228
	movk	x9, #3, lsl #16
	add	x2, x8, x9
	ldur	x8, [x29, #-8]
	mov	x9, #4488
	movk	x9, #3, lsl #16
	add	x3, x8, x9
	ldur	w4, [x29, #-20]
	ldur	w5, [x29, #-36]
	bl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB470_4
	b	LBB470_2
LBB470_2:                               ;   in Loop: Header=BB470_1 Depth=1
	ldur	x0, [x29, #-32]
	ldur	x12, [x29, #-48]
	ldr	x11, [sp, #64]
	ldur	x10, [x29, #-64]
	ldur	x8, [x29, #-64]
	ldur	x9, [x29, #-8]
	ldrsw	x9, [x9, #128]
	add	x8, x8, x9
	mov	x9, sp
	str	x12, [x9]
	str	x11, [x9, #8]
	str	x10, [x9, #16]
	str	x8, [x9, #24]
	mov	w1, #2
	str	w1, [sp, #52]                   ; 4-byte Folded Spill
	adrp	x2, l_.str.168@PAGE
	add	x2, x2, l_.str.168@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	add	x1, x8, #128
	ldur	x8, [x29, #-8]
	mov	x9, #4228
	movk	x9, #3, lsl #16
	str	x9, [sp, #40]                   ; 8-byte Folded Spill
	add	x2, x8, x9
	mov	w3, #0
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7forwardER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EEi
	str	x0, [sp, #56]
	ldr	x0, [sp, #56]
	ldur	w1, [x29, #-36]
	bl	__Z7to_hostI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	mov	x9, #4748
	movk	x9, #3, lsl #16
	str	x9, [sp, #32]                   ; 8-byte Folded Spill
	add	x1, x8, x9
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7predictER6tensorIiLi64ELi1ELi1ELi1EE
	ldr	x0, [sp, #56]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3sumEv
	ldr	x10, [sp, #32]                  ; 8-byte Folded Reload
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	fmov	s1, s0
	ldur	s0, [x29, #-52]
	fadd	s0, s0, s1
	stur	s0, [x29, #-52]
	ldur	x8, [x29, #-8]
	ldrsw	x11, [x8, #128]
	ldur	x8, [x29, #-64]
	add	x8, x8, x11
	stur	x8, [x29, #-64]
	ldur	x0, [x29, #-8]
	ldur	x8, [x29, #-64]
	mov	x1, x8
	ldur	x8, [x29, #-8]
	add	x2, x8, x10
	ldur	x8, [x29, #-8]
	add	x3, x8, x9
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE14log_predictionEiR6tensorIiLi64ELi1ELi1ELi1EES3_
	ldr	w1, [sp, #52]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #72]
	add	x8, x8, w0, sxtw
	str	x8, [sp, #72]
	ldur	x0, [x29, #-32]
	ldur	x12, [x29, #-48]
	ldr	x11, [sp, #64]
	ldur	x10, [x29, #-64]
	ldur	x8, [x29, #-64]
	ldur	x9, [x29, #-8]
	ldrsw	x9, [x9, #128]
	add	x8, x8, x9
	mov	x9, sp
	str	x12, [x9]
	str	x11, [x9, #8]
	str	x10, [x9, #16]
	str	x8, [x9, #24]
	adrp	x2, l_.str.169@PAGE
	add	x2, x2, l_.str.169@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	b	LBB470_3
LBB470_3:                               ;   in Loop: Header=BB470_1 Depth=1
	ldr	x8, [sp, #64]
	add	x8, x8, #1
	str	x8, [sp, #64]
	b	LBB470_1
LBB470_4:
	ldur	x8, [x29, #-64]
	ldur	x9, [x29, #-16]
	ldr	x9, [x9, #8]
	subs	x8, x8, x9
	cset	w8, eq
	tbnz	w8, #0, LBB470_6
	b	LBB470_5
LBB470_5:
	adrp	x0, l___func__._ZL4testILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggeril@PAGE
	add	x0, x0, l___func__._ZL4testILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggeril@PAGEOFF
	adrp	x1, l_.str.156@PAGE
	add	x1, x1, l_.str.156@PAGEOFF
	mov	w2, #67
	adrp	x3, l_.str.170@PAGE
	add	x3, x3, l_.str.170@PAGEOFF
	bl	___assert_rtn
LBB470_6:
	b	LBB470_7
LBB470_7:
	ldur	x8, [x29, #-64]
	subs	x8, x8, #0
	cset	w8, le
	tbnz	w8, #0, LBB470_9
	b	LBB470_8
LBB470_8:
	ldur	x0, [x29, #-32]
	ldur	s0, [x29, #-52]
	ldur	d1, [x29, #-64]
	fmov	x8, d1
	scvtf	s1, x8
	fdiv	s0, s0, s1
	fcvt	d1, s0
	ldr	x10, [sp, #72]
	ldur	x9, [x29, #-64]
	ldr	d0, [sp, #72]
	scvtf	d2, d0
	adrp	x8, lCPI470_0@PAGE
	ldr	d0, [x8, lCPI470_0@PAGEOFF]
	fmul	d0, d0, d2
	ldur	d2, [x29, #-64]
	scvtf	d2, d2
	fdiv	d0, d0, d2
	mov	x8, sp
	str	d1, [x8]
	str	x10, [x8, #8]
	str	x9, [x8, #16]
	str	d0, [x8, #24]
	mov	w1, #1
	adrp	x2, l_.str.171@PAGE
	add	x2, x2, l_.str.171@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	b	LBB470_9
LBB470_9:
	ldur	x0, [x29, #-32]
	ldur	x8, [x29, #-48]
	mov	x9, sp
	str	x8, [x9]
	mov	w1, #2
	adrp	x2, l_.str.172@PAGE
	add	x2, x2, l_.str.172@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	.cfi_def_cfa wsp, 160
	ldp	x29, x30, [sp, #144]            ; 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE5closeEv ; -- Begin function _ZN13mnist_datasetILi64ELi1ELi28ELi28EE5closeEv
	.weak_definition	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE5closeEv
	.p2align	2
__ZN13mnist_datasetILi64ELi1ELi28ELi28EE5closeEv: ; @_ZN13mnist_datasetILi64ELi1ELi28ELi28EE5closeEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	stp	x29, x30, [sp, #32]             ; 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x8, [x8, #16]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	subs	x8, x8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB471_2
	b	LBB471_1
LBB471_1:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	bl	__ZdaPv
	b	LBB471_2
LBB471_2:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
                                        ; kill: def $x9 killed $xzr
	str	xzr, [x8, #16]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #48
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE6rewindEv ; -- Begin function _ZN13mnist_datasetILi64ELi1ELi28ELi28EE6rewindEv
	.weak_definition	__ZN13mnist_datasetILi64ELi1ELi28ELi28EE6rewindEv
	.p2align	2
__ZN13mnist_datasetILi64ELi1ELi28ELi28EE6rewindEv: ; @_ZN13mnist_datasetILi64ELi1ELi28ELi28EE6rewindEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	str	xzr, [x8]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE23forward_backward_updateER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EE ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE23forward_backward_updateER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EE
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE23forward_backward_updateER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EE
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE23forward_backward_updateER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EE: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE23forward_backward_updateER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	ldur	x0, [x29, #-8]
	str	x0, [sp]                        ; 8-byte Folded Spill
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	stur	w8, [x29, #-28]
	ldur	x1, [x29, #-16]
	ldur	x2, [x29, #-24]
	mov	w3, #1
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7forwardER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EEi
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	str	x0, [sp, #24]
	mov	x9, #5008
	movk	x9, #3, lsl #16
	str	x9, [sp, #8]                    ; 8-byte Folded Spill
	add	x0, x8, x9
	ldur	w1, [x29, #-28]
	fmov	s0, #1.00000000
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE10init_constEif
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	x10, [sp, #8]                   ; 8-byte Folded Reload
	mov	x9, x8
	add	x0, x9, x10
	ldr	w1, [x8, #100]
	bl	__Z6to_devI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	mov	x8, x0
	add	x1, x8, x9
	ldur	x2, [x29, #-24]
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	ldr	x0, [sp]                        ; 8-byte Folded Reload
	bl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE6updateEv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	x0, [sp, #24]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	add	x0, x8, x9
	ldr	x1, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3dotERS0_
	str	d0, [sp, #16]
	ldr	d0, [sp, #16]
	fcvt	s0, d0
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7predictER6tensorIiLi64ELi1ELi1ELi1EE ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7predictER6tensorIiLi64ELi1ELi1ELi1EE
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7predictER6tensorIiLi64ELi1ELi1ELi1EE
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7predictER6tensorIiLi64ELi1ELi1ELi1EE: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE7predictER6tensorIiLi64ELi1ELi1ELi1EE
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	mov	x10, #40680
	movk	x10, #1578, lsl #16
	mov	x9, x8
	add	x9, x9, x10
	stur	x9, [x29, #-24]
	ldur	x0, [x29, #-24]
	ldr	w1, [x8, #100]
	bl	__Z7to_hostI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, #4488
	movk	x9, #3, lsl #16
	ldr	w8, [x8, x9]
	stur	w8, [x29, #-28]
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EE6set_n0Ei
	str	wzr, [sp, #32]
	b	LBB474_1
LBB474_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB474_3 Depth 2
	ldr	w8, [sp, #32]
	ldur	w9, [x29, #-28]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB474_10
	b	LBB474_2
LBB474_2:                               ;   in Loop: Header=BB474_1 Depth=1
	str	wzr, [sp, #28]
	str	wzr, [sp, #24]
	b	LBB474_3
LBB474_3:                               ;   Parent Loop BB474_1 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w8, [sp, #24]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB474_8
	b	LBB474_4
LBB474_4:                               ;   in Loop: Header=BB474_3 Depth=2
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #32]
	ldr	w2, [sp, #28]
	mov	w4, #0
	str	w4, [sp, #8]                    ; 4-byte Folded Spill
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	w4, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #32]
	ldr	w2, [sp, #24]
	mov	x3, x4
	bl	__ZN6tensorIfLi64ELi10ELi1ELi1EEclEiiii
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s1, [x0]
	fcmp	s0, s1
	cset	w8, pl
	tbnz	w8, #0, LBB474_6
	b	LBB474_5
LBB474_5:                               ;   in Loop: Header=BB474_3 Depth=2
	ldr	w8, [sp, #24]
	str	w8, [sp, #28]
	b	LBB474_6
LBB474_6:                               ;   in Loop: Header=BB474_3 Depth=2
	b	LBB474_7
LBB474_7:                               ;   in Loop: Header=BB474_3 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB474_3
LBB474_8:                               ;   in Loop: Header=BB474_1 Depth=1
	ldr	w8, [sp, #28]
	str	w8, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldr	w1, [sp, #32]
	mov	w4, #0
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	w8, [sp, #4]                    ; 4-byte Folded Reload
	str	w8, [x0]
	b	LBB474_9
LBB474_9:                               ;   in Loop: Header=BB474_1 Depth=1
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB474_1
LBB474_10:
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE14log_predictionEiR6tensorIiLi64ELi1ELi1ELi1EES3_ ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE14log_predictionEiR6tensorIiLi64ELi1ELi1ELi1EES3_
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE14log_predictionEiR6tensorIiLi64ELi1ELi1ELi1EES3_
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE14log_predictionEiR6tensorIiLi64ELi1ELi1ELi1EES3_: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE14log_predictionEiR6tensorIiLi64ELi1ELi1ELi1EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #128]            ; 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	x2, [x29, #-24]
	stur	x3, [x29, #-32]
	ldur	x8, [x29, #-8]
	stur	x8, [x29, #-56]                 ; 8-byte Folded Spill
	mov	x9, #4488
	movk	x9, #3, lsl #16
	ldr	w8, [x8, x9]
	stur	w8, [x29, #-36]
	stur	wzr, [x29, #-40]
	stur	wzr, [x29, #-44]
	b	LBB475_1
LBB475_1:                               ; =>This Inner Loop Header: Depth=1
	ldur	w8, [x29, #-44]
	ldur	w9, [x29, #-36]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB475_6
	b	LBB475_2
LBB475_2:                               ;   in Loop: Header=BB475_1 Depth=1
	ldur	x8, [x29, #-56]                 ; 8-byte Folded Reload
	ldr	x9, [x8, #120]
	str	x9, [sp, #56]                   ; 8-byte Folded Spill
	ldur	w9, [x29, #-12]
	ldur	w10, [x29, #-44]
	add	w9, w9, w10
	str	w9, [sp, #36]                   ; 4-byte Folded Spill
	mov	x9, #4488
	movk	x9, #3, lsl #16
	add	x0, x8, x9
	ldur	w1, [x29, #-44]
	mov	w4, #0
	str	w4, [sp, #64]                   ; 4-byte Folded Spill
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	w4, [sp, #64]                   ; 4-byte Folded Reload
	ldr	w9, [x0]
                                        ; implicit-def: $x8
	mov	x8, x9
	str	x8, [sp, #40]                   ; 8-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-44]
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	w4, [sp, #64]                   ; 4-byte Folded Reload
	ldr	w9, [x0]
                                        ; implicit-def: $x8
	mov	x8, x9
	str	x8, [sp, #48]                   ; 8-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldur	w1, [x29, #-44]
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	w13, [sp, #36]                  ; 4-byte Folded Reload
	ldr	x11, [sp, #40]                  ; 8-byte Folded Reload
	ldr	x10, [sp, #48]                  ; 8-byte Folded Reload
	mov	x8, x0
	ldr	x0, [sp, #56]                   ; 8-byte Folded Reload
	ldr	w9, [x8]
                                        ; implicit-def: $x8
	mov	x8, x9
	mov	x9, sp
                                        ; implicit-def: $x12
	mov	x12, x13
	str	x12, [x9]
	str	x11, [x9, #8]
	str	x10, [x9, #16]
	str	x8, [x9, #24]
	mov	w1, #3
	adrp	x2, l_.str.166@PAGE
	add	x2, x2, l_.str.166@PAGEOFF
	bl	__ZN6logger3logEiPKcz
	ldr	w4, [sp, #64]                   ; 4-byte Folded Reload
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-44]
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldr	w4, [sp, #64]                   ; 4-byte Folded Reload
	ldr	w8, [x0]
	stur	w8, [x29, #-60]                 ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldur	w1, [x29, #-44]
	mov	x2, x4
	mov	x3, x4
	bl	__ZN6tensorIiLi64ELi1ELi1ELi1EEclEiiii
	ldur	w8, [x29, #-60]                 ; 4-byte Folded Reload
	ldr	w9, [x0]
	subs	w8, w8, w9
	cset	w8, ne
	tbnz	w8, #0, LBB475_4
	b	LBB475_3
LBB475_3:                               ;   in Loop: Header=BB475_1 Depth=1
	ldur	w8, [x29, #-40]
	add	w8, w8, #1
	stur	w8, [x29, #-40]
	b	LBB475_4
LBB475_4:                               ;   in Loop: Header=BB475_1 Depth=1
	b	LBB475_5
LBB475_5:                               ;   in Loop: Header=BB475_1 Depth=1
	ldur	w8, [x29, #-44]
	add	w8, w8, #1
	stur	w8, [x29, #-44]
	b	LBB475_1
LBB475_6:
	ldur	w0, [x29, #-40]
	.cfi_def_cfa wsp, 144
	ldp	x29, x30, [sp, #128]            ; 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE6updateEv ; -- Begin function _ZN5MNISTILi64ELi1ELi28ELi28ELi10EE6updateEv
	.weak_definition	__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE6updateEv
	.p2align	2
__ZN5MNISTILi64ELi1ELi28ELi28ELi10EE6updateEv: ; @_ZN5MNISTILi64ELi1ELi28ELi28ELi10EE6updateEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #5272
	movk	x9, #3, lsl #16
	add	x0, x8, x9
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #50176
	movk	x9, #259, lsl #16
	add	x0, x8, x9
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #3224
	movk	x9, #1107, lsl #16
	add	x0, x8, x9
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #39584
	movk	x9, #1577, lsl #16
	add	x0, x8, x9
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7to_hostI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i ; -- Begin function _Z7to_hostI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	.weak_definition	__Z7to_hostI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	.p2align	2
__Z7to_hostI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i: ; @_Z7to_hostI6tensorIfLi64ELi1ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-16]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB478_2
	b	LBB478_1
LBB478_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB478_3
	b	LBB478_4
LBB478_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15update_cpu_baseEv
	b	LBB478_8
LBB478_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16update_cuda_baseEv
	b	LBB478_8
LBB478_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB478_6
	b	LBB478_5
LBB478_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16update_cuda_baseEv
	b	LBB478_7
LBB478_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15update_cpu_baseEv
	b	LBB478_7
LBB478_7:
	b	LBB478_8
LBB478_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-16]
	str	x8, [sp, #32]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-16]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB479_2
	b	LBB479_1
LBB479_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB479_3
	b	LBB479_4
LBB479_2:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15update_cpu_baseEv
	b	LBB479_8
LBB479_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16update_cuda_baseEv
	b	LBB479_8
LBB479_4:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB479_6
	b	LBB479_5
LBB479_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16update_cuda_baseEv
	b	LBB479_7
LBB479_6:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15update_cpu_baseEv
	b	LBB479_7
LBB479_7:
	b	LBB479_8
LBB479_8:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-16]
	str	x8, [sp, #32]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-16]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB480_4
	b	LBB480_1
LBB480_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB480_5
	b	LBB480_2
LBB480_2:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #2
	cset	w8, ne
	tbnz	w8, #0, LBB480_6
	b	LBB480_3
LBB480_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE14update_cpu_ompEv
	b	LBB480_10
LBB480_4:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE15update_cpu_baseEv
	b	LBB480_10
LBB480_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16update_cuda_baseEv
	b	LBB480_10
LBB480_6:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB480_8
	b	LBB480_7
LBB480_7:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16update_cuda_baseEv
	b	LBB480_9
LBB480_8:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE15update_cpu_baseEv
	b	LBB480_9
LBB480_9:
	b	LBB480_10
LBB480_10:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-16]
	str	x8, [sp, #32]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	ldr	x0, [x8, #120]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv@PAGEOFF
	bl	__ZN6logger14log_start_fun_EPKc
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-16]
	ldr	w8, [x8, #96]
	str	w8, [sp, #20]                   ; 4-byte Folded Spill
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB481_4
	b	LBB481_1
LBB481_1:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #1
	cset	w8, eq
	tbnz	w8, #0, LBB481_5
	b	LBB481_2
LBB481_2:
	ldr	w8, [sp, #20]                   ; 4-byte Folded Reload
	subs	w8, w8, #2
	cset	w8, ne
	tbnz	w8, #0, LBB481_6
	b	LBB481_3
LBB481_3:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE14update_cpu_ompEv
	b	LBB481_10
LBB481_4:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE15update_cpu_baseEv
	b	LBB481_10
LBB481_5:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16update_cuda_baseEv
	b	LBB481_10
LBB481_6:
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [x8, #100]
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB481_8
	b	LBB481_7
LBB481_7:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16update_cuda_baseEv
	b	LBB481_9
LBB481_8:
	ldr	x0, [sp, #8]                    ; 8-byte Folded Reload
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE15update_cpu_baseEv
	b	LBB481_9
LBB481_9:
	b	LBB481_10
LBB481_10:
	bl	__ZL7get_tscv
	ldr	x8, [sp, #8]                    ; 8-byte Folded Reload
	stur	x0, [x29, #-24]
	ldr	x0, [x8, #120]
	ldur	x8, [x29, #-16]
	str	x8, [sp, #32]
	ldur	x8, [x29, #-24]
	str	x8, [sp, #24]
	ldr	x2, [sp, #32]
	ldr	x3, [sp, #24]
	adrp	x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv@PAGE
	add	x1, x1, l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv@PAGEOFF
	bl	__ZN6logger12log_end_fun_EPKc5tsc_tS2_
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15update_cpu_baseEv ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15update_cpu_baseEv
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15update_cpu_baseEv
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15update_cpu_baseEv: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE15update_cpu_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	bl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE11update_baseEv
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16update_cuda_baseEv ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16update_cuda_baseEv
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16update_cuda_baseEv
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16update_cuda_baseEv: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE16update_cuda_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.125@PAGE
	add	x0, x0, l_.str.125@PAGEOFF
	mov	w1, #140
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE11update_baseEv ; -- Begin function _ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE11update_baseEv
	.weak_definition	__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE11update_baseEv
	.p2align	2
__ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE11update_baseEv: ; @_ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE11update_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #39584
	movk	x9, #87, lsl #16
	add	x0, x8, x9
	mov	x9, x8
	add	x1, x9, #136
	mov	x9, #34196
	movk	x9, #84, lsl #16
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi32ELi1ELi3ELi3EE6updateER6tensorIfLi32ELi1ELi3ELi3EES3_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #44220
	movk	x9, #87, lsl #16
	add	x0, x8, x9
	mov	x9, x8
	add	x1, x9, #1292
	mov	x9, #35352
	movk	x9, #84, lsl #16
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi32ELi1ELi1ELi1EE6updateER6tensorIfLi32ELi1ELi1ELi1EES3_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi32ELi1ELi3ELi3EE6updateER6tensorIfLi32ELi1ELi3ELi3EES3_ ; -- Begin function _ZN8AdaDeltaILi32ELi1ELi3ELi3EE6updateER6tensorIfLi32ELi1ELi3ELi3EES3_
	.weak_definition	__ZN8AdaDeltaILi32ELi1ELi3ELi3EE6updateER6tensorIfLi32ELi1ELi3ELi3EES3_
	.p2align	2
__ZN8AdaDeltaILi32ELi1ELi3ELi3EE6updateER6tensorIfLi32ELi1ELi3ELi3EES3_: ; @_ZN8AdaDeltaILi32ELi1ELi3ELi3EE6updateER6tensorIfLi32ELi1ELi3ELi3EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	str	x2, [sp, #24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #32
	cset	w8, eq
	tbnz	w8, #0, LBB485_2
	b	LBB485_1
LBB485_1:
	adrp	x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGE
	add	x0, x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGEOFF
	adrp	x1, l_.str.117@PAGE
	add	x1, x1, l_.str.117@PAGEOFF
	mov	w2, #49
	adrp	x3, l_.str.118@PAGE
	add	x3, x3, l_.str.118@PAGEOFF
	bl	___assert_rtn
LBB485_2:
	b	LBB485_3
LBB485_3:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #4628]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_Ef
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #4628]
	fmov	s0, #1.00000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	fsub	s0, s0, s1
	ldr	x1, [sp, #24]
	ldr	x2, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE8addcmul_EfRS0_S1_
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #4632]
	add	x1, x0, #2312
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE3addEfRS0_
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #1156
	ldr	s0, [x8, #4632]
	add	x1, x8, #3468
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE3addEfRS0_
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x1, x8, #2312
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE4div_ERS0_
	ldr	x1, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_ERS0_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #1156
	ldr	s0, [x8, #4628]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_Ef
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #4628]
	fsub	s0, s0, s1
	add	x1, x8, #3468
	add	x2, x8, #3468
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE8addcmul_EfRS0_S1_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x0, [x29, #-16]
	ldr	s0, [x8, #4624]
	fneg	s0, s0
	add	x1, x8, #3468
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EE4add_EfRS0_
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi32ELi1ELi1ELi1EE6updateER6tensorIfLi32ELi1ELi1ELi1EES3_ ; -- Begin function _ZN8AdaDeltaILi32ELi1ELi1ELi1EE6updateER6tensorIfLi32ELi1ELi1ELi1EES3_
	.weak_definition	__ZN8AdaDeltaILi32ELi1ELi1ELi1EE6updateER6tensorIfLi32ELi1ELi1ELi1EES3_
	.p2align	2
__ZN8AdaDeltaILi32ELi1ELi1ELi1EE6updateER6tensorIfLi32ELi1ELi1ELi1EES3_: ; @_ZN8AdaDeltaILi32ELi1ELi1ELi1EE6updateER6tensorIfLi32ELi1ELi1ELi1EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	str	x2, [sp, #24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #32
	cset	w8, eq
	tbnz	w8, #0, LBB486_2
	b	LBB486_1
LBB486_1:
	adrp	x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGE
	add	x0, x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGEOFF
	adrp	x1, l_.str.117@PAGE
	add	x1, x1, l_.str.117@PAGEOFF
	mov	w2, #49
	adrp	x3, l_.str.118@PAGE
	add	x3, x3, l_.str.118@PAGEOFF
	bl	___assert_rtn
LBB486_2:
	b	LBB486_3
LBB486_3:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #532]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_Ef
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #532]
	fmov	s0, #1.00000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	fsub	s0, s0, s1
	ldr	x1, [sp, #24]
	ldr	x2, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #536]
	add	x1, x0, #264
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE3addEfRS0_
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #132
	ldr	s0, [x8, #536]
	add	x1, x8, #396
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE3addEfRS0_
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x1, x8, #264
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE4div_ERS0_
	ldr	x1, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_ERS0_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #132
	ldr	s0, [x8, #532]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_Ef
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #532]
	fsub	s0, s0, s1
	add	x1, x8, #396
	add	x2, x8, #396
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x0, [x29, #-16]
	ldr	s0, [x8, #528]
	fneg	s0, s0
	add	x1, x8, #396
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_Ef ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_Ef
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_Ef
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_Ef: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_Ef
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB487_2
	b	LBB487_1
LBB487_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #218
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB487_2:
	b	LBB487_3
LBB487_3:
	stur	wzr, [x29, #-28]
	b	LBB487_4
LBB487_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB487_6 Depth 2
                                        ;       Child Loop BB487_8 Depth 3
                                        ;         Child Loop BB487_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB487_19
	b	LBB487_5
LBB487_5:                               ;   in Loop: Header=BB487_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB487_6
LBB487_6:                               ;   Parent Loop BB487_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB487_8 Depth 3
                                        ;         Child Loop BB487_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB487_17
	b	LBB487_7
LBB487_7:                               ;   in Loop: Header=BB487_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB487_8
LBB487_8:                               ;   Parent Loop BB487_4 Depth=1
                                        ;     Parent Loop BB487_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB487_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB487_15
	b	LBB487_9
LBB487_9:                               ;   in Loop: Header=BB487_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB487_10
LBB487_10:                              ;   Parent Loop BB487_4 Depth=1
                                        ;     Parent Loop BB487_6 Depth=2
                                        ;       Parent Loop BB487_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB487_13
	b	LBB487_11
LBB487_11:                              ;   in Loop: Header=BB487_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB487_12
LBB487_12:                              ;   in Loop: Header=BB487_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB487_10
LBB487_13:                              ;   in Loop: Header=BB487_8 Depth=3
	b	LBB487_14
LBB487_14:                              ;   in Loop: Header=BB487_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB487_8
LBB487_15:                              ;   in Loop: Header=BB487_6 Depth=2
	b	LBB487_16
LBB487_16:                              ;   in Loop: Header=BB487_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB487_6
LBB487_17:                              ;   in Loop: Header=BB487_4 Depth=1
	b	LBB487_18
LBB487_18:                              ;   in Loop: Header=BB487_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB487_4
LBB487_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE8addcmul_EfRS0_S1_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE8addcmul_EfRS0_S1_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE8addcmul_EfRS0_S1_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE8addcmul_EfRS0_S1_: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE8addcmul_EfRS0_S1_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	stur	x2, [x29, #-32]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	str	x8, [sp, #40]
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB488_2
	b	LBB488_1
LBB488_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #290
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB488_2:
	b	LBB488_3
LBB488_3:
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB488_5
	b	LBB488_4
LBB488_4:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #291
	adrp	x3, l_.str.120@PAGE
	add	x3, x3, l_.str.120@PAGEOFF
	bl	___assert_rtn
LBB488_5:
	b	LBB488_6
LBB488_6:
	str	wzr, [sp, #36]
	b	LBB488_7
LBB488_7:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB488_9 Depth 2
                                        ;       Child Loop BB488_11 Depth 3
                                        ;         Child Loop BB488_13 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB488_22
	b	LBB488_8
LBB488_8:                               ;   in Loop: Header=BB488_7 Depth=1
	str	wzr, [sp, #32]
	b	LBB488_9
LBB488_9:                               ;   Parent Loop BB488_7 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB488_11 Depth 3
                                        ;         Child Loop BB488_13 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB488_20
	b	LBB488_10
LBB488_10:                              ;   in Loop: Header=BB488_9 Depth=2
	str	wzr, [sp, #28]
	b	LBB488_11
LBB488_11:                              ;   Parent Loop BB488_7 Depth=1
                                        ;     Parent Loop BB488_9 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB488_13 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB488_18
	b	LBB488_12
LBB488_12:                              ;   in Loop: Header=BB488_11 Depth=3
	str	wzr, [sp, #24]
	b	LBB488_13
LBB488_13:                              ;   Parent Loop BB488_7 Depth=1
                                        ;     Parent Loop BB488_9 Depth=2
                                        ;       Parent Loop BB488_11 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB488_16
	b	LBB488_14
LBB488_14:                              ;   in Loop: Header=BB488_13 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s1, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB488_15
LBB488_15:                              ;   in Loop: Header=BB488_13 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB488_13
LBB488_16:                              ;   in Loop: Header=BB488_11 Depth=3
	b	LBB488_17
LBB488_17:                              ;   in Loop: Header=BB488_11 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB488_11
LBB488_18:                              ;   in Loop: Header=BB488_9 Depth=2
	b	LBB488_19
LBB488_19:                              ;   in Loop: Header=BB488_9 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB488_9
LBB488_20:                              ;   in Loop: Header=BB488_7 Depth=1
	b	LBB488_21
LBB488_21:                              ;   in Loop: Header=BB488_7 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB488_7
LBB488_22:
	ldr	x0, [sp, #40]
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE3addEfRS0_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE3addEfRS0_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE3addEfRS0_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE3addEfRS0_: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE3addEfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB489_2
	b	LBB489_1
LBB489_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #309
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB489_2:
	b	LBB489_3
LBB489_3:
	str	wzr, [sp, #28]
	b	LBB489_4
LBB489_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB489_6 Depth 2
                                        ;       Child Loop BB489_8 Depth 3
                                        ;         Child Loop BB489_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB489_19
	b	LBB489_5
LBB489_5:                               ;   in Loop: Header=BB489_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB489_6
LBB489_6:                               ;   Parent Loop BB489_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB489_8 Depth 3
                                        ;         Child Loop BB489_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB489_17
	b	LBB489_7
LBB489_7:                               ;   in Loop: Header=BB489_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB489_8
LBB489_8:                               ;   Parent Loop BB489_4 Depth=1
                                        ;     Parent Loop BB489_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB489_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB489_15
	b	LBB489_9
LBB489_9:                               ;   in Loop: Header=BB489_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB489_10
LBB489_10:                              ;   Parent Loop BB489_4 Depth=1
                                        ;     Parent Loop BB489_6 Depth=2
                                        ;       Parent Loop BB489_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB489_13
	b	LBB489_11
LBB489_11:                              ;   in Loop: Header=BB489_10 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	ldur	s1, [x29, #-12]
	fadd	s0, s0, s1
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB489_12
LBB489_12:                              ;   in Loop: Header=BB489_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB489_10
LBB489_13:                              ;   in Loop: Header=BB489_8 Depth=3
	b	LBB489_14
LBB489_14:                              ;   in Loop: Header=BB489_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB489_8
LBB489_15:                              ;   in Loop: Header=BB489_6 Depth=2
	b	LBB489_16
LBB489_16:                              ;   in Loop: Header=BB489_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB489_6
LBB489_17:                              ;   in Loop: Header=BB489_4 Depth=1
	b	LBB489_18
LBB489_18:                              ;   in Loop: Header=BB489_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB489_4
LBB489_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE5sqrt_Ev ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE5sqrt_Ev
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE5sqrt_Ev
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE5sqrt_Ev: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE5sqrt_Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x8, [x29, #-16]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB490_2
	b	LBB490_1
LBB490_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #272
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB490_2:
	b	LBB490_3
LBB490_3:
	stur	wzr, [x29, #-20]
	b	LBB490_4
LBB490_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB490_6 Depth 2
                                        ;       Child Loop BB490_8 Depth 3
                                        ;         Child Loop BB490_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-20]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB490_19
	b	LBB490_5
LBB490_5:                               ;   in Loop: Header=BB490_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB490_6
LBB490_6:                               ;   Parent Loop BB490_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB490_8 Depth 3
                                        ;         Child Loop BB490_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB490_17
	b	LBB490_7
LBB490_7:                               ;   in Loop: Header=BB490_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB490_8
LBB490_8:                               ;   Parent Loop BB490_4 Depth=1
                                        ;     Parent Loop BB490_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB490_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB490_15
	b	LBB490_9
LBB490_9:                               ;   in Loop: Header=BB490_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB490_10
LBB490_10:                              ;   Parent Loop BB490_4 Depth=1
                                        ;     Parent Loop BB490_6 Depth=2
                                        ;       Parent Loop BB490_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB490_13
	b	LBB490_11
LBB490_11:                              ;   in Loop: Header=BB490_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	bl	__Z4sqrtB6v15007f
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB490_12
LBB490_12:                              ;   in Loop: Header=BB490_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB490_10
LBB490_13:                              ;   in Loop: Header=BB490_8 Depth=3
	b	LBB490_14
LBB490_14:                              ;   in Loop: Header=BB490_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB490_8
LBB490_15:                              ;   in Loop: Header=BB490_6 Depth=2
	b	LBB490_16
LBB490_16:                              ;   in Loop: Header=BB490_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB490_6
LBB490_17:                              ;   in Loop: Header=BB490_4 Depth=1
	b	LBB490_18
LBB490_18:                              ;   in Loop: Header=BB490_4 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1
	stur	w8, [x29, #-20]
	b	LBB490_4
LBB490_19:
	ldur	x0, [x29, #-16]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE4div_ERS0_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE4div_ERS0_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE4div_ERS0_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE4div_ERS0_: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE4div_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB491_2
	b	LBB491_1
LBB491_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #254
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB491_2:
	b	LBB491_3
LBB491_3:
	stur	wzr, [x29, #-28]
	b	LBB491_4
LBB491_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB491_6 Depth 2
                                        ;       Child Loop BB491_8 Depth 3
                                        ;         Child Loop BB491_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB491_19
	b	LBB491_5
LBB491_5:                               ;   in Loop: Header=BB491_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB491_6
LBB491_6:                               ;   Parent Loop BB491_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB491_8 Depth 3
                                        ;         Child Loop BB491_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB491_17
	b	LBB491_7
LBB491_7:                               ;   in Loop: Header=BB491_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB491_8
LBB491_8:                               ;   Parent Loop BB491_4 Depth=1
                                        ;     Parent Loop BB491_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB491_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB491_15
	b	LBB491_9
LBB491_9:                               ;   in Loop: Header=BB491_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB491_10
LBB491_10:                              ;   Parent Loop BB491_4 Depth=1
                                        ;     Parent Loop BB491_6 Depth=2
                                        ;       Parent Loop BB491_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB491_13
	b	LBB491_11
LBB491_11:                              ;   in Loop: Header=BB491_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fdiv	s0, s0, s1
	str	s0, [x0]
	b	LBB491_12
LBB491_12:                              ;   in Loop: Header=BB491_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB491_10
LBB491_13:                              ;   in Loop: Header=BB491_8 Depth=3
	b	LBB491_14
LBB491_14:                              ;   in Loop: Header=BB491_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB491_8
LBB491_15:                              ;   in Loop: Header=BB491_6 Depth=2
	b	LBB491_16
LBB491_16:                              ;   in Loop: Header=BB491_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB491_6
LBB491_17:                              ;   in Loop: Header=BB491_4 Depth=1
	b	LBB491_18
LBB491_18:                              ;   in Loop: Header=BB491_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB491_4
LBB491_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_ERS0_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_ERS0_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_ERS0_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_ERS0_: ; @_ZN6tensorIfLi32ELi1ELi3ELi3EE4mul_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB492_2
	b	LBB492_1
LBB492_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #236
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB492_2:
	b	LBB492_3
LBB492_3:
	stur	wzr, [x29, #-28]
	b	LBB492_4
LBB492_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB492_6 Depth 2
                                        ;       Child Loop BB492_8 Depth 3
                                        ;         Child Loop BB492_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB492_19
	b	LBB492_5
LBB492_5:                               ;   in Loop: Header=BB492_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB492_6
LBB492_6:                               ;   Parent Loop BB492_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB492_8 Depth 3
                                        ;         Child Loop BB492_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB492_17
	b	LBB492_7
LBB492_7:                               ;   in Loop: Header=BB492_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB492_8
LBB492_8:                               ;   Parent Loop BB492_4 Depth=1
                                        ;     Parent Loop BB492_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB492_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB492_15
	b	LBB492_9
LBB492_9:                               ;   in Loop: Header=BB492_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB492_10
LBB492_10:                              ;   Parent Loop BB492_4 Depth=1
                                        ;     Parent Loop BB492_6 Depth=2
                                        ;       Parent Loop BB492_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB492_13
	b	LBB492_11
LBB492_11:                              ;   in Loop: Header=BB492_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi3ELi3EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB492_12
LBB492_12:                              ;   in Loop: Header=BB492_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB492_10
LBB492_13:                              ;   in Loop: Header=BB492_8 Depth=3
	b	LBB492_14
LBB492_14:                              ;   in Loop: Header=BB492_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB492_8
LBB492_15:                              ;   in Loop: Header=BB492_6 Depth=2
	b	LBB492_16
LBB492_16:                              ;   in Loop: Header=BB492_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB492_6
LBB492_17:                              ;   in Loop: Header=BB492_4 Depth=1
	b	LBB492_18
LBB492_18:                              ;   in Loop: Header=BB492_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB492_4
LBB492_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_Ef ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_Ef
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_Ef
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_Ef: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_Ef
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB493_2
	b	LBB493_1
LBB493_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #218
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB493_2:
	b	LBB493_3
LBB493_3:
	stur	wzr, [x29, #-28]
	b	LBB493_4
LBB493_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB493_6 Depth 2
                                        ;       Child Loop BB493_8 Depth 3
                                        ;         Child Loop BB493_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB493_19
	b	LBB493_5
LBB493_5:                               ;   in Loop: Header=BB493_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB493_6
LBB493_6:                               ;   Parent Loop BB493_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB493_8 Depth 3
                                        ;         Child Loop BB493_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB493_17
	b	LBB493_7
LBB493_7:                               ;   in Loop: Header=BB493_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB493_8
LBB493_8:                               ;   Parent Loop BB493_4 Depth=1
                                        ;     Parent Loop BB493_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB493_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB493_15
	b	LBB493_9
LBB493_9:                               ;   in Loop: Header=BB493_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB493_10
LBB493_10:                              ;   Parent Loop BB493_4 Depth=1
                                        ;     Parent Loop BB493_6 Depth=2
                                        ;       Parent Loop BB493_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB493_13
	b	LBB493_11
LBB493_11:                              ;   in Loop: Header=BB493_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB493_12
LBB493_12:                              ;   in Loop: Header=BB493_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB493_10
LBB493_13:                              ;   in Loop: Header=BB493_8 Depth=3
	b	LBB493_14
LBB493_14:                              ;   in Loop: Header=BB493_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB493_8
LBB493_15:                              ;   in Loop: Header=BB493_6 Depth=2
	b	LBB493_16
LBB493_16:                              ;   in Loop: Header=BB493_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB493_6
LBB493_17:                              ;   in Loop: Header=BB493_4 Depth=1
	b	LBB493_18
LBB493_18:                              ;   in Loop: Header=BB493_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB493_4
LBB493_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE8addcmul_EfRS0_S1_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE8addcmul_EfRS0_S1_: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	stur	x2, [x29, #-32]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	str	x8, [sp, #40]
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB494_2
	b	LBB494_1
LBB494_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #290
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB494_2:
	b	LBB494_3
LBB494_3:
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB494_5
	b	LBB494_4
LBB494_4:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #291
	adrp	x3, l_.str.120@PAGE
	add	x3, x3, l_.str.120@PAGEOFF
	bl	___assert_rtn
LBB494_5:
	b	LBB494_6
LBB494_6:
	str	wzr, [sp, #36]
	b	LBB494_7
LBB494_7:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB494_9 Depth 2
                                        ;       Child Loop BB494_11 Depth 3
                                        ;         Child Loop BB494_13 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB494_22
	b	LBB494_8
LBB494_8:                               ;   in Loop: Header=BB494_7 Depth=1
	str	wzr, [sp, #32]
	b	LBB494_9
LBB494_9:                               ;   Parent Loop BB494_7 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB494_11 Depth 3
                                        ;         Child Loop BB494_13 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB494_20
	b	LBB494_10
LBB494_10:                              ;   in Loop: Header=BB494_9 Depth=2
	str	wzr, [sp, #28]
	b	LBB494_11
LBB494_11:                              ;   Parent Loop BB494_7 Depth=1
                                        ;     Parent Loop BB494_9 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB494_13 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB494_18
	b	LBB494_12
LBB494_12:                              ;   in Loop: Header=BB494_11 Depth=3
	str	wzr, [sp, #24]
	b	LBB494_13
LBB494_13:                              ;   Parent Loop BB494_7 Depth=1
                                        ;     Parent Loop BB494_9 Depth=2
                                        ;       Parent Loop BB494_11 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB494_16
	b	LBB494_14
LBB494_14:                              ;   in Loop: Header=BB494_13 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB494_15
LBB494_15:                              ;   in Loop: Header=BB494_13 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB494_13
LBB494_16:                              ;   in Loop: Header=BB494_11 Depth=3
	b	LBB494_17
LBB494_17:                              ;   in Loop: Header=BB494_11 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB494_11
LBB494_18:                              ;   in Loop: Header=BB494_9 Depth=2
	b	LBB494_19
LBB494_19:                              ;   in Loop: Header=BB494_9 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB494_9
LBB494_20:                              ;   in Loop: Header=BB494_7 Depth=1
	b	LBB494_21
LBB494_21:                              ;   in Loop: Header=BB494_7 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB494_7
LBB494_22:
	ldr	x0, [sp, #40]
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE3addEfRS0_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE3addEfRS0_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE3addEfRS0_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE3addEfRS0_: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE3addEfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB495_2
	b	LBB495_1
LBB495_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #309
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB495_2:
	b	LBB495_3
LBB495_3:
	str	wzr, [sp, #28]
	b	LBB495_4
LBB495_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB495_6 Depth 2
                                        ;       Child Loop BB495_8 Depth 3
                                        ;         Child Loop BB495_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB495_19
	b	LBB495_5
LBB495_5:                               ;   in Loop: Header=BB495_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB495_6
LBB495_6:                               ;   Parent Loop BB495_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB495_8 Depth 3
                                        ;         Child Loop BB495_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB495_17
	b	LBB495_7
LBB495_7:                               ;   in Loop: Header=BB495_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB495_8
LBB495_8:                               ;   Parent Loop BB495_4 Depth=1
                                        ;     Parent Loop BB495_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB495_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB495_15
	b	LBB495_9
LBB495_9:                               ;   in Loop: Header=BB495_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB495_10
LBB495_10:                              ;   Parent Loop BB495_4 Depth=1
                                        ;     Parent Loop BB495_6 Depth=2
                                        ;       Parent Loop BB495_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB495_13
	b	LBB495_11
LBB495_11:                              ;   in Loop: Header=BB495_10 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	ldur	s1, [x29, #-12]
	fadd	s0, s0, s1
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB495_12
LBB495_12:                              ;   in Loop: Header=BB495_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB495_10
LBB495_13:                              ;   in Loop: Header=BB495_8 Depth=3
	b	LBB495_14
LBB495_14:                              ;   in Loop: Header=BB495_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB495_8
LBB495_15:                              ;   in Loop: Header=BB495_6 Depth=2
	b	LBB495_16
LBB495_16:                              ;   in Loop: Header=BB495_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB495_6
LBB495_17:                              ;   in Loop: Header=BB495_4 Depth=1
	b	LBB495_18
LBB495_18:                              ;   in Loop: Header=BB495_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB495_4
LBB495_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE5sqrt_Ev ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE5sqrt_Ev
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE5sqrt_Ev
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE5sqrt_Ev: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE5sqrt_Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x8, [x29, #-16]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB496_2
	b	LBB496_1
LBB496_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #272
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB496_2:
	b	LBB496_3
LBB496_3:
	stur	wzr, [x29, #-20]
	b	LBB496_4
LBB496_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB496_6 Depth 2
                                        ;       Child Loop BB496_8 Depth 3
                                        ;         Child Loop BB496_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-20]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB496_19
	b	LBB496_5
LBB496_5:                               ;   in Loop: Header=BB496_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB496_6
LBB496_6:                               ;   Parent Loop BB496_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB496_8 Depth 3
                                        ;         Child Loop BB496_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB496_17
	b	LBB496_7
LBB496_7:                               ;   in Loop: Header=BB496_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB496_8
LBB496_8:                               ;   Parent Loop BB496_4 Depth=1
                                        ;     Parent Loop BB496_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB496_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB496_15
	b	LBB496_9
LBB496_9:                               ;   in Loop: Header=BB496_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB496_10
LBB496_10:                              ;   Parent Loop BB496_4 Depth=1
                                        ;     Parent Loop BB496_6 Depth=2
                                        ;       Parent Loop BB496_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB496_13
	b	LBB496_11
LBB496_11:                              ;   in Loop: Header=BB496_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	bl	__Z4sqrtB6v15007f
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB496_12
LBB496_12:                              ;   in Loop: Header=BB496_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB496_10
LBB496_13:                              ;   in Loop: Header=BB496_8 Depth=3
	b	LBB496_14
LBB496_14:                              ;   in Loop: Header=BB496_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB496_8
LBB496_15:                              ;   in Loop: Header=BB496_6 Depth=2
	b	LBB496_16
LBB496_16:                              ;   in Loop: Header=BB496_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB496_6
LBB496_17:                              ;   in Loop: Header=BB496_4 Depth=1
	b	LBB496_18
LBB496_18:                              ;   in Loop: Header=BB496_4 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1
	stur	w8, [x29, #-20]
	b	LBB496_4
LBB496_19:
	ldur	x0, [x29, #-16]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE4div_ERS0_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE4div_ERS0_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE4div_ERS0_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE4div_ERS0_: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE4div_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB497_2
	b	LBB497_1
LBB497_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #254
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB497_2:
	b	LBB497_3
LBB497_3:
	stur	wzr, [x29, #-28]
	b	LBB497_4
LBB497_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB497_6 Depth 2
                                        ;       Child Loop BB497_8 Depth 3
                                        ;         Child Loop BB497_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB497_19
	b	LBB497_5
LBB497_5:                               ;   in Loop: Header=BB497_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB497_6
LBB497_6:                               ;   Parent Loop BB497_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB497_8 Depth 3
                                        ;         Child Loop BB497_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB497_17
	b	LBB497_7
LBB497_7:                               ;   in Loop: Header=BB497_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB497_8
LBB497_8:                               ;   Parent Loop BB497_4 Depth=1
                                        ;     Parent Loop BB497_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB497_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB497_15
	b	LBB497_9
LBB497_9:                               ;   in Loop: Header=BB497_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB497_10
LBB497_10:                              ;   Parent Loop BB497_4 Depth=1
                                        ;     Parent Loop BB497_6 Depth=2
                                        ;       Parent Loop BB497_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB497_13
	b	LBB497_11
LBB497_11:                              ;   in Loop: Header=BB497_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fdiv	s0, s0, s1
	str	s0, [x0]
	b	LBB497_12
LBB497_12:                              ;   in Loop: Header=BB497_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB497_10
LBB497_13:                              ;   in Loop: Header=BB497_8 Depth=3
	b	LBB497_14
LBB497_14:                              ;   in Loop: Header=BB497_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB497_8
LBB497_15:                              ;   in Loop: Header=BB497_6 Depth=2
	b	LBB497_16
LBB497_16:                              ;   in Loop: Header=BB497_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB497_6
LBB497_17:                              ;   in Loop: Header=BB497_4 Depth=1
	b	LBB497_18
LBB497_18:                              ;   in Loop: Header=BB497_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB497_4
LBB497_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_ERS0_ ; -- Begin function _ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_ERS0_
	.weak_definition	__ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_ERS0_
	.p2align	2
__ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_ERS0_: ; @_ZN6tensorIfLi32ELi1ELi1ELi1EE4mul_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB498_2
	b	LBB498_1
LBB498_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #236
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB498_2:
	b	LBB498_3
LBB498_3:
	stur	wzr, [x29, #-28]
	b	LBB498_4
LBB498_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB498_6 Depth 2
                                        ;       Child Loop BB498_8 Depth 3
                                        ;         Child Loop BB498_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB498_19
	b	LBB498_5
LBB498_5:                               ;   in Loop: Header=BB498_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB498_6
LBB498_6:                               ;   Parent Loop BB498_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB498_8 Depth 3
                                        ;         Child Loop BB498_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB498_17
	b	LBB498_7
LBB498_7:                               ;   in Loop: Header=BB498_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB498_8
LBB498_8:                               ;   Parent Loop BB498_4 Depth=1
                                        ;     Parent Loop BB498_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB498_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB498_15
	b	LBB498_9
LBB498_9:                               ;   in Loop: Header=BB498_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB498_10
LBB498_10:                              ;   Parent Loop BB498_4 Depth=1
                                        ;     Parent Loop BB498_6 Depth=2
                                        ;       Parent Loop BB498_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB498_13
	b	LBB498_11
LBB498_11:                              ;   in Loop: Header=BB498_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi32ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB498_12
LBB498_12:                              ;   in Loop: Header=BB498_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB498_10
LBB498_13:                              ;   in Loop: Header=BB498_8 Depth=3
	b	LBB498_14
LBB498_14:                              ;   in Loop: Header=BB498_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB498_8
LBB498_15:                              ;   in Loop: Header=BB498_6 Depth=2
	b	LBB498_16
LBB498_16:                              ;   in Loop: Header=BB498_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB498_6
LBB498_17:                              ;   in Loop: Header=BB498_4 Depth=1
	b	LBB498_18
LBB498_18:                              ;   in Loop: Header=BB498_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB498_4
LBB498_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15update_cpu_baseEv ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15update_cpu_baseEv
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15update_cpu_baseEv
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15update_cpu_baseEv: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE15update_cpu_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	bl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE11update_baseEv
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16update_cuda_baseEv ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16update_cuda_baseEv
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16update_cuda_baseEv
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16update_cuda_baseEv: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE16update_cuda_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.125@PAGE
	add	x0, x0, l_.str.125@PAGEOFF
	mov	w1, #140
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE11update_baseEv ; -- Begin function _ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE11update_baseEv
	.weak_definition	__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE11update_baseEv
	.p2align	2
__ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE11update_baseEv: ; @_ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE11update_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #49824
	movk	x9, #230, lsl #16
	add	x0, x8, x9
	mov	x9, x8
	add	x1, x9, #136
	mov	x9, #8596
	movk	x9, #145, lsl #16
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi64ELi32ELi3ELi3EE6updateER6tensorIfLi64ELi32ELi3ELi3EES3_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #17084
	movk	x9, #235, lsl #16
	add	x0, x8, x9
	mov	x9, #8332
	movk	x9, #1, lsl #16
	add	x1, x8, x9
	mov	x9, #16792
	movk	x9, #146, lsl #16
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi64ELi1ELi1ELi1EE6updateER6tensorIfLi64ELi1ELi1ELi1EES3_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi64ELi32ELi3ELi3EE6updateER6tensorIfLi64ELi32ELi3ELi3EES3_ ; -- Begin function _ZN8AdaDeltaILi64ELi32ELi3ELi3EE6updateER6tensorIfLi64ELi32ELi3ELi3EES3_
	.weak_definition	__ZN8AdaDeltaILi64ELi32ELi3ELi3EE6updateER6tensorIfLi64ELi32ELi3ELi3EES3_
	.p2align	2
__ZN8AdaDeltaILi64ELi32ELi3ELi3EE6updateER6tensorIfLi64ELi32ELi3ELi3EES3_: ; @_ZN8AdaDeltaILi64ELi32ELi3ELi3EE6updateER6tensorIfLi64ELi32ELi3ELi3EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	ldur	x8, [x29, #-8]
	stur	x8, [x29, #-32]                 ; 8-byte Folded Spill
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #64
	cset	w8, eq
	tbnz	w8, #0, LBB502_2
	b	LBB502_1
LBB502_1:
	adrp	x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGE
	add	x0, x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGEOFF
	adrp	x1, l_.str.117@PAGE
	add	x1, x1, l_.str.117@PAGEOFF
	mov	w2, #49
	adrp	x3, l_.str.118@PAGE
	add	x3, x3, l_.str.118@PAGEOFF
	bl	___assert_rtn
LBB502_2:
	b	LBB502_3
LBB502_3:
	ldur	x0, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x8, #32788
	movk	x8, #4, lsl #16
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldr	s0, [x0, x8]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_Ef
	ldr	x9, [sp, #24]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	ldr	s1, [x8, x9]
	fmov	s0, #1.00000000
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	fsub	s0, s0, s1
	ldur	x1, [x29, #-24]
	ldur	x2, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE8addcmul_EfRS0_S1_
	ldur	x0, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x8, #32792
	movk	x8, #4, lsl #16
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	s0, [x0, x8]
	mov	x9, #16392
	movk	x9, #2, lsl #16
	str	x9, [sp, #8]                    ; 8-byte Folded Spill
	mov	x8, x0
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE3addEfRS0_
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE5sqrt_Ev
	ldr	x9, [sp]                        ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x11, #8196
	movk	x11, #1, lsl #16
	str	x11, [sp, #16]                  ; 8-byte Folded Spill
	mov	x10, x8
	add	x0, x10, x11
	ldr	s0, [x8, x9]
	mov	x9, #24588
	movk	x9, #3, lsl #16
	str	x9, [sp, #40]                   ; 8-byte Folded Spill
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE3addEfRS0_
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE5sqrt_Ev
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE4div_ERS0_
	ldur	x1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_ERS0_
	ldr	x11, [sp, #16]                  ; 8-byte Folded Reload
	ldr	x9, [sp, #24]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x10, x8
	add	x0, x10, x11
	ldr	s0, [x8, x9]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_Ef
	ldr	x10, [sp, #24]                  ; 8-byte Folded Reload
	ldr	s0, [sp, #36]                   ; 4-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldr	s1, [x8, x10]
	fsub	s0, s0, s1
	mov	x10, x8
	add	x1, x10, x9
	add	x2, x8, x9
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE8addcmul_EfRS0_S1_
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldur	x0, [x29, #-16]
	mov	x10, #32784
	movk	x10, #4, lsl #16
	ldr	s0, [x8, x10]
	fneg	s0, s0
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EE4add_EfRS0_
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi64ELi1ELi1ELi1EE6updateER6tensorIfLi64ELi1ELi1ELi1EES3_ ; -- Begin function _ZN8AdaDeltaILi64ELi1ELi1ELi1EE6updateER6tensorIfLi64ELi1ELi1ELi1EES3_
	.weak_definition	__ZN8AdaDeltaILi64ELi1ELi1ELi1EE6updateER6tensorIfLi64ELi1ELi1ELi1EES3_
	.p2align	2
__ZN8AdaDeltaILi64ELi1ELi1ELi1EE6updateER6tensorIfLi64ELi1ELi1ELi1EES3_: ; @_ZN8AdaDeltaILi64ELi1ELi1ELi1EE6updateER6tensorIfLi64ELi1ELi1ELi1EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	str	x2, [sp, #24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #64
	cset	w8, eq
	tbnz	w8, #0, LBB503_2
	b	LBB503_1
LBB503_1:
	adrp	x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGE
	add	x0, x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGEOFF
	adrp	x1, l_.str.117@PAGE
	add	x1, x1, l_.str.117@PAGEOFF
	mov	w2, #49
	adrp	x3, l_.str.118@PAGE
	add	x3, x3, l_.str.118@PAGEOFF
	bl	___assert_rtn
LBB503_2:
	b	LBB503_3
LBB503_3:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #1044]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_Ef
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #1044]
	fmov	s0, #1.00000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	fsub	s0, s0, s1
	ldr	x1, [sp, #24]
	ldr	x2, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #1048]
	add	x1, x0, #520
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3addEfRS0_
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #260
	ldr	s0, [x8, #1048]
	add	x1, x8, #780
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3addEfRS0_
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x1, x8, #520
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE4div_ERS0_
	ldr	x1, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_ERS0_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #260
	ldr	s0, [x8, #1044]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_Ef
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #1044]
	fsub	s0, s0, s1
	add	x1, x8, #780
	add	x2, x8, #780
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x0, [x29, #-16]
	ldr	s0, [x8, #1040]
	fneg	s0, s0
	add	x1, x8, #780
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_Ef ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_Ef
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_Ef
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_Ef: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_Ef
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB504_2
	b	LBB504_1
LBB504_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #218
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB504_2:
	b	LBB504_3
LBB504_3:
	stur	wzr, [x29, #-28]
	b	LBB504_4
LBB504_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB504_6 Depth 2
                                        ;       Child Loop BB504_8 Depth 3
                                        ;         Child Loop BB504_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB504_19
	b	LBB504_5
LBB504_5:                               ;   in Loop: Header=BB504_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB504_6
LBB504_6:                               ;   Parent Loop BB504_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB504_8 Depth 3
                                        ;         Child Loop BB504_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB504_17
	b	LBB504_7
LBB504_7:                               ;   in Loop: Header=BB504_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB504_8
LBB504_8:                               ;   Parent Loop BB504_4 Depth=1
                                        ;     Parent Loop BB504_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB504_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB504_15
	b	LBB504_9
LBB504_9:                               ;   in Loop: Header=BB504_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB504_10
LBB504_10:                              ;   Parent Loop BB504_4 Depth=1
                                        ;     Parent Loop BB504_6 Depth=2
                                        ;       Parent Loop BB504_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB504_13
	b	LBB504_11
LBB504_11:                              ;   in Loop: Header=BB504_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB504_12
LBB504_12:                              ;   in Loop: Header=BB504_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB504_10
LBB504_13:                              ;   in Loop: Header=BB504_8 Depth=3
	b	LBB504_14
LBB504_14:                              ;   in Loop: Header=BB504_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB504_8
LBB504_15:                              ;   in Loop: Header=BB504_6 Depth=2
	b	LBB504_16
LBB504_16:                              ;   in Loop: Header=BB504_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB504_6
LBB504_17:                              ;   in Loop: Header=BB504_4 Depth=1
	b	LBB504_18
LBB504_18:                              ;   in Loop: Header=BB504_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB504_4
LBB504_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE8addcmul_EfRS0_S1_ ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE8addcmul_EfRS0_S1_
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE8addcmul_EfRS0_S1_
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE8addcmul_EfRS0_S1_: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE8addcmul_EfRS0_S1_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	stur	x2, [x29, #-32]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	str	x8, [sp, #40]
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB505_2
	b	LBB505_1
LBB505_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #290
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB505_2:
	b	LBB505_3
LBB505_3:
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB505_5
	b	LBB505_4
LBB505_4:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #291
	adrp	x3, l_.str.120@PAGE
	add	x3, x3, l_.str.120@PAGEOFF
	bl	___assert_rtn
LBB505_5:
	b	LBB505_6
LBB505_6:
	str	wzr, [sp, #36]
	b	LBB505_7
LBB505_7:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB505_9 Depth 2
                                        ;       Child Loop BB505_11 Depth 3
                                        ;         Child Loop BB505_13 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB505_22
	b	LBB505_8
LBB505_8:                               ;   in Loop: Header=BB505_7 Depth=1
	str	wzr, [sp, #32]
	b	LBB505_9
LBB505_9:                               ;   Parent Loop BB505_7 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB505_11 Depth 3
                                        ;         Child Loop BB505_13 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB505_20
	b	LBB505_10
LBB505_10:                              ;   in Loop: Header=BB505_9 Depth=2
	str	wzr, [sp, #28]
	b	LBB505_11
LBB505_11:                              ;   Parent Loop BB505_7 Depth=1
                                        ;     Parent Loop BB505_9 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB505_13 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB505_18
	b	LBB505_12
LBB505_12:                              ;   in Loop: Header=BB505_11 Depth=3
	str	wzr, [sp, #24]
	b	LBB505_13
LBB505_13:                              ;   Parent Loop BB505_7 Depth=1
                                        ;     Parent Loop BB505_9 Depth=2
                                        ;       Parent Loop BB505_11 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB505_16
	b	LBB505_14
LBB505_14:                              ;   in Loop: Header=BB505_13 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s1, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB505_15
LBB505_15:                              ;   in Loop: Header=BB505_13 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB505_13
LBB505_16:                              ;   in Loop: Header=BB505_11 Depth=3
	b	LBB505_17
LBB505_17:                              ;   in Loop: Header=BB505_11 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB505_11
LBB505_18:                              ;   in Loop: Header=BB505_9 Depth=2
	b	LBB505_19
LBB505_19:                              ;   in Loop: Header=BB505_9 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB505_9
LBB505_20:                              ;   in Loop: Header=BB505_7 Depth=1
	b	LBB505_21
LBB505_21:                              ;   in Loop: Header=BB505_7 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB505_7
LBB505_22:
	ldr	x0, [sp, #40]
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE3addEfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE3addEfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE3addEfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE3addEfRS0_: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE3addEfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB506_2
	b	LBB506_1
LBB506_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #309
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB506_2:
	b	LBB506_3
LBB506_3:
	str	wzr, [sp, #28]
	b	LBB506_4
LBB506_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB506_6 Depth 2
                                        ;       Child Loop BB506_8 Depth 3
                                        ;         Child Loop BB506_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB506_19
	b	LBB506_5
LBB506_5:                               ;   in Loop: Header=BB506_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB506_6
LBB506_6:                               ;   Parent Loop BB506_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB506_8 Depth 3
                                        ;         Child Loop BB506_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB506_17
	b	LBB506_7
LBB506_7:                               ;   in Loop: Header=BB506_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB506_8
LBB506_8:                               ;   Parent Loop BB506_4 Depth=1
                                        ;     Parent Loop BB506_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB506_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB506_15
	b	LBB506_9
LBB506_9:                               ;   in Loop: Header=BB506_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB506_10
LBB506_10:                              ;   Parent Loop BB506_4 Depth=1
                                        ;     Parent Loop BB506_6 Depth=2
                                        ;       Parent Loop BB506_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB506_13
	b	LBB506_11
LBB506_11:                              ;   in Loop: Header=BB506_10 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	ldur	s1, [x29, #-12]
	fadd	s0, s0, s1
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB506_12
LBB506_12:                              ;   in Loop: Header=BB506_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB506_10
LBB506_13:                              ;   in Loop: Header=BB506_8 Depth=3
	b	LBB506_14
LBB506_14:                              ;   in Loop: Header=BB506_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB506_8
LBB506_15:                              ;   in Loop: Header=BB506_6 Depth=2
	b	LBB506_16
LBB506_16:                              ;   in Loop: Header=BB506_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB506_6
LBB506_17:                              ;   in Loop: Header=BB506_4 Depth=1
	b	LBB506_18
LBB506_18:                              ;   in Loop: Header=BB506_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB506_4
LBB506_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE5sqrt_Ev ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE5sqrt_Ev
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE5sqrt_Ev
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE5sqrt_Ev: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE5sqrt_Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x8, [x29, #-16]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB507_2
	b	LBB507_1
LBB507_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #272
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB507_2:
	b	LBB507_3
LBB507_3:
	stur	wzr, [x29, #-20]
	b	LBB507_4
LBB507_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB507_6 Depth 2
                                        ;       Child Loop BB507_8 Depth 3
                                        ;         Child Loop BB507_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-20]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB507_19
	b	LBB507_5
LBB507_5:                               ;   in Loop: Header=BB507_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB507_6
LBB507_6:                               ;   Parent Loop BB507_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB507_8 Depth 3
                                        ;         Child Loop BB507_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB507_17
	b	LBB507_7
LBB507_7:                               ;   in Loop: Header=BB507_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB507_8
LBB507_8:                               ;   Parent Loop BB507_4 Depth=1
                                        ;     Parent Loop BB507_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB507_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB507_15
	b	LBB507_9
LBB507_9:                               ;   in Loop: Header=BB507_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB507_10
LBB507_10:                              ;   Parent Loop BB507_4 Depth=1
                                        ;     Parent Loop BB507_6 Depth=2
                                        ;       Parent Loop BB507_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB507_13
	b	LBB507_11
LBB507_11:                              ;   in Loop: Header=BB507_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	bl	__Z4sqrtB6v15007f
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB507_12
LBB507_12:                              ;   in Loop: Header=BB507_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB507_10
LBB507_13:                              ;   in Loop: Header=BB507_8 Depth=3
	b	LBB507_14
LBB507_14:                              ;   in Loop: Header=BB507_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB507_8
LBB507_15:                              ;   in Loop: Header=BB507_6 Depth=2
	b	LBB507_16
LBB507_16:                              ;   in Loop: Header=BB507_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB507_6
LBB507_17:                              ;   in Loop: Header=BB507_4 Depth=1
	b	LBB507_18
LBB507_18:                              ;   in Loop: Header=BB507_4 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1
	stur	w8, [x29, #-20]
	b	LBB507_4
LBB507_19:
	ldur	x0, [x29, #-16]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE4div_ERS0_ ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE4div_ERS0_
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE4div_ERS0_
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE4div_ERS0_: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE4div_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB508_2
	b	LBB508_1
LBB508_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #254
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB508_2:
	b	LBB508_3
LBB508_3:
	stur	wzr, [x29, #-28]
	b	LBB508_4
LBB508_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB508_6 Depth 2
                                        ;       Child Loop BB508_8 Depth 3
                                        ;         Child Loop BB508_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB508_19
	b	LBB508_5
LBB508_5:                               ;   in Loop: Header=BB508_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB508_6
LBB508_6:                               ;   Parent Loop BB508_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB508_8 Depth 3
                                        ;         Child Loop BB508_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB508_17
	b	LBB508_7
LBB508_7:                               ;   in Loop: Header=BB508_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB508_8
LBB508_8:                               ;   Parent Loop BB508_4 Depth=1
                                        ;     Parent Loop BB508_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB508_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB508_15
	b	LBB508_9
LBB508_9:                               ;   in Loop: Header=BB508_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB508_10
LBB508_10:                              ;   Parent Loop BB508_4 Depth=1
                                        ;     Parent Loop BB508_6 Depth=2
                                        ;       Parent Loop BB508_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB508_13
	b	LBB508_11
LBB508_11:                              ;   in Loop: Header=BB508_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fdiv	s0, s0, s1
	str	s0, [x0]
	b	LBB508_12
LBB508_12:                              ;   in Loop: Header=BB508_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB508_10
LBB508_13:                              ;   in Loop: Header=BB508_8 Depth=3
	b	LBB508_14
LBB508_14:                              ;   in Loop: Header=BB508_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB508_8
LBB508_15:                              ;   in Loop: Header=BB508_6 Depth=2
	b	LBB508_16
LBB508_16:                              ;   in Loop: Header=BB508_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB508_6
LBB508_17:                              ;   in Loop: Header=BB508_4 Depth=1
	b	LBB508_18
LBB508_18:                              ;   in Loop: Header=BB508_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB508_4
LBB508_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_ERS0_ ; -- Begin function _ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_ERS0_
	.weak_definition	__ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_ERS0_
	.p2align	2
__ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_ERS0_: ; @_ZN6tensorIfLi64ELi32ELi3ELi3EE4mul_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB509_2
	b	LBB509_1
LBB509_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #236
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB509_2:
	b	LBB509_3
LBB509_3:
	stur	wzr, [x29, #-28]
	b	LBB509_4
LBB509_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB509_6 Depth 2
                                        ;       Child Loop BB509_8 Depth 3
                                        ;         Child Loop BB509_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB509_19
	b	LBB509_5
LBB509_5:                               ;   in Loop: Header=BB509_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB509_6
LBB509_6:                               ;   Parent Loop BB509_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB509_8 Depth 3
                                        ;         Child Loop BB509_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #32
	cset	w8, ge
	tbnz	w8, #0, LBB509_17
	b	LBB509_7
LBB509_7:                               ;   in Loop: Header=BB509_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB509_8
LBB509_8:                               ;   Parent Loop BB509_4 Depth=1
                                        ;     Parent Loop BB509_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB509_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB509_15
	b	LBB509_9
LBB509_9:                               ;   in Loop: Header=BB509_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB509_10
LBB509_10:                              ;   Parent Loop BB509_4 Depth=1
                                        ;     Parent Loop BB509_6 Depth=2
                                        ;       Parent Loop BB509_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #3
	cset	w8, ge
	tbnz	w8, #0, LBB509_13
	b	LBB509_11
LBB509_11:                              ;   in Loop: Header=BB509_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi32ELi3ELi3EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB509_12
LBB509_12:                              ;   in Loop: Header=BB509_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB509_10
LBB509_13:                              ;   in Loop: Header=BB509_8 Depth=3
	b	LBB509_14
LBB509_14:                              ;   in Loop: Header=BB509_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB509_8
LBB509_15:                              ;   in Loop: Header=BB509_6 Depth=2
	b	LBB509_16
LBB509_16:                              ;   in Loop: Header=BB509_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB509_6
LBB509_17:                              ;   in Loop: Header=BB509_4 Depth=1
	b	LBB509_18
LBB509_18:                              ;   in Loop: Header=BB509_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB509_4
LBB509_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_Ef ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_Ef
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_Ef
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_Ef: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_Ef
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB510_2
	b	LBB510_1
LBB510_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #218
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB510_2:
	b	LBB510_3
LBB510_3:
	stur	wzr, [x29, #-28]
	b	LBB510_4
LBB510_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB510_6 Depth 2
                                        ;       Child Loop BB510_8 Depth 3
                                        ;         Child Loop BB510_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB510_19
	b	LBB510_5
LBB510_5:                               ;   in Loop: Header=BB510_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB510_6
LBB510_6:                               ;   Parent Loop BB510_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB510_8 Depth 3
                                        ;         Child Loop BB510_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB510_17
	b	LBB510_7
LBB510_7:                               ;   in Loop: Header=BB510_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB510_8
LBB510_8:                               ;   Parent Loop BB510_4 Depth=1
                                        ;     Parent Loop BB510_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB510_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB510_15
	b	LBB510_9
LBB510_9:                               ;   in Loop: Header=BB510_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB510_10
LBB510_10:                              ;   Parent Loop BB510_4 Depth=1
                                        ;     Parent Loop BB510_6 Depth=2
                                        ;       Parent Loop BB510_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB510_13
	b	LBB510_11
LBB510_11:                              ;   in Loop: Header=BB510_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB510_12
LBB510_12:                              ;   in Loop: Header=BB510_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB510_10
LBB510_13:                              ;   in Loop: Header=BB510_8 Depth=3
	b	LBB510_14
LBB510_14:                              ;   in Loop: Header=BB510_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB510_8
LBB510_15:                              ;   in Loop: Header=BB510_6 Depth=2
	b	LBB510_16
LBB510_16:                              ;   in Loop: Header=BB510_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB510_6
LBB510_17:                              ;   in Loop: Header=BB510_4 Depth=1
	b	LBB510_18
LBB510_18:                              ;   in Loop: Header=BB510_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB510_4
LBB510_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE8addcmul_EfRS0_S1_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE8addcmul_EfRS0_S1_: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	stur	x2, [x29, #-32]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	str	x8, [sp, #40]
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB511_2
	b	LBB511_1
LBB511_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #290
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB511_2:
	b	LBB511_3
LBB511_3:
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB511_5
	b	LBB511_4
LBB511_4:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #291
	adrp	x3, l_.str.120@PAGE
	add	x3, x3, l_.str.120@PAGEOFF
	bl	___assert_rtn
LBB511_5:
	b	LBB511_6
LBB511_6:
	str	wzr, [sp, #36]
	b	LBB511_7
LBB511_7:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB511_9 Depth 2
                                        ;       Child Loop BB511_11 Depth 3
                                        ;         Child Loop BB511_13 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB511_22
	b	LBB511_8
LBB511_8:                               ;   in Loop: Header=BB511_7 Depth=1
	str	wzr, [sp, #32]
	b	LBB511_9
LBB511_9:                               ;   Parent Loop BB511_7 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB511_11 Depth 3
                                        ;         Child Loop BB511_13 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB511_20
	b	LBB511_10
LBB511_10:                              ;   in Loop: Header=BB511_9 Depth=2
	str	wzr, [sp, #28]
	b	LBB511_11
LBB511_11:                              ;   Parent Loop BB511_7 Depth=1
                                        ;     Parent Loop BB511_9 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB511_13 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB511_18
	b	LBB511_12
LBB511_12:                              ;   in Loop: Header=BB511_11 Depth=3
	str	wzr, [sp, #24]
	b	LBB511_13
LBB511_13:                              ;   Parent Loop BB511_7 Depth=1
                                        ;     Parent Loop BB511_9 Depth=2
                                        ;       Parent Loop BB511_11 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB511_16
	b	LBB511_14
LBB511_14:                              ;   in Loop: Header=BB511_13 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB511_15
LBB511_15:                              ;   in Loop: Header=BB511_13 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB511_13
LBB511_16:                              ;   in Loop: Header=BB511_11 Depth=3
	b	LBB511_17
LBB511_17:                              ;   in Loop: Header=BB511_11 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB511_11
LBB511_18:                              ;   in Loop: Header=BB511_9 Depth=2
	b	LBB511_19
LBB511_19:                              ;   in Loop: Header=BB511_9 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB511_9
LBB511_20:                              ;   in Loop: Header=BB511_7 Depth=1
	b	LBB511_21
LBB511_21:                              ;   in Loop: Header=BB511_7 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB511_7
LBB511_22:
	ldr	x0, [sp, #40]
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3addEfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE3addEfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE3addEfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE3addEfRS0_: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE3addEfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB512_2
	b	LBB512_1
LBB512_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #309
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB512_2:
	b	LBB512_3
LBB512_3:
	str	wzr, [sp, #28]
	b	LBB512_4
LBB512_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB512_6 Depth 2
                                        ;       Child Loop BB512_8 Depth 3
                                        ;         Child Loop BB512_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB512_19
	b	LBB512_5
LBB512_5:                               ;   in Loop: Header=BB512_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB512_6
LBB512_6:                               ;   Parent Loop BB512_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB512_8 Depth 3
                                        ;         Child Loop BB512_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB512_17
	b	LBB512_7
LBB512_7:                               ;   in Loop: Header=BB512_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB512_8
LBB512_8:                               ;   Parent Loop BB512_4 Depth=1
                                        ;     Parent Loop BB512_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB512_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB512_15
	b	LBB512_9
LBB512_9:                               ;   in Loop: Header=BB512_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB512_10
LBB512_10:                              ;   Parent Loop BB512_4 Depth=1
                                        ;     Parent Loop BB512_6 Depth=2
                                        ;       Parent Loop BB512_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB512_13
	b	LBB512_11
LBB512_11:                              ;   in Loop: Header=BB512_10 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	ldur	s1, [x29, #-12]
	fadd	s0, s0, s1
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB512_12
LBB512_12:                              ;   in Loop: Header=BB512_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB512_10
LBB512_13:                              ;   in Loop: Header=BB512_8 Depth=3
	b	LBB512_14
LBB512_14:                              ;   in Loop: Header=BB512_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB512_8
LBB512_15:                              ;   in Loop: Header=BB512_6 Depth=2
	b	LBB512_16
LBB512_16:                              ;   in Loop: Header=BB512_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB512_6
LBB512_17:                              ;   in Loop: Header=BB512_4 Depth=1
	b	LBB512_18
LBB512_18:                              ;   in Loop: Header=BB512_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB512_4
LBB512_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE5sqrt_Ev ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE5sqrt_Ev
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE5sqrt_Ev
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE5sqrt_Ev: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE5sqrt_Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x8, [x29, #-16]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB513_2
	b	LBB513_1
LBB513_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #272
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB513_2:
	b	LBB513_3
LBB513_3:
	stur	wzr, [x29, #-20]
	b	LBB513_4
LBB513_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB513_6 Depth 2
                                        ;       Child Loop BB513_8 Depth 3
                                        ;         Child Loop BB513_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-20]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB513_19
	b	LBB513_5
LBB513_5:                               ;   in Loop: Header=BB513_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB513_6
LBB513_6:                               ;   Parent Loop BB513_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB513_8 Depth 3
                                        ;         Child Loop BB513_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB513_17
	b	LBB513_7
LBB513_7:                               ;   in Loop: Header=BB513_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB513_8
LBB513_8:                               ;   Parent Loop BB513_4 Depth=1
                                        ;     Parent Loop BB513_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB513_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB513_15
	b	LBB513_9
LBB513_9:                               ;   in Loop: Header=BB513_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB513_10
LBB513_10:                              ;   Parent Loop BB513_4 Depth=1
                                        ;     Parent Loop BB513_6 Depth=2
                                        ;       Parent Loop BB513_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB513_13
	b	LBB513_11
LBB513_11:                              ;   in Loop: Header=BB513_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	bl	__Z4sqrtB6v15007f
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB513_12
LBB513_12:                              ;   in Loop: Header=BB513_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB513_10
LBB513_13:                              ;   in Loop: Header=BB513_8 Depth=3
	b	LBB513_14
LBB513_14:                              ;   in Loop: Header=BB513_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB513_8
LBB513_15:                              ;   in Loop: Header=BB513_6 Depth=2
	b	LBB513_16
LBB513_16:                              ;   in Loop: Header=BB513_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB513_6
LBB513_17:                              ;   in Loop: Header=BB513_4 Depth=1
	b	LBB513_18
LBB513_18:                              ;   in Loop: Header=BB513_4 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1
	stur	w8, [x29, #-20]
	b	LBB513_4
LBB513_19:
	ldur	x0, [x29, #-16]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE4div_ERS0_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE4div_ERS0_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE4div_ERS0_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE4div_ERS0_: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE4div_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB514_2
	b	LBB514_1
LBB514_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #254
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB514_2:
	b	LBB514_3
LBB514_3:
	stur	wzr, [x29, #-28]
	b	LBB514_4
LBB514_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB514_6 Depth 2
                                        ;       Child Loop BB514_8 Depth 3
                                        ;         Child Loop BB514_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB514_19
	b	LBB514_5
LBB514_5:                               ;   in Loop: Header=BB514_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB514_6
LBB514_6:                               ;   Parent Loop BB514_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB514_8 Depth 3
                                        ;         Child Loop BB514_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB514_17
	b	LBB514_7
LBB514_7:                               ;   in Loop: Header=BB514_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB514_8
LBB514_8:                               ;   Parent Loop BB514_4 Depth=1
                                        ;     Parent Loop BB514_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB514_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB514_15
	b	LBB514_9
LBB514_9:                               ;   in Loop: Header=BB514_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB514_10
LBB514_10:                              ;   Parent Loop BB514_4 Depth=1
                                        ;     Parent Loop BB514_6 Depth=2
                                        ;       Parent Loop BB514_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB514_13
	b	LBB514_11
LBB514_11:                              ;   in Loop: Header=BB514_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fdiv	s0, s0, s1
	str	s0, [x0]
	b	LBB514_12
LBB514_12:                              ;   in Loop: Header=BB514_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB514_10
LBB514_13:                              ;   in Loop: Header=BB514_8 Depth=3
	b	LBB514_14
LBB514_14:                              ;   in Loop: Header=BB514_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB514_8
LBB514_15:                              ;   in Loop: Header=BB514_6 Depth=2
	b	LBB514_16
LBB514_16:                              ;   in Loop: Header=BB514_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB514_6
LBB514_17:                              ;   in Loop: Header=BB514_4 Depth=1
	b	LBB514_18
LBB514_18:                              ;   in Loop: Header=BB514_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB514_4
LBB514_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_ERS0_ ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_ERS0_
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_ERS0_
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_ERS0_: ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE4mul_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB515_2
	b	LBB515_1
LBB515_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #236
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB515_2:
	b	LBB515_3
LBB515_3:
	stur	wzr, [x29, #-28]
	b	LBB515_4
LBB515_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB515_6 Depth 2
                                        ;       Child Loop BB515_8 Depth 3
                                        ;         Child Loop BB515_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB515_19
	b	LBB515_5
LBB515_5:                               ;   in Loop: Header=BB515_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB515_6
LBB515_6:                               ;   Parent Loop BB515_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB515_8 Depth 3
                                        ;         Child Loop BB515_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB515_17
	b	LBB515_7
LBB515_7:                               ;   in Loop: Header=BB515_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB515_8
LBB515_8:                               ;   Parent Loop BB515_4 Depth=1
                                        ;     Parent Loop BB515_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB515_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB515_15
	b	LBB515_9
LBB515_9:                               ;   in Loop: Header=BB515_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB515_10
LBB515_10:                              ;   Parent Loop BB515_4 Depth=1
                                        ;     Parent Loop BB515_6 Depth=2
                                        ;       Parent Loop BB515_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB515_13
	b	LBB515_11
LBB515_11:                              ;   in Loop: Header=BB515_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB515_12
LBB515_12:                              ;   in Loop: Header=BB515_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB515_10
LBB515_13:                              ;   in Loop: Header=BB515_8 Depth=3
	b	LBB515_14
LBB515_14:                              ;   in Loop: Header=BB515_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB515_8
LBB515_15:                              ;   in Loop: Header=BB515_6 Depth=2
	b	LBB515_16
LBB515_16:                              ;   in Loop: Header=BB515_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB515_6
LBB515_17:                              ;   in Loop: Header=BB515_4 Depth=1
	b	LBB515_18
LBB515_18:                              ;   in Loop: Header=BB515_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB515_4
LBB515_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE14update_cpu_ompEv ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE14update_cpu_ompEv
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE14update_cpu_ompEv
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE14update_cpu_ompEv: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE14update_cpu_ompEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #33952
	movk	x9, #180, lsl #16
	add	x0, x8, x9
	mov	x9, x8
	add	x1, x9, #136
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi64ELi12ELi12ELi128EE6updateER6tensorIfLi64ELi12ELi12ELi128EES3_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #33980
	movk	x9, #468, lsl #16
	add	x0, x8, x9
	mov	x9, #140
	movk	x9, #72, lsl #16
	add	x1, x8, x9
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi128ELi1ELi1ELi1EE6updateER6tensorIfLi128ELi1ELi1ELi1EES3_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE15update_cpu_baseEv ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE15update_cpu_baseEv
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE15update_cpu_baseEv
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE15update_cpu_baseEv: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE15update_cpu_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	bl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE11update_baseEv
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16update_cuda_baseEv ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE16update_cuda_baseEv
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16update_cuda_baseEv
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE16update_cuda_baseEv: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE16update_cuda_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.143@PAGE
	add	x0, x0, l_.str.143@PAGEOFF
	mov	w1, #136
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi64ELi12ELi12ELi128EE6updateER6tensorIfLi64ELi12ELi12ELi128EES3_ ; -- Begin function _ZN8AdaDeltaILi64ELi12ELi12ELi128EE6updateER6tensorIfLi64ELi12ELi12ELi128EES3_
	.weak_definition	__ZN8AdaDeltaILi64ELi12ELi12ELi128EE6updateER6tensorIfLi64ELi12ELi12ELi128EES3_
	.p2align	2
__ZN8AdaDeltaILi64ELi12ELi12ELi128EE6updateER6tensorIfLi64ELi12ELi12ELi128EES3_: ; @_ZN8AdaDeltaILi64ELi12ELi12ELi128EE6updateER6tensorIfLi64ELi12ELi12ELi128EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	ldur	x8, [x29, #-8]
	stur	x8, [x29, #-32]                 ; 8-byte Folded Spill
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #64
	cset	w8, eq
	tbnz	w8, #0, LBB519_2
	b	LBB519_1
LBB519_1:
	adrp	x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGE
	add	x0, x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGEOFF
	adrp	x1, l_.str.117@PAGE
	add	x1, x1, l_.str.117@PAGEOFF
	mov	w2, #49
	adrp	x3, l_.str.118@PAGE
	add	x3, x3, l_.str.118@PAGEOFF
	bl	___assert_rtn
LBB519_2:
	b	LBB519_3
LBB519_3:
	ldur	x0, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x8, #20
	movk	x8, #288, lsl #16
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldr	s0, [x0, x8]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_Ef
	ldr	x9, [sp, #24]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	ldr	s1, [x8, x9]
	fmov	s0, #1.00000000
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	fsub	s0, s0, s1
	ldur	x1, [x29, #-24]
	ldur	x2, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE8addcmul_EfRS0_S1_
	ldur	x0, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x8, #24
	movk	x8, #288, lsl #16
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	s0, [x0, x8]
	mov	x9, #8
	movk	x9, #144, lsl #16
	str	x9, [sp, #8]                    ; 8-byte Folded Spill
	mov	x8, x0
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE3addEfRS0_
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE5sqrt_Ev
	ldr	x9, [sp]                        ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x11, #4
	movk	x11, #72, lsl #16
	str	x11, [sp, #16]                  ; 8-byte Folded Spill
	mov	x10, x8
	add	x0, x10, x11
	ldr	s0, [x8, x9]
	mov	x9, #12
	movk	x9, #216, lsl #16
	str	x9, [sp, #40]                   ; 8-byte Folded Spill
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE3addEfRS0_
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE5sqrt_Ev
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE4div_ERS0_
	ldur	x1, [x29, #-24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_ERS0_
	ldr	x11, [sp, #16]                  ; 8-byte Folded Reload
	ldr	x9, [sp, #24]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x10, x8
	add	x0, x10, x11
	ldr	s0, [x8, x9]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_Ef
	ldr	x10, [sp, #24]                  ; 8-byte Folded Reload
	ldr	s0, [sp, #36]                   ; 4-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldr	s1, [x8, x10]
	fsub	s0, s0, s1
	mov	x10, x8
	add	x1, x10, x9
	add	x2, x8, x9
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE8addcmul_EfRS0_S1_
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldur	x0, [x29, #-16]
	mov	x10, #16
	movk	x10, #288, lsl #16
	ldr	s0, [x8, x10]
	fneg	s0, s0
	add	x1, x8, x9
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EE4add_EfRS0_
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi128ELi1ELi1ELi1EE6updateER6tensorIfLi128ELi1ELi1ELi1EES3_ ; -- Begin function _ZN8AdaDeltaILi128ELi1ELi1ELi1EE6updateER6tensorIfLi128ELi1ELi1ELi1EES3_
	.weak_definition	__ZN8AdaDeltaILi128ELi1ELi1ELi1EE6updateER6tensorIfLi128ELi1ELi1ELi1EES3_
	.p2align	2
__ZN8AdaDeltaILi128ELi1ELi1ELi1EE6updateER6tensorIfLi128ELi1ELi1ELi1EES3_: ; @_ZN8AdaDeltaILi128ELi1ELi1ELi1EE6updateER6tensorIfLi128ELi1ELi1ELi1EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	str	x2, [sp, #24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #128
	cset	w8, eq
	tbnz	w8, #0, LBB520_2
	b	LBB520_1
LBB520_1:
	adrp	x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGE
	add	x0, x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGEOFF
	adrp	x1, l_.str.117@PAGE
	add	x1, x1, l_.str.117@PAGEOFF
	mov	w2, #49
	adrp	x3, l_.str.118@PAGE
	add	x3, x3, l_.str.118@PAGEOFF
	bl	___assert_rtn
LBB520_2:
	b	LBB520_3
LBB520_3:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #2068]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_Ef
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #2068]
	fmov	s0, #1.00000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	fsub	s0, s0, s1
	ldr	x1, [sp, #24]
	ldr	x2, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #2072]
	add	x1, x0, #1032
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE3addEfRS0_
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #516
	ldr	s0, [x8, #2072]
	add	x1, x8, #1548
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE3addEfRS0_
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x1, x8, #1032
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE4div_ERS0_
	ldr	x1, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_ERS0_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #516
	ldr	s0, [x8, #2068]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_Ef
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #2068]
	fsub	s0, s0, s1
	add	x1, x8, #1548
	add	x2, x8, #1548
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x0, [x29, #-16]
	ldr	s0, [x8, #2064]
	fneg	s0, s0
	add	x1, x8, #1548
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_Ef ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_Ef
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_Ef
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_Ef: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_Ef
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB521_2
	b	LBB521_1
LBB521_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #218
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB521_2:
	b	LBB521_3
LBB521_3:
	stur	wzr, [x29, #-28]
	b	LBB521_4
LBB521_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB521_6 Depth 2
                                        ;       Child Loop BB521_8 Depth 3
                                        ;         Child Loop BB521_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB521_19
	b	LBB521_5
LBB521_5:                               ;   in Loop: Header=BB521_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB521_6
LBB521_6:                               ;   Parent Loop BB521_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB521_8 Depth 3
                                        ;         Child Loop BB521_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB521_17
	b	LBB521_7
LBB521_7:                               ;   in Loop: Header=BB521_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB521_8
LBB521_8:                               ;   Parent Loop BB521_4 Depth=1
                                        ;     Parent Loop BB521_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB521_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB521_15
	b	LBB521_9
LBB521_9:                               ;   in Loop: Header=BB521_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB521_10
LBB521_10:                              ;   Parent Loop BB521_4 Depth=1
                                        ;     Parent Loop BB521_6 Depth=2
                                        ;       Parent Loop BB521_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB521_13
	b	LBB521_11
LBB521_11:                              ;   in Loop: Header=BB521_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB521_12
LBB521_12:                              ;   in Loop: Header=BB521_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB521_10
LBB521_13:                              ;   in Loop: Header=BB521_8 Depth=3
	b	LBB521_14
LBB521_14:                              ;   in Loop: Header=BB521_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB521_8
LBB521_15:                              ;   in Loop: Header=BB521_6 Depth=2
	b	LBB521_16
LBB521_16:                              ;   in Loop: Header=BB521_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB521_6
LBB521_17:                              ;   in Loop: Header=BB521_4 Depth=1
	b	LBB521_18
LBB521_18:                              ;   in Loop: Header=BB521_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB521_4
LBB521_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE8addcmul_EfRS0_S1_ ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE8addcmul_EfRS0_S1_
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE8addcmul_EfRS0_S1_
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE8addcmul_EfRS0_S1_: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE8addcmul_EfRS0_S1_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	stur	x2, [x29, #-32]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	str	x8, [sp, #40]
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB522_2
	b	LBB522_1
LBB522_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #290
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB522_2:
	b	LBB522_3
LBB522_3:
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB522_5
	b	LBB522_4
LBB522_4:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #291
	adrp	x3, l_.str.120@PAGE
	add	x3, x3, l_.str.120@PAGEOFF
	bl	___assert_rtn
LBB522_5:
	b	LBB522_6
LBB522_6:
	str	wzr, [sp, #36]
	b	LBB522_7
LBB522_7:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB522_9 Depth 2
                                        ;       Child Loop BB522_11 Depth 3
                                        ;         Child Loop BB522_13 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB522_22
	b	LBB522_8
LBB522_8:                               ;   in Loop: Header=BB522_7 Depth=1
	str	wzr, [sp, #32]
	b	LBB522_9
LBB522_9:                               ;   Parent Loop BB522_7 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB522_11 Depth 3
                                        ;         Child Loop BB522_13 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB522_20
	b	LBB522_10
LBB522_10:                              ;   in Loop: Header=BB522_9 Depth=2
	str	wzr, [sp, #28]
	b	LBB522_11
LBB522_11:                              ;   Parent Loop BB522_7 Depth=1
                                        ;     Parent Loop BB522_9 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB522_13 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB522_18
	b	LBB522_12
LBB522_12:                              ;   in Loop: Header=BB522_11 Depth=3
	str	wzr, [sp, #24]
	b	LBB522_13
LBB522_13:                              ;   Parent Loop BB522_7 Depth=1
                                        ;     Parent Loop BB522_9 Depth=2
                                        ;       Parent Loop BB522_11 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB522_16
	b	LBB522_14
LBB522_14:                              ;   in Loop: Header=BB522_13 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s1, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB522_15
LBB522_15:                              ;   in Loop: Header=BB522_13 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB522_13
LBB522_16:                              ;   in Loop: Header=BB522_11 Depth=3
	b	LBB522_17
LBB522_17:                              ;   in Loop: Header=BB522_11 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB522_11
LBB522_18:                              ;   in Loop: Header=BB522_9 Depth=2
	b	LBB522_19
LBB522_19:                              ;   in Loop: Header=BB522_9 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB522_9
LBB522_20:                              ;   in Loop: Header=BB522_7 Depth=1
	b	LBB522_21
LBB522_21:                              ;   in Loop: Header=BB522_7 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB522_7
LBB522_22:
	ldr	x0, [sp, #40]
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE3addEfRS0_ ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE3addEfRS0_
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE3addEfRS0_
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE3addEfRS0_: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE3addEfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB523_2
	b	LBB523_1
LBB523_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #309
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB523_2:
	b	LBB523_3
LBB523_3:
	str	wzr, [sp, #28]
	b	LBB523_4
LBB523_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB523_6 Depth 2
                                        ;       Child Loop BB523_8 Depth 3
                                        ;         Child Loop BB523_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB523_19
	b	LBB523_5
LBB523_5:                               ;   in Loop: Header=BB523_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB523_6
LBB523_6:                               ;   Parent Loop BB523_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB523_8 Depth 3
                                        ;         Child Loop BB523_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB523_17
	b	LBB523_7
LBB523_7:                               ;   in Loop: Header=BB523_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB523_8
LBB523_8:                               ;   Parent Loop BB523_4 Depth=1
                                        ;     Parent Loop BB523_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB523_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB523_15
	b	LBB523_9
LBB523_9:                               ;   in Loop: Header=BB523_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB523_10
LBB523_10:                              ;   Parent Loop BB523_4 Depth=1
                                        ;     Parent Loop BB523_6 Depth=2
                                        ;       Parent Loop BB523_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB523_13
	b	LBB523_11
LBB523_11:                              ;   in Loop: Header=BB523_10 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [x0]
	ldur	s1, [x29, #-12]
	fadd	s0, s0, s1
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB523_12
LBB523_12:                              ;   in Loop: Header=BB523_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB523_10
LBB523_13:                              ;   in Loop: Header=BB523_8 Depth=3
	b	LBB523_14
LBB523_14:                              ;   in Loop: Header=BB523_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB523_8
LBB523_15:                              ;   in Loop: Header=BB523_6 Depth=2
	b	LBB523_16
LBB523_16:                              ;   in Loop: Header=BB523_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB523_6
LBB523_17:                              ;   in Loop: Header=BB523_4 Depth=1
	b	LBB523_18
LBB523_18:                              ;   in Loop: Header=BB523_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB523_4
LBB523_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE5sqrt_Ev ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE5sqrt_Ev
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE5sqrt_Ev
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE5sqrt_Ev: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE5sqrt_Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x8, [x29, #-16]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB524_2
	b	LBB524_1
LBB524_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #272
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB524_2:
	b	LBB524_3
LBB524_3:
	stur	wzr, [x29, #-20]
	b	LBB524_4
LBB524_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB524_6 Depth 2
                                        ;       Child Loop BB524_8 Depth 3
                                        ;         Child Loop BB524_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-20]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB524_19
	b	LBB524_5
LBB524_5:                               ;   in Loop: Header=BB524_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB524_6
LBB524_6:                               ;   Parent Loop BB524_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB524_8 Depth 3
                                        ;         Child Loop BB524_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB524_17
	b	LBB524_7
LBB524_7:                               ;   in Loop: Header=BB524_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB524_8
LBB524_8:                               ;   Parent Loop BB524_4 Depth=1
                                        ;     Parent Loop BB524_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB524_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB524_15
	b	LBB524_9
LBB524_9:                               ;   in Loop: Header=BB524_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB524_10
LBB524_10:                              ;   Parent Loop BB524_4 Depth=1
                                        ;     Parent Loop BB524_6 Depth=2
                                        ;       Parent Loop BB524_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB524_13
	b	LBB524_11
LBB524_11:                              ;   in Loop: Header=BB524_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [x0]
	bl	__Z4sqrtB6v15007f
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB524_12
LBB524_12:                              ;   in Loop: Header=BB524_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB524_10
LBB524_13:                              ;   in Loop: Header=BB524_8 Depth=3
	b	LBB524_14
LBB524_14:                              ;   in Loop: Header=BB524_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB524_8
LBB524_15:                              ;   in Loop: Header=BB524_6 Depth=2
	b	LBB524_16
LBB524_16:                              ;   in Loop: Header=BB524_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB524_6
LBB524_17:                              ;   in Loop: Header=BB524_4 Depth=1
	b	LBB524_18
LBB524_18:                              ;   in Loop: Header=BB524_4 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1
	stur	w8, [x29, #-20]
	b	LBB524_4
LBB524_19:
	ldur	x0, [x29, #-16]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE4div_ERS0_ ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE4div_ERS0_
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE4div_ERS0_
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE4div_ERS0_: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE4div_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB525_2
	b	LBB525_1
LBB525_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #254
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB525_2:
	b	LBB525_3
LBB525_3:
	stur	wzr, [x29, #-28]
	b	LBB525_4
LBB525_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB525_6 Depth 2
                                        ;       Child Loop BB525_8 Depth 3
                                        ;         Child Loop BB525_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB525_19
	b	LBB525_5
LBB525_5:                               ;   in Loop: Header=BB525_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB525_6
LBB525_6:                               ;   Parent Loop BB525_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB525_8 Depth 3
                                        ;         Child Loop BB525_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB525_17
	b	LBB525_7
LBB525_7:                               ;   in Loop: Header=BB525_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB525_8
LBB525_8:                               ;   Parent Loop BB525_4 Depth=1
                                        ;     Parent Loop BB525_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB525_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB525_15
	b	LBB525_9
LBB525_9:                               ;   in Loop: Header=BB525_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB525_10
LBB525_10:                              ;   Parent Loop BB525_4 Depth=1
                                        ;     Parent Loop BB525_6 Depth=2
                                        ;       Parent Loop BB525_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB525_13
	b	LBB525_11
LBB525_11:                              ;   in Loop: Header=BB525_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fdiv	s0, s0, s1
	str	s0, [x0]
	b	LBB525_12
LBB525_12:                              ;   in Loop: Header=BB525_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB525_10
LBB525_13:                              ;   in Loop: Header=BB525_8 Depth=3
	b	LBB525_14
LBB525_14:                              ;   in Loop: Header=BB525_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB525_8
LBB525_15:                              ;   in Loop: Header=BB525_6 Depth=2
	b	LBB525_16
LBB525_16:                              ;   in Loop: Header=BB525_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB525_6
LBB525_17:                              ;   in Loop: Header=BB525_4 Depth=1
	b	LBB525_18
LBB525_18:                              ;   in Loop: Header=BB525_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB525_4
LBB525_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_ERS0_ ; -- Begin function _ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_ERS0_
	.weak_definition	__ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_ERS0_
	.p2align	2
__ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_ERS0_: ; @_ZN6tensorIfLi64ELi12ELi12ELi128EE4mul_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB526_2
	b	LBB526_1
LBB526_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #236
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB526_2:
	b	LBB526_3
LBB526_3:
	stur	wzr, [x29, #-28]
	b	LBB526_4
LBB526_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB526_6 Depth 2
                                        ;       Child Loop BB526_8 Depth 3
                                        ;         Child Loop BB526_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB526_19
	b	LBB526_5
LBB526_5:                               ;   in Loop: Header=BB526_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB526_6
LBB526_6:                               ;   Parent Loop BB526_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB526_8 Depth 3
                                        ;         Child Loop BB526_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB526_17
	b	LBB526_7
LBB526_7:                               ;   in Loop: Header=BB526_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB526_8
LBB526_8:                               ;   Parent Loop BB526_4 Depth=1
                                        ;     Parent Loop BB526_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB526_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #12
	cset	w8, ge
	tbnz	w8, #0, LBB526_15
	b	LBB526_9
LBB526_9:                               ;   in Loop: Header=BB526_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB526_10
LBB526_10:                              ;   Parent Loop BB526_4 Depth=1
                                        ;     Parent Loop BB526_6 Depth=2
                                        ;       Parent Loop BB526_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #128
	cset	w8, ge
	tbnz	w8, #0, LBB526_13
	b	LBB526_11
LBB526_11:                              ;   in Loop: Header=BB526_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi64ELi12ELi12ELi128EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB526_12
LBB526_12:                              ;   in Loop: Header=BB526_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB526_10
LBB526_13:                              ;   in Loop: Header=BB526_8 Depth=3
	b	LBB526_14
LBB526_14:                              ;   in Loop: Header=BB526_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB526_8
LBB526_15:                              ;   in Loop: Header=BB526_6 Depth=2
	b	LBB526_16
LBB526_16:                              ;   in Loop: Header=BB526_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB526_6
LBB526_17:                              ;   in Loop: Header=BB526_4 Depth=1
	b	LBB526_18
LBB526_18:                              ;   in Loop: Header=BB526_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB526_4
LBB526_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_Ef ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_Ef
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_Ef
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_Ef: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_Ef
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB527_2
	b	LBB527_1
LBB527_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #218
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB527_2:
	b	LBB527_3
LBB527_3:
	stur	wzr, [x29, #-28]
	b	LBB527_4
LBB527_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB527_6 Depth 2
                                        ;       Child Loop BB527_8 Depth 3
                                        ;         Child Loop BB527_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB527_19
	b	LBB527_5
LBB527_5:                               ;   in Loop: Header=BB527_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB527_6
LBB527_6:                               ;   Parent Loop BB527_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB527_8 Depth 3
                                        ;         Child Loop BB527_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB527_17
	b	LBB527_7
LBB527_7:                               ;   in Loop: Header=BB527_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB527_8
LBB527_8:                               ;   Parent Loop BB527_4 Depth=1
                                        ;     Parent Loop BB527_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB527_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB527_15
	b	LBB527_9
LBB527_9:                               ;   in Loop: Header=BB527_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB527_10
LBB527_10:                              ;   Parent Loop BB527_4 Depth=1
                                        ;     Parent Loop BB527_6 Depth=2
                                        ;       Parent Loop BB527_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB527_13
	b	LBB527_11
LBB527_11:                              ;   in Loop: Header=BB527_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB527_12
LBB527_12:                              ;   in Loop: Header=BB527_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB527_10
LBB527_13:                              ;   in Loop: Header=BB527_8 Depth=3
	b	LBB527_14
LBB527_14:                              ;   in Loop: Header=BB527_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB527_8
LBB527_15:                              ;   in Loop: Header=BB527_6 Depth=2
	b	LBB527_16
LBB527_16:                              ;   in Loop: Header=BB527_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB527_6
LBB527_17:                              ;   in Loop: Header=BB527_4 Depth=1
	b	LBB527_18
LBB527_18:                              ;   in Loop: Header=BB527_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB527_4
LBB527_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE8addcmul_EfRS0_S1_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE8addcmul_EfRS0_S1_: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	stur	x2, [x29, #-32]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	str	x8, [sp, #40]
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB528_2
	b	LBB528_1
LBB528_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #290
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB528_2:
	b	LBB528_3
LBB528_3:
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB528_5
	b	LBB528_4
LBB528_4:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #291
	adrp	x3, l_.str.120@PAGE
	add	x3, x3, l_.str.120@PAGEOFF
	bl	___assert_rtn
LBB528_5:
	b	LBB528_6
LBB528_6:
	str	wzr, [sp, #36]
	b	LBB528_7
LBB528_7:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB528_9 Depth 2
                                        ;       Child Loop BB528_11 Depth 3
                                        ;         Child Loop BB528_13 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB528_22
	b	LBB528_8
LBB528_8:                               ;   in Loop: Header=BB528_7 Depth=1
	str	wzr, [sp, #32]
	b	LBB528_9
LBB528_9:                               ;   Parent Loop BB528_7 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB528_11 Depth 3
                                        ;         Child Loop BB528_13 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB528_20
	b	LBB528_10
LBB528_10:                              ;   in Loop: Header=BB528_9 Depth=2
	str	wzr, [sp, #28]
	b	LBB528_11
LBB528_11:                              ;   Parent Loop BB528_7 Depth=1
                                        ;     Parent Loop BB528_9 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB528_13 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB528_18
	b	LBB528_12
LBB528_12:                              ;   in Loop: Header=BB528_11 Depth=3
	str	wzr, [sp, #24]
	b	LBB528_13
LBB528_13:                              ;   Parent Loop BB528_7 Depth=1
                                        ;     Parent Loop BB528_9 Depth=2
                                        ;       Parent Loop BB528_11 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB528_16
	b	LBB528_14
LBB528_14:                              ;   in Loop: Header=BB528_13 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB528_15
LBB528_15:                              ;   in Loop: Header=BB528_13 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB528_13
LBB528_16:                              ;   in Loop: Header=BB528_11 Depth=3
	b	LBB528_17
LBB528_17:                              ;   in Loop: Header=BB528_11 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB528_11
LBB528_18:                              ;   in Loop: Header=BB528_9 Depth=2
	b	LBB528_19
LBB528_19:                              ;   in Loop: Header=BB528_9 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB528_9
LBB528_20:                              ;   in Loop: Header=BB528_7 Depth=1
	b	LBB528_21
LBB528_21:                              ;   in Loop: Header=BB528_7 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB528_7
LBB528_22:
	ldr	x0, [sp, #40]
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE3addEfRS0_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE3addEfRS0_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE3addEfRS0_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE3addEfRS0_: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE3addEfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB529_2
	b	LBB529_1
LBB529_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #309
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB529_2:
	b	LBB529_3
LBB529_3:
	str	wzr, [sp, #28]
	b	LBB529_4
LBB529_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB529_6 Depth 2
                                        ;       Child Loop BB529_8 Depth 3
                                        ;         Child Loop BB529_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB529_19
	b	LBB529_5
LBB529_5:                               ;   in Loop: Header=BB529_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB529_6
LBB529_6:                               ;   Parent Loop BB529_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB529_8 Depth 3
                                        ;         Child Loop BB529_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB529_17
	b	LBB529_7
LBB529_7:                               ;   in Loop: Header=BB529_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB529_8
LBB529_8:                               ;   Parent Loop BB529_4 Depth=1
                                        ;     Parent Loop BB529_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB529_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB529_15
	b	LBB529_9
LBB529_9:                               ;   in Loop: Header=BB529_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB529_10
LBB529_10:                              ;   Parent Loop BB529_4 Depth=1
                                        ;     Parent Loop BB529_6 Depth=2
                                        ;       Parent Loop BB529_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB529_13
	b	LBB529_11
LBB529_11:                              ;   in Loop: Header=BB529_10 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	ldur	s1, [x29, #-12]
	fadd	s0, s0, s1
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB529_12
LBB529_12:                              ;   in Loop: Header=BB529_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB529_10
LBB529_13:                              ;   in Loop: Header=BB529_8 Depth=3
	b	LBB529_14
LBB529_14:                              ;   in Loop: Header=BB529_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB529_8
LBB529_15:                              ;   in Loop: Header=BB529_6 Depth=2
	b	LBB529_16
LBB529_16:                              ;   in Loop: Header=BB529_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB529_6
LBB529_17:                              ;   in Loop: Header=BB529_4 Depth=1
	b	LBB529_18
LBB529_18:                              ;   in Loop: Header=BB529_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB529_4
LBB529_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE5sqrt_Ev ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE5sqrt_Ev
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE5sqrt_Ev
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE5sqrt_Ev: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE5sqrt_Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x8, [x29, #-16]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB530_2
	b	LBB530_1
LBB530_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #272
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB530_2:
	b	LBB530_3
LBB530_3:
	stur	wzr, [x29, #-20]
	b	LBB530_4
LBB530_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB530_6 Depth 2
                                        ;       Child Loop BB530_8 Depth 3
                                        ;         Child Loop BB530_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-20]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB530_19
	b	LBB530_5
LBB530_5:                               ;   in Loop: Header=BB530_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB530_6
LBB530_6:                               ;   Parent Loop BB530_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB530_8 Depth 3
                                        ;         Child Loop BB530_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB530_17
	b	LBB530_7
LBB530_7:                               ;   in Loop: Header=BB530_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB530_8
LBB530_8:                               ;   Parent Loop BB530_4 Depth=1
                                        ;     Parent Loop BB530_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB530_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB530_15
	b	LBB530_9
LBB530_9:                               ;   in Loop: Header=BB530_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB530_10
LBB530_10:                              ;   Parent Loop BB530_4 Depth=1
                                        ;     Parent Loop BB530_6 Depth=2
                                        ;       Parent Loop BB530_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB530_13
	b	LBB530_11
LBB530_11:                              ;   in Loop: Header=BB530_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	bl	__Z4sqrtB6v15007f
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB530_12
LBB530_12:                              ;   in Loop: Header=BB530_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB530_10
LBB530_13:                              ;   in Loop: Header=BB530_8 Depth=3
	b	LBB530_14
LBB530_14:                              ;   in Loop: Header=BB530_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB530_8
LBB530_15:                              ;   in Loop: Header=BB530_6 Depth=2
	b	LBB530_16
LBB530_16:                              ;   in Loop: Header=BB530_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB530_6
LBB530_17:                              ;   in Loop: Header=BB530_4 Depth=1
	b	LBB530_18
LBB530_18:                              ;   in Loop: Header=BB530_4 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1
	stur	w8, [x29, #-20]
	b	LBB530_4
LBB530_19:
	ldur	x0, [x29, #-16]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE4div_ERS0_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE4div_ERS0_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE4div_ERS0_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE4div_ERS0_: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE4div_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB531_2
	b	LBB531_1
LBB531_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #254
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB531_2:
	b	LBB531_3
LBB531_3:
	stur	wzr, [x29, #-28]
	b	LBB531_4
LBB531_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB531_6 Depth 2
                                        ;       Child Loop BB531_8 Depth 3
                                        ;         Child Loop BB531_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB531_19
	b	LBB531_5
LBB531_5:                               ;   in Loop: Header=BB531_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB531_6
LBB531_6:                               ;   Parent Loop BB531_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB531_8 Depth 3
                                        ;         Child Loop BB531_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB531_17
	b	LBB531_7
LBB531_7:                               ;   in Loop: Header=BB531_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB531_8
LBB531_8:                               ;   Parent Loop BB531_4 Depth=1
                                        ;     Parent Loop BB531_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB531_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB531_15
	b	LBB531_9
LBB531_9:                               ;   in Loop: Header=BB531_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB531_10
LBB531_10:                              ;   Parent Loop BB531_4 Depth=1
                                        ;     Parent Loop BB531_6 Depth=2
                                        ;       Parent Loop BB531_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB531_13
	b	LBB531_11
LBB531_11:                              ;   in Loop: Header=BB531_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fdiv	s0, s0, s1
	str	s0, [x0]
	b	LBB531_12
LBB531_12:                              ;   in Loop: Header=BB531_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB531_10
LBB531_13:                              ;   in Loop: Header=BB531_8 Depth=3
	b	LBB531_14
LBB531_14:                              ;   in Loop: Header=BB531_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB531_8
LBB531_15:                              ;   in Loop: Header=BB531_6 Depth=2
	b	LBB531_16
LBB531_16:                              ;   in Loop: Header=BB531_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB531_6
LBB531_17:                              ;   in Loop: Header=BB531_4 Depth=1
	b	LBB531_18
LBB531_18:                              ;   in Loop: Header=BB531_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB531_4
LBB531_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_ERS0_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_ERS0_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_ERS0_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_ERS0_: ; @_ZN6tensorIfLi128ELi1ELi1ELi1EE4mul_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB532_2
	b	LBB532_1
LBB532_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #236
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB532_2:
	b	LBB532_3
LBB532_3:
	stur	wzr, [x29, #-28]
	b	LBB532_4
LBB532_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB532_6 Depth 2
                                        ;       Child Loop BB532_8 Depth 3
                                        ;         Child Loop BB532_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB532_19
	b	LBB532_5
LBB532_5:                               ;   in Loop: Header=BB532_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB532_6
LBB532_6:                               ;   Parent Loop BB532_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB532_8 Depth 3
                                        ;         Child Loop BB532_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB532_17
	b	LBB532_7
LBB532_7:                               ;   in Loop: Header=BB532_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB532_8
LBB532_8:                               ;   Parent Loop BB532_4 Depth=1
                                        ;     Parent Loop BB532_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB532_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB532_15
	b	LBB532_9
LBB532_9:                               ;   in Loop: Header=BB532_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB532_10
LBB532_10:                              ;   Parent Loop BB532_4 Depth=1
                                        ;     Parent Loop BB532_6 Depth=2
                                        ;       Parent Loop BB532_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB532_13
	b	LBB532_11
LBB532_11:                              ;   in Loop: Header=BB532_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB532_12
LBB532_12:                              ;   in Loop: Header=BB532_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB532_10
LBB532_13:                              ;   in Loop: Header=BB532_8 Depth=3
	b	LBB532_14
LBB532_14:                              ;   in Loop: Header=BB532_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB532_8
LBB532_15:                              ;   in Loop: Header=BB532_6 Depth=2
	b	LBB532_16
LBB532_16:                              ;   in Loop: Header=BB532_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB532_6
LBB532_17:                              ;   in Loop: Header=BB532_4 Depth=1
	b	LBB532_18
LBB532_18:                              ;   in Loop: Header=BB532_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB532_4
LBB532_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE11update_baseEv ; -- Begin function _ZN6LinearILi64ELi128ELi64ELi12ELi12EE11update_baseEv
	.weak_definition	__ZN6LinearILi64ELi128ELi64ELi12ELi12EE11update_baseEv
	.p2align	2
__ZN6LinearILi64ELi128ELi64ELi12ELi12EE11update_baseEv: ; @_ZN6LinearILi64ELi128ELi64ELi12ELi12EE11update_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #33952
	movk	x9, #180, lsl #16
	add	x0, x8, x9
	mov	x9, x8
	add	x1, x9, #136
	mov	x9, #33428
	movk	x9, #72, lsl #16
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi64ELi12ELi12ELi128EE6updateER6tensorIfLi64ELi12ELi12ELi128EES3_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #33980
	movk	x9, #468, lsl #16
	add	x0, x8, x9
	mov	x9, #140
	movk	x9, #72, lsl #16
	add	x1, x8, x9
	mov	x9, #33432
	movk	x9, #144, lsl #16
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi128ELi1ELi1ELi1EE6updateER6tensorIfLi128ELi1ELi1ELi1EES3_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE14update_cpu_ompEv ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE14update_cpu_ompEv
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE14update_cpu_ompEv
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE14update_cpu_ompEv: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE14update_cpu_ompEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #45808
	add	x0, x8, x9
	mov	x9, x8
	add	x1, x9, #136
	mov	x9, #7868
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi128ELi1ELi1ELi10EE6updateER6tensorIfLi128ELi1ELi1ELi10EES3_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #780
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	mov	x9, #5260
	add	x1, x8, x9
	mov	x9, #12992
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi10ELi1ELi1ELi1EE6updateER6tensorIfLi10ELi1ELi1ELi1EES3_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE15update_cpu_baseEv ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE15update_cpu_baseEv
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE15update_cpu_baseEv
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE15update_cpu_baseEv: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE15update_cpu_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x0, [sp, #8]
	bl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE11update_baseEv
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16update_cuda_baseEv ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE16update_cuda_baseEv
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16update_cuda_baseEv
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE16update_cuda_baseEv: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE16update_cuda_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	ldr	x2, [x8, #88]
	adrp	x0, l_.str.143@PAGE
	add	x0, x0, l_.str.143@PAGEOFF
	mov	w1, #136
	bl	__ZL32err_cuda_code_non_cuda_compiler_PKciS0_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi128ELi1ELi1ELi10EE6updateER6tensorIfLi128ELi1ELi1ELi10EES3_ ; -- Begin function _ZN8AdaDeltaILi128ELi1ELi1ELi10EE6updateER6tensorIfLi128ELi1ELi1ELi10EES3_
	.weak_definition	__ZN8AdaDeltaILi128ELi1ELi1ELi10EE6updateER6tensorIfLi128ELi1ELi1ELi10EES3_
	.p2align	2
__ZN8AdaDeltaILi128ELi1ELi1ELi10EE6updateER6tensorIfLi128ELi1ELi1ELi10EES3_: ; @_ZN8AdaDeltaILi128ELi1ELi1ELi10EE6updateER6tensorIfLi128ELi1ELi1ELi10EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	stur	x2, [x29, #-24]
	ldur	x8, [x29, #-8]
	stur	x8, [x29, #-32]                 ; 8-byte Folded Spill
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #128
	cset	w8, eq
	tbnz	w8, #0, LBB537_2
	b	LBB537_1
LBB537_1:
	adrp	x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGE
	add	x0, x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGEOFF
	adrp	x1, l_.str.117@PAGE
	add	x1, x1, l_.str.117@PAGEOFF
	mov	w2, #49
	adrp	x3, l_.str.118@PAGE
	add	x3, x3, l_.str.118@PAGEOFF
	bl	___assert_rtn
LBB537_2:
	b	LBB537_3
LBB537_3:
	ldur	x0, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x8, #20500
	str	x8, [sp, #24]                   ; 8-byte Folded Spill
	ldr	s0, [x0, x8]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_Ef
	ldr	x9, [sp, #24]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	ldr	s1, [x8, x9]
	fmov	s0, #1.00000000
	str	s0, [sp, #36]                   ; 4-byte Folded Spill
	fsub	s0, s0, s1
	ldur	x1, [x29, #-24]
	ldur	x2, [x29, #-24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE8addcmul_EfRS0_S1_
	ldur	x0, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x8, #20504
	str	x8, [sp]                        ; 8-byte Folded Spill
	ldr	s0, [x0, x8]
	mov	x9, #10248
	str	x9, [sp, #8]                    ; 8-byte Folded Spill
	mov	x8, x0
	add	x1, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE3addEfRS0_
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE5sqrt_Ev
	ldr	x9, [sp]                        ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x11, #5124
	str	x11, [sp, #16]                  ; 8-byte Folded Spill
	mov	x10, x8
	add	x0, x10, x11
	ldr	s0, [x8, x9]
	mov	x9, #15372
	str	x9, [sp, #40]                   ; 8-byte Folded Spill
	add	x1, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE3addEfRS0_
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE5sqrt_Ev
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	add	x1, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE4div_ERS0_
	ldur	x1, [x29, #-24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_ERS0_
	ldr	x11, [sp, #16]                  ; 8-byte Folded Reload
	ldr	x9, [sp, #24]                   ; 8-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	mov	x10, x8
	add	x0, x10, x11
	ldr	s0, [x8, x9]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_Ef
	ldr	x10, [sp, #24]                  ; 8-byte Folded Reload
	ldr	s0, [sp, #36]                   ; 4-byte Folded Reload
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldr	s1, [x8, x10]
	fsub	s0, s0, s1
	mov	x10, x8
	add	x1, x10, x9
	add	x2, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE8addcmul_EfRS0_S1_
	ldur	x8, [x29, #-32]                 ; 8-byte Folded Reload
	ldr	x9, [sp, #40]                   ; 8-byte Folded Reload
	ldur	x0, [x29, #-16]
	mov	x10, #20496
	ldr	s0, [x8, x10]
	fneg	s0, s0
	add	x1, x8, x9
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EE4add_EfRS0_
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN8AdaDeltaILi10ELi1ELi1ELi1EE6updateER6tensorIfLi10ELi1ELi1ELi1EES3_ ; -- Begin function _ZN8AdaDeltaILi10ELi1ELi1ELi1EE6updateER6tensorIfLi10ELi1ELi1ELi1EES3_
	.weak_definition	__ZN8AdaDeltaILi10ELi1ELi1ELi1EE6updateER6tensorIfLi10ELi1ELi1ELi1EES3_
	.p2align	2
__ZN8AdaDeltaILi10ELi1ELi1ELi1EE6updateER6tensorIfLi10ELi1ELi1ELi1EES3_: ; @_ZN8AdaDeltaILi10ELi1ELi1ELi1EE6updateER6tensorIfLi10ELi1ELi1ELi1EES3_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	str	x2, [sp, #24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #10
	cset	w8, eq
	tbnz	w8, #0, LBB538_2
	b	LBB538_1
LBB538_1:
	adrp	x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGE
	add	x0, x0, l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_@PAGEOFF
	adrp	x1, l_.str.117@PAGE
	add	x1, x1, l_.str.117@PAGEOFF
	mov	w2, #49
	adrp	x3, l_.str.118@PAGE
	add	x3, x3, l_.str.118@PAGEOFF
	bl	___assert_rtn
LBB538_2:
	b	LBB538_3
LBB538_3:
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #180]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_Ef
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #180]
	fmov	s0, #1.00000000
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	fsub	s0, s0, s1
	ldr	x1, [sp, #24]
	ldr	x2, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s0, [x0, #184]
	add	x1, x0, #88
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE3addEfRS0_
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #44
	ldr	s0, [x8, #184]
	add	x1, x8, #132
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE3addEfRS0_
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE5sqrt_Ev
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x1, x8, #88
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE4div_ERS0_
	ldr	x1, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_ERS0_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	add	x0, x8, #44
	ldr	s0, [x8, #180]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_Ef
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldr	s1, [x8, #180]
	fsub	s0, s0, s1
	add	x1, x8, #132
	add	x2, x8, #132
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	ldr	x8, [sp, #16]                   ; 8-byte Folded Reload
	ldur	x0, [x29, #-16]
	ldr	s0, [x8, #176]
	fneg	s0, s0
	add	x1, x8, #132
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EE4add_EfRS0_
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_Ef ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_Ef
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_Ef
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_Ef: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_Ef
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB539_2
	b	LBB539_1
LBB539_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #218
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB539_2:
	b	LBB539_3
LBB539_3:
	stur	wzr, [x29, #-28]
	b	LBB539_4
LBB539_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB539_6 Depth 2
                                        ;       Child Loop BB539_8 Depth 3
                                        ;         Child Loop BB539_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB539_19
	b	LBB539_5
LBB539_5:                               ;   in Loop: Header=BB539_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB539_6
LBB539_6:                               ;   Parent Loop BB539_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB539_8 Depth 3
                                        ;         Child Loop BB539_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB539_17
	b	LBB539_7
LBB539_7:                               ;   in Loop: Header=BB539_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB539_8
LBB539_8:                               ;   Parent Loop BB539_4 Depth=1
                                        ;     Parent Loop BB539_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB539_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB539_15
	b	LBB539_9
LBB539_9:                               ;   in Loop: Header=BB539_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB539_10
LBB539_10:                              ;   Parent Loop BB539_4 Depth=1
                                        ;     Parent Loop BB539_6 Depth=2
                                        ;       Parent Loop BB539_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB539_13
	b	LBB539_11
LBB539_11:                              ;   in Loop: Header=BB539_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB539_12
LBB539_12:                              ;   in Loop: Header=BB539_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB539_10
LBB539_13:                              ;   in Loop: Header=BB539_8 Depth=3
	b	LBB539_14
LBB539_14:                              ;   in Loop: Header=BB539_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB539_8
LBB539_15:                              ;   in Loop: Header=BB539_6 Depth=2
	b	LBB539_16
LBB539_16:                              ;   in Loop: Header=BB539_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB539_6
LBB539_17:                              ;   in Loop: Header=BB539_4 Depth=1
	b	LBB539_18
LBB539_18:                              ;   in Loop: Header=BB539_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB539_4
LBB539_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE8addcmul_EfRS0_S1_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE8addcmul_EfRS0_S1_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE8addcmul_EfRS0_S1_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE8addcmul_EfRS0_S1_: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE8addcmul_EfRS0_S1_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	stur	x2, [x29, #-32]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	str	x8, [sp, #40]
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB540_2
	b	LBB540_1
LBB540_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #290
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB540_2:
	b	LBB540_3
LBB540_3:
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB540_5
	b	LBB540_4
LBB540_4:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #291
	adrp	x3, l_.str.120@PAGE
	add	x3, x3, l_.str.120@PAGEOFF
	bl	___assert_rtn
LBB540_5:
	b	LBB540_6
LBB540_6:
	str	wzr, [sp, #36]
	b	LBB540_7
LBB540_7:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB540_9 Depth 2
                                        ;       Child Loop BB540_11 Depth 3
                                        ;         Child Loop BB540_13 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB540_22
	b	LBB540_8
LBB540_8:                               ;   in Loop: Header=BB540_7 Depth=1
	str	wzr, [sp, #32]
	b	LBB540_9
LBB540_9:                               ;   Parent Loop BB540_7 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB540_11 Depth 3
                                        ;         Child Loop BB540_13 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB540_20
	b	LBB540_10
LBB540_10:                              ;   in Loop: Header=BB540_9 Depth=2
	str	wzr, [sp, #28]
	b	LBB540_11
LBB540_11:                              ;   Parent Loop BB540_7 Depth=1
                                        ;     Parent Loop BB540_9 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB540_13 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB540_18
	b	LBB540_12
LBB540_12:                              ;   in Loop: Header=BB540_11 Depth=3
	str	wzr, [sp, #24]
	b	LBB540_13
LBB540_13:                              ;   Parent Loop BB540_7 Depth=1
                                        ;     Parent Loop BB540_9 Depth=2
                                        ;       Parent Loop BB540_11 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB540_16
	b	LBB540_14
LBB540_14:                              ;   in Loop: Header=BB540_13 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s1, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB540_15
LBB540_15:                              ;   in Loop: Header=BB540_13 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB540_13
LBB540_16:                              ;   in Loop: Header=BB540_11 Depth=3
	b	LBB540_17
LBB540_17:                              ;   in Loop: Header=BB540_11 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB540_11
LBB540_18:                              ;   in Loop: Header=BB540_9 Depth=2
	b	LBB540_19
LBB540_19:                              ;   in Loop: Header=BB540_9 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB540_9
LBB540_20:                              ;   in Loop: Header=BB540_7 Depth=1
	b	LBB540_21
LBB540_21:                              ;   in Loop: Header=BB540_7 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB540_7
LBB540_22:
	ldr	x0, [sp, #40]
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE3addEfRS0_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE3addEfRS0_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE3addEfRS0_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE3addEfRS0_: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE3addEfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB541_2
	b	LBB541_1
LBB541_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #309
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB541_2:
	b	LBB541_3
LBB541_3:
	str	wzr, [sp, #28]
	b	LBB541_4
LBB541_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB541_6 Depth 2
                                        ;       Child Loop BB541_8 Depth 3
                                        ;         Child Loop BB541_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB541_19
	b	LBB541_5
LBB541_5:                               ;   in Loop: Header=BB541_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB541_6
LBB541_6:                               ;   Parent Loop BB541_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB541_8 Depth 3
                                        ;         Child Loop BB541_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB541_17
	b	LBB541_7
LBB541_7:                               ;   in Loop: Header=BB541_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB541_8
LBB541_8:                               ;   Parent Loop BB541_4 Depth=1
                                        ;     Parent Loop BB541_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB541_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB541_15
	b	LBB541_9
LBB541_9:                               ;   in Loop: Header=BB541_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB541_10
LBB541_10:                              ;   Parent Loop BB541_4 Depth=1
                                        ;     Parent Loop BB541_6 Depth=2
                                        ;       Parent Loop BB541_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB541_13
	b	LBB541_11
LBB541_11:                              ;   in Loop: Header=BB541_10 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [x0]
	ldur	s1, [x29, #-12]
	fadd	s0, s0, s1
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB541_12
LBB541_12:                              ;   in Loop: Header=BB541_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB541_10
LBB541_13:                              ;   in Loop: Header=BB541_8 Depth=3
	b	LBB541_14
LBB541_14:                              ;   in Loop: Header=BB541_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB541_8
LBB541_15:                              ;   in Loop: Header=BB541_6 Depth=2
	b	LBB541_16
LBB541_16:                              ;   in Loop: Header=BB541_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB541_6
LBB541_17:                              ;   in Loop: Header=BB541_4 Depth=1
	b	LBB541_18
LBB541_18:                              ;   in Loop: Header=BB541_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB541_4
LBB541_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE5sqrt_Ev ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE5sqrt_Ev
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE5sqrt_Ev
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE5sqrt_Ev: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE5sqrt_Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x8, [x29, #-16]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB542_2
	b	LBB542_1
LBB542_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #272
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB542_2:
	b	LBB542_3
LBB542_3:
	stur	wzr, [x29, #-20]
	b	LBB542_4
LBB542_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB542_6 Depth 2
                                        ;       Child Loop BB542_8 Depth 3
                                        ;         Child Loop BB542_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-20]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB542_19
	b	LBB542_5
LBB542_5:                               ;   in Loop: Header=BB542_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB542_6
LBB542_6:                               ;   Parent Loop BB542_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB542_8 Depth 3
                                        ;         Child Loop BB542_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB542_17
	b	LBB542_7
LBB542_7:                               ;   in Loop: Header=BB542_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB542_8
LBB542_8:                               ;   Parent Loop BB542_4 Depth=1
                                        ;     Parent Loop BB542_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB542_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB542_15
	b	LBB542_9
LBB542_9:                               ;   in Loop: Header=BB542_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB542_10
LBB542_10:                              ;   Parent Loop BB542_4 Depth=1
                                        ;     Parent Loop BB542_6 Depth=2
                                        ;       Parent Loop BB542_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB542_13
	b	LBB542_11
LBB542_11:                              ;   in Loop: Header=BB542_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [x0]
	bl	__Z4sqrtB6v15007f
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB542_12
LBB542_12:                              ;   in Loop: Header=BB542_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB542_10
LBB542_13:                              ;   in Loop: Header=BB542_8 Depth=3
	b	LBB542_14
LBB542_14:                              ;   in Loop: Header=BB542_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB542_8
LBB542_15:                              ;   in Loop: Header=BB542_6 Depth=2
	b	LBB542_16
LBB542_16:                              ;   in Loop: Header=BB542_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB542_6
LBB542_17:                              ;   in Loop: Header=BB542_4 Depth=1
	b	LBB542_18
LBB542_18:                              ;   in Loop: Header=BB542_4 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1
	stur	w8, [x29, #-20]
	b	LBB542_4
LBB542_19:
	ldur	x0, [x29, #-16]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE4div_ERS0_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE4div_ERS0_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE4div_ERS0_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE4div_ERS0_: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE4div_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB543_2
	b	LBB543_1
LBB543_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #254
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB543_2:
	b	LBB543_3
LBB543_3:
	stur	wzr, [x29, #-28]
	b	LBB543_4
LBB543_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB543_6 Depth 2
                                        ;       Child Loop BB543_8 Depth 3
                                        ;         Child Loop BB543_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB543_19
	b	LBB543_5
LBB543_5:                               ;   in Loop: Header=BB543_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB543_6
LBB543_6:                               ;   Parent Loop BB543_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB543_8 Depth 3
                                        ;         Child Loop BB543_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB543_17
	b	LBB543_7
LBB543_7:                               ;   in Loop: Header=BB543_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB543_8
LBB543_8:                               ;   Parent Loop BB543_4 Depth=1
                                        ;     Parent Loop BB543_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB543_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB543_15
	b	LBB543_9
LBB543_9:                               ;   in Loop: Header=BB543_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB543_10
LBB543_10:                              ;   Parent Loop BB543_4 Depth=1
                                        ;     Parent Loop BB543_6 Depth=2
                                        ;       Parent Loop BB543_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB543_13
	b	LBB543_11
LBB543_11:                              ;   in Loop: Header=BB543_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fdiv	s0, s0, s1
	str	s0, [x0]
	b	LBB543_12
LBB543_12:                              ;   in Loop: Header=BB543_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB543_10
LBB543_13:                              ;   in Loop: Header=BB543_8 Depth=3
	b	LBB543_14
LBB543_14:                              ;   in Loop: Header=BB543_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB543_8
LBB543_15:                              ;   in Loop: Header=BB543_6 Depth=2
	b	LBB543_16
LBB543_16:                              ;   in Loop: Header=BB543_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB543_6
LBB543_17:                              ;   in Loop: Header=BB543_4 Depth=1
	b	LBB543_18
LBB543_18:                              ;   in Loop: Header=BB543_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB543_4
LBB543_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_ERS0_ ; -- Begin function _ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_ERS0_
	.weak_definition	__ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_ERS0_
	.p2align	2
__ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_ERS0_: ; @_ZN6tensorIfLi128ELi1ELi1ELi10EE4mul_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB544_2
	b	LBB544_1
LBB544_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #236
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB544_2:
	b	LBB544_3
LBB544_3:
	stur	wzr, [x29, #-28]
	b	LBB544_4
LBB544_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB544_6 Depth 2
                                        ;       Child Loop BB544_8 Depth 3
                                        ;         Child Loop BB544_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB544_19
	b	LBB544_5
LBB544_5:                               ;   in Loop: Header=BB544_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB544_6
LBB544_6:                               ;   Parent Loop BB544_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB544_8 Depth 3
                                        ;         Child Loop BB544_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB544_17
	b	LBB544_7
LBB544_7:                               ;   in Loop: Header=BB544_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB544_8
LBB544_8:                               ;   Parent Loop BB544_4 Depth=1
                                        ;     Parent Loop BB544_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB544_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB544_15
	b	LBB544_9
LBB544_9:                               ;   in Loop: Header=BB544_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB544_10
LBB544_10:                              ;   Parent Loop BB544_4 Depth=1
                                        ;     Parent Loop BB544_6 Depth=2
                                        ;       Parent Loop BB544_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #10
	cset	w8, ge
	tbnz	w8, #0, LBB544_13
	b	LBB544_11
LBB544_11:                              ;   in Loop: Header=BB544_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi128ELi1ELi1ELi10EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB544_12
LBB544_12:                              ;   in Loop: Header=BB544_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB544_10
LBB544_13:                              ;   in Loop: Header=BB544_8 Depth=3
	b	LBB544_14
LBB544_14:                              ;   in Loop: Header=BB544_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB544_8
LBB544_15:                              ;   in Loop: Header=BB544_6 Depth=2
	b	LBB544_16
LBB544_16:                              ;   in Loop: Header=BB544_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB544_6
LBB544_17:                              ;   in Loop: Header=BB544_4 Depth=1
	b	LBB544_18
LBB544_18:                              ;   in Loop: Header=BB544_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB544_4
LBB544_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_Ef ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_Ef
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_Ef
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_Ef: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_Ef
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB545_2
	b	LBB545_1
LBB545_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #218
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB545_2:
	b	LBB545_3
LBB545_3:
	stur	wzr, [x29, #-28]
	b	LBB545_4
LBB545_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB545_6 Depth 2
                                        ;       Child Loop BB545_8 Depth 3
                                        ;         Child Loop BB545_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB545_19
	b	LBB545_5
LBB545_5:                               ;   in Loop: Header=BB545_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB545_6
LBB545_6:                               ;   Parent Loop BB545_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB545_8 Depth 3
                                        ;         Child Loop BB545_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB545_17
	b	LBB545_7
LBB545_7:                               ;   in Loop: Header=BB545_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB545_8
LBB545_8:                               ;   Parent Loop BB545_4 Depth=1
                                        ;     Parent Loop BB545_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB545_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB545_15
	b	LBB545_9
LBB545_9:                               ;   in Loop: Header=BB545_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB545_10
LBB545_10:                              ;   Parent Loop BB545_4 Depth=1
                                        ;     Parent Loop BB545_6 Depth=2
                                        ;       Parent Loop BB545_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB545_13
	b	LBB545_11
LBB545_11:                              ;   in Loop: Header=BB545_10 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB545_12
LBB545_12:                              ;   in Loop: Header=BB545_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB545_10
LBB545_13:                              ;   in Loop: Header=BB545_8 Depth=3
	b	LBB545_14
LBB545_14:                              ;   in Loop: Header=BB545_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB545_8
LBB545_15:                              ;   in Loop: Header=BB545_6 Depth=2
	b	LBB545_16
LBB545_16:                              ;   in Loop: Header=BB545_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB545_6
LBB545_17:                              ;   in Loop: Header=BB545_4 Depth=1
	b	LBB545_18
LBB545_18:                              ;   in Loop: Header=BB545_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB545_4
LBB545_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE8addcmul_EfRS0_S1_ ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE8addcmul_EfRS0_S1_: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #96
	.cfi_def_cfa_offset 96
	stp	x29, x30, [sp, #80]             ; 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	stur	x2, [x29, #-32]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	str	x8, [sp, #40]
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB546_2
	b	LBB546_1
LBB546_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #290
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB546_2:
	b	LBB546_3
LBB546_3:
	ldr	x8, [sp, #40]
	ldr	w8, [x8]
	ldur	x9, [x29, #-32]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB546_5
	b	LBB546_4
LBB546_4:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #291
	adrp	x3, l_.str.120@PAGE
	add	x3, x3, l_.str.120@PAGEOFF
	bl	___assert_rtn
LBB546_5:
	b	LBB546_6
LBB546_6:
	str	wzr, [sp, #36]
	b	LBB546_7
LBB546_7:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB546_9 Depth 2
                                        ;       Child Loop BB546_11 Depth 3
                                        ;         Child Loop BB546_13 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldr	w8, [sp, #36]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB546_22
	b	LBB546_8
LBB546_8:                               ;   in Loop: Header=BB546_7 Depth=1
	str	wzr, [sp, #32]
	b	LBB546_9
LBB546_9:                               ;   Parent Loop BB546_7 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB546_11 Depth 3
                                        ;         Child Loop BB546_13 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB546_20
	b	LBB546_10
LBB546_10:                              ;   in Loop: Header=BB546_9 Depth=2
	str	wzr, [sp, #28]
	b	LBB546_11
LBB546_11:                              ;   Parent Loop BB546_7 Depth=1
                                        ;     Parent Loop BB546_9 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB546_13 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB546_18
	b	LBB546_12
LBB546_12:                              ;   in Loop: Header=BB546_11 Depth=3
	str	wzr, [sp, #24]
	b	LBB546_13
LBB546_13:                              ;   Parent Loop BB546_7 Depth=1
                                        ;     Parent Loop BB546_9 Depth=2
                                        ;       Parent Loop BB546_11 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB546_16
	b	LBB546_14
LBB546_14:                              ;   in Loop: Header=BB546_13 Depth=4
	ldur	s0, [x29, #-12]
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	ldr	s1, [x0]
	fmul	s0, s0, s1
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-32]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #8]                    ; 4-byte Folded Spill
	ldr	x0, [sp, #40]
	ldr	w1, [sp, #36]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #8]                    ; 4-byte Folded Reload
	ldr	s0, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s2, [x0]
	fmadd	s0, s0, s1, s2
	str	s0, [x0]
	b	LBB546_15
LBB546_15:                              ;   in Loop: Header=BB546_13 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB546_13
LBB546_16:                              ;   in Loop: Header=BB546_11 Depth=3
	b	LBB546_17
LBB546_17:                              ;   in Loop: Header=BB546_11 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB546_11
LBB546_18:                              ;   in Loop: Header=BB546_9 Depth=2
	b	LBB546_19
LBB546_19:                              ;   in Loop: Header=BB546_9 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB546_9
LBB546_20:                              ;   in Loop: Header=BB546_7 Depth=1
	b	LBB546_21
LBB546_21:                              ;   in Loop: Header=BB546_7 Depth=1
	ldr	w8, [sp, #36]
	add	w8, w8, #1
	str	w8, [sp, #36]
	b	LBB546_7
LBB546_22:
	ldr	x0, [sp, #40]
	.cfi_def_cfa wsp, 96
	ldp	x29, x30, [sp, #80]             ; 16-byte Folded Reload
	add	sp, sp, #96
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE3addEfRS0_ ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE3addEfRS0_
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE3addEfRS0_
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE3addEfRS0_: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE3addEfRS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	s0, [x29, #-12]
	stur	x1, [x29, #-24]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	str	x8, [sp, #32]
	ldr	x8, [sp, #32]
	ldr	w8, [x8]
	ldur	x9, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB547_2
	b	LBB547_1
LBB547_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #309
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB547_2:
	b	LBB547_3
LBB547_3:
	str	wzr, [sp, #28]
	b	LBB547_4
LBB547_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB547_6 Depth 2
                                        ;       Child Loop BB547_8 Depth 3
                                        ;         Child Loop BB547_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldr	w8, [sp, #28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB547_19
	b	LBB547_5
LBB547_5:                               ;   in Loop: Header=BB547_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB547_6
LBB547_6:                               ;   Parent Loop BB547_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB547_8 Depth 3
                                        ;         Child Loop BB547_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB547_17
	b	LBB547_7
LBB547_7:                               ;   in Loop: Header=BB547_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB547_8
LBB547_8:                               ;   Parent Loop BB547_4 Depth=1
                                        ;     Parent Loop BB547_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB547_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB547_15
	b	LBB547_9
LBB547_9:                               ;   in Loop: Header=BB547_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB547_10
LBB547_10:                              ;   Parent Loop BB547_4 Depth=1
                                        ;     Parent Loop BB547_6 Depth=2
                                        ;       Parent Loop BB547_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB547_13
	b	LBB547_11
LBB547_11:                              ;   in Loop: Header=BB547_10 Depth=4
	ldr	x0, [sp, #32]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	ldur	s1, [x29, #-12]
	fadd	s0, s0, s1
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldr	w1, [sp, #28]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB547_12
LBB547_12:                              ;   in Loop: Header=BB547_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB547_10
LBB547_13:                              ;   in Loop: Header=BB547_8 Depth=3
	b	LBB547_14
LBB547_14:                              ;   in Loop: Header=BB547_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB547_8
LBB547_15:                              ;   in Loop: Header=BB547_6 Depth=2
	b	LBB547_16
LBB547_16:                              ;   in Loop: Header=BB547_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB547_6
LBB547_17:                              ;   in Loop: Header=BB547_4 Depth=1
	b	LBB547_18
LBB547_18:                              ;   in Loop: Header=BB547_4 Depth=1
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB547_4
LBB547_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE5sqrt_Ev ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE5sqrt_Ev
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE5sqrt_Ev
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE5sqrt_Ev: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE5sqrt_Ev
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x8, [x29, #-16]
	ldur	x8, [x29, #-16]
	ldr	w8, [x8]
	subs	w8, w8, #0
	cset	w8, gt
	tbnz	w8, #0, LBB548_2
	b	LBB548_1
LBB548_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #272
	adrp	x3, l_.str.119@PAGE
	add	x3, x3, l_.str.119@PAGEOFF
	bl	___assert_rtn
LBB548_2:
	b	LBB548_3
LBB548_3:
	stur	wzr, [x29, #-20]
	b	LBB548_4
LBB548_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB548_6 Depth 2
                                        ;       Child Loop BB548_8 Depth 3
                                        ;         Child Loop BB548_10 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-20]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB548_19
	b	LBB548_5
LBB548_5:                               ;   in Loop: Header=BB548_4 Depth=1
	str	wzr, [sp, #24]
	b	LBB548_6
LBB548_6:                               ;   Parent Loop BB548_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB548_8 Depth 3
                                        ;         Child Loop BB548_10 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB548_17
	b	LBB548_7
LBB548_7:                               ;   in Loop: Header=BB548_6 Depth=2
	str	wzr, [sp, #20]
	b	LBB548_8
LBB548_8:                               ;   Parent Loop BB548_4 Depth=1
                                        ;     Parent Loop BB548_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB548_10 Depth 4
	ldr	w8, [sp, #20]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB548_15
	b	LBB548_9
LBB548_9:                               ;   in Loop: Header=BB548_8 Depth=3
	str	wzr, [sp, #16]
	b	LBB548_10
LBB548_10:                              ;   Parent Loop BB548_4 Depth=1
                                        ;     Parent Loop BB548_6 Depth=2
                                        ;       Parent Loop BB548_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB548_13
	b	LBB548_11
LBB548_11:                              ;   in Loop: Header=BB548_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	bl	__Z4sqrtB6v15007f
	str	s0, [sp, #4]                    ; 4-byte Folded Spill
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-20]
	ldr	w2, [sp, #24]
	ldr	w3, [sp, #20]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [sp, #4]                    ; 4-byte Folded Reload
	str	s0, [x0]
	b	LBB548_12
LBB548_12:                              ;   in Loop: Header=BB548_10 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB548_10
LBB548_13:                              ;   in Loop: Header=BB548_8 Depth=3
	b	LBB548_14
LBB548_14:                              ;   in Loop: Header=BB548_8 Depth=3
	ldr	w8, [sp, #20]
	add	w8, w8, #1
	str	w8, [sp, #20]
	b	LBB548_8
LBB548_15:                              ;   in Loop: Header=BB548_6 Depth=2
	b	LBB548_16
LBB548_16:                              ;   in Loop: Header=BB548_6 Depth=2
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB548_6
LBB548_17:                              ;   in Loop: Header=BB548_4 Depth=1
	b	LBB548_18
LBB548_18:                              ;   in Loop: Header=BB548_4 Depth=1
	ldur	w8, [x29, #-20]
	add	w8, w8, #1
	stur	w8, [x29, #-20]
	b	LBB548_4
LBB548_19:
	ldur	x0, [x29, #-16]
	.cfi_def_cfa wsp, 64
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE4div_ERS0_ ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE4div_ERS0_
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE4div_ERS0_
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE4div_ERS0_: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE4div_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB549_2
	b	LBB549_1
LBB549_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #254
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB549_2:
	b	LBB549_3
LBB549_3:
	stur	wzr, [x29, #-28]
	b	LBB549_4
LBB549_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB549_6 Depth 2
                                        ;       Child Loop BB549_8 Depth 3
                                        ;         Child Loop BB549_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB549_19
	b	LBB549_5
LBB549_5:                               ;   in Loop: Header=BB549_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB549_6
LBB549_6:                               ;   Parent Loop BB549_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB549_8 Depth 3
                                        ;         Child Loop BB549_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB549_17
	b	LBB549_7
LBB549_7:                               ;   in Loop: Header=BB549_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB549_8
LBB549_8:                               ;   Parent Loop BB549_4 Depth=1
                                        ;     Parent Loop BB549_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB549_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB549_15
	b	LBB549_9
LBB549_9:                               ;   in Loop: Header=BB549_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB549_10
LBB549_10:                              ;   Parent Loop BB549_4 Depth=1
                                        ;     Parent Loop BB549_6 Depth=2
                                        ;       Parent Loop BB549_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB549_13
	b	LBB549_11
LBB549_11:                              ;   in Loop: Header=BB549_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fdiv	s0, s0, s1
	str	s0, [x0]
	b	LBB549_12
LBB549_12:                              ;   in Loop: Header=BB549_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB549_10
LBB549_13:                              ;   in Loop: Header=BB549_8 Depth=3
	b	LBB549_14
LBB549_14:                              ;   in Loop: Header=BB549_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB549_8
LBB549_15:                              ;   in Loop: Header=BB549_6 Depth=2
	b	LBB549_16
LBB549_16:                              ;   in Loop: Header=BB549_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB549_6
LBB549_17:                              ;   in Loop: Header=BB549_4 Depth=1
	b	LBB549_18
LBB549_18:                              ;   in Loop: Header=BB549_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB549_4
LBB549_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_ERS0_ ; -- Begin function _ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_ERS0_
	.weak_definition	__ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_ERS0_
	.p2align	2
__ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_ERS0_: ; @_ZN6tensorIfLi10ELi1ELi1ELi1EE4mul_ERS0_
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	stur	x1, [x29, #-16]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #16]                   ; 8-byte Folded Spill
	stur	x8, [x29, #-24]
	ldur	x8, [x29, #-24]
	ldr	w8, [x8]
	ldur	x9, [x29, #-16]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, eq
	tbnz	w8, #0, LBB550_2
	b	LBB550_1
LBB550_1:
	adrp	x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGE
	add	x0, x0, l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef@PAGEOFF
	adrp	x1, l_.str.29@PAGE
	add	x1, x1, l_.str.29@PAGEOFF
	mov	w2, #236
	adrp	x3, l_.str.37@PAGE
	add	x3, x3, l_.str.37@PAGEOFF
	bl	___assert_rtn
LBB550_2:
	b	LBB550_3
LBB550_3:
	stur	wzr, [x29, #-28]
	b	LBB550_4
LBB550_4:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB550_6 Depth 2
                                        ;       Child Loop BB550_8 Depth 3
                                        ;         Child Loop BB550_10 Depth 4
	ldr	x9, [sp, #16]                   ; 8-byte Folded Reload
	ldur	w8, [x29, #-28]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB550_19
	b	LBB550_5
LBB550_5:                               ;   in Loop: Header=BB550_4 Depth=1
	str	wzr, [sp, #32]
	b	LBB550_6
LBB550_6:                               ;   Parent Loop BB550_4 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB550_8 Depth 3
                                        ;         Child Loop BB550_10 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB550_17
	b	LBB550_7
LBB550_7:                               ;   in Loop: Header=BB550_6 Depth=2
	str	wzr, [sp, #28]
	b	LBB550_8
LBB550_8:                               ;   Parent Loop BB550_4 Depth=1
                                        ;     Parent Loop BB550_6 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB550_10 Depth 4
	ldr	w8, [sp, #28]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB550_15
	b	LBB550_9
LBB550_9:                               ;   in Loop: Header=BB550_8 Depth=3
	str	wzr, [sp, #24]
	b	LBB550_10
LBB550_10:                              ;   Parent Loop BB550_4 Depth=1
                                        ;     Parent Loop BB550_6 Depth=2
                                        ;       Parent Loop BB550_8 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB550_13
	b	LBB550_11
LBB550_11:                              ;   in Loop: Header=BB550_10 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s0, [x0]
	str	s0, [sp, #12]                   ; 4-byte Folded Spill
	ldur	x0, [x29, #-24]
	ldur	w1, [x29, #-28]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #28]
	ldr	w4, [sp, #24]
	bl	__ZN6tensorIfLi10ELi1ELi1ELi1EEclEiiii
	ldr	s1, [sp, #12]                   ; 4-byte Folded Reload
	ldr	s0, [x0]
	fmul	s0, s0, s1
	str	s0, [x0]
	b	LBB550_12
LBB550_12:                              ;   in Loop: Header=BB550_10 Depth=4
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB550_10
LBB550_13:                              ;   in Loop: Header=BB550_8 Depth=3
	b	LBB550_14
LBB550_14:                              ;   in Loop: Header=BB550_8 Depth=3
	ldr	w8, [sp, #28]
	add	w8, w8, #1
	str	w8, [sp, #28]
	b	LBB550_8
LBB550_15:                              ;   in Loop: Header=BB550_6 Depth=2
	b	LBB550_16
LBB550_16:                              ;   in Loop: Header=BB550_6 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB550_6
LBB550_17:                              ;   in Loop: Header=BB550_4 Depth=1
	b	LBB550_18
LBB550_18:                              ;   in Loop: Header=BB550_4 Depth=1
	ldur	w8, [x29, #-28]
	add	w8, w8, #1
	stur	w8, [x29, #-28]
	b	LBB550_4
LBB550_19:
	ldur	x0, [x29, #-24]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE11update_baseEv ; -- Begin function _ZN6LinearILi64ELi10ELi128ELi1ELi1EE11update_baseEv
	.weak_definition	__ZN6LinearILi64ELi10ELi128ELi1ELi1EE11update_baseEv
	.p2align	2
__ZN6LinearILi64ELi10ELi128ELi1ELi1EE11update_baseEv: ; @_ZN6LinearILi64ELi10ELi128ELi1ELi1EE11update_baseEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	str	x0, [sp, #8]
	ldr	x8, [sp, #8]
	str	x8, [sp]                        ; 8-byte Folded Spill
	mov	x9, #45808
	add	x0, x8, x9
	mov	x9, x8
	add	x1, x9, #136
	mov	x9, #7868
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi128ELi1ELi1ELi10EE6updateER6tensorIfLi128ELi1ELi1ELi10EES3_
	ldr	x8, [sp]                        ; 8-byte Folded Reload
	mov	x9, #780
	movk	x9, #1, lsl #16
	add	x0, x8, x9
	mov	x9, #5260
	add	x1, x8, x9
	mov	x9, #12992
	add	x2, x8, x9
	bl	__ZN8AdaDeltaILi10ELi1ELi1ELi1EE6updateER6tensorIfLi10ELi1ELi1ELi1EES3_
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__Z7to_hostI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i ; -- Begin function _Z7to_hostI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	.weak_definition	__Z7to_hostI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	.p2align	2
__Z7to_hostI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i: ; @_Z7to_hostI6tensorIfLi64ELi10ELi1ELi1EEEvPT_i
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, #8]
	str	w1, [sp, #4]
	add	sp, sp, #16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	__ZN6tensorIfLi64ELi1ELi1ELi1EE3sumEv ; -- Begin function _ZN6tensorIfLi64ELi1ELi1ELi1EE3sumEv
	.weak_definition	__ZN6tensorIfLi64ELi1ELi1ELi1EE3sumEv
	.p2align	2
__ZN6tensorIfLi64ELi1ELi1ELi1EE3sumEv:  ; @_ZN6tensorIfLi64ELi1ELi1ELi1EE3sumEv
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #80
	.cfi_def_cfa_offset 80
	stp	x29, x30, [sp, #64]             ; 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	x0, [x29, #-8]
	ldur	x8, [x29, #-8]
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	stur	x8, [x29, #-16]
	movi	d0, #0000000000000000
	stur	s0, [x29, #-20]
	stur	wzr, [x29, #-24]
	b	LBB553_1
LBB553_1:                               ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB553_3 Depth 2
                                        ;       Child Loop BB553_5 Depth 3
                                        ;         Child Loop BB553_7 Depth 4
	ldr	x9, [sp, #8]                    ; 8-byte Folded Reload
	ldur	w8, [x29, #-24]
	ldr	w9, [x9]
	subs	w8, w8, w9
	cset	w8, ge
	tbnz	w8, #0, LBB553_16
	b	LBB553_2
LBB553_2:                               ;   in Loop: Header=BB553_1 Depth=1
	movi	d0, #0000000000000000
	stur	s0, [x29, #-28]
	str	wzr, [sp, #32]
	b	LBB553_3
LBB553_3:                               ;   Parent Loop BB553_1 Depth=1
                                        ; =>  This Loop Header: Depth=2
                                        ;       Child Loop BB553_5 Depth 3
                                        ;         Child Loop BB553_7 Depth 4
	ldr	w8, [sp, #32]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB553_14
	b	LBB553_4
LBB553_4:                               ;   in Loop: Header=BB553_3 Depth=2
	movi	d0, #0000000000000000
	str	s0, [sp, #28]
	str	wzr, [sp, #24]
	b	LBB553_5
LBB553_5:                               ;   Parent Loop BB553_1 Depth=1
                                        ;     Parent Loop BB553_3 Depth=2
                                        ; =>    This Loop Header: Depth=3
                                        ;         Child Loop BB553_7 Depth 4
	ldr	w8, [sp, #24]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB553_12
	b	LBB553_6
LBB553_6:                               ;   in Loop: Header=BB553_5 Depth=3
	movi	d0, #0000000000000000
	str	s0, [sp, #20]
	str	wzr, [sp, #16]
	b	LBB553_7
LBB553_7:                               ;   Parent Loop BB553_1 Depth=1
                                        ;     Parent Loop BB553_3 Depth=2
                                        ;       Parent Loop BB553_5 Depth=3
                                        ; =>      This Inner Loop Header: Depth=4
	ldr	w8, [sp, #16]
	subs	w8, w8, #1
	cset	w8, ge
	tbnz	w8, #0, LBB553_10
	b	LBB553_8
LBB553_8:                               ;   in Loop: Header=BB553_7 Depth=4
	ldur	x0, [x29, #-16]
	ldur	w1, [x29, #-24]
	ldr	w2, [sp, #32]
	ldr	w3, [sp, #24]
	ldr	w4, [sp, #16]
	bl	__ZN6tensorIfLi64ELi1ELi1ELi1EEclEiiii
	ldr	s1, [x0]
	ldr	s0, [sp, #20]
	fadd	s0, s0, s1
	str	s0, [sp, #20]
	b	LBB553_9
LBB553_9:                               ;   in Loop: Header=BB553_7 Depth=4
	ldr	w8, [sp, #16]
	add	w8, w8, #1
	str	w8, [sp, #16]
	b	LBB553_7
LBB553_10:                              ;   in Loop: Header=BB553_5 Depth=3
	ldr	s1, [sp, #20]
	ldr	s0, [sp, #28]
	fadd	s0, s0, s1
	str	s0, [sp, #28]
	b	LBB553_11
LBB553_11:                              ;   in Loop: Header=BB553_5 Depth=3
	ldr	w8, [sp, #24]
	add	w8, w8, #1
	str	w8, [sp, #24]
	b	LBB553_5
LBB553_12:                              ;   in Loop: Header=BB553_3 Depth=2
	ldr	s1, [sp, #28]
	ldur	s0, [x29, #-28]
	fadd	s0, s0, s1
	stur	s0, [x29, #-28]
	b	LBB553_13
LBB553_13:                              ;   in Loop: Header=BB553_3 Depth=2
	ldr	w8, [sp, #32]
	add	w8, w8, #1
	str	w8, [sp, #32]
	b	LBB553_3
LBB553_14:                              ;   in Loop: Header=BB553_1 Depth=1
	ldur	s1, [x29, #-28]
	ldur	s0, [x29, #-20]
	fadd	s0, s0, s1
	stur	s0, [x29, #-20]
	b	LBB553_15
LBB553_15:                              ;   in Loop: Header=BB553_1 Depth=1
	ldur	w8, [x29, #-24]
	add	w8, w8, #1
	stur	w8, [x29, #-24]
	b	LBB553_1
LBB553_16:
	ldur	s0, [x29, #-20]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             ; 16-byte Folded Reload
	add	sp, sp, #80
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"a:b:d:l:m:v:h"

	.section	__DATA,__data
	.p2align	3                               ; @_ZL12long_options
__ZL12long_options:
	.quad	l_.str.17
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	118                             ; 0x76
	.space	4
	.quad	l_.str.18
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	100                             ; 0x64
	.space	4
	.quad	l_.str.19
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	108                             ; 0x6c
	.space	4
	.quad	l_.str.20
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	109                             ; 0x6d
	.space	4
	.quad	l_.str.21
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	98                              ; 0x62
	.space	4
	.quad	l_.str.1
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	0                               ; 0x0
	.space	4
	.quad	l_.str.2
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	0                               ; 0x0
	.space	4
	.quad	l_.str.3
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	0                               ; 0x0
	.space	4
	.quad	l_.str.4
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	0                               ; 0x0
	.space	4
	.quad	l_.str.5
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	0                               ; 0x0
	.space	4
	.quad	l_.str.6
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	0                               ; 0x0
	.space	4
	.quad	l_.str.7
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	0                               ; 0x0
	.space	4
	.quad	l_.str.22
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	97                              ; 0x61
	.space	4
	.quad	l_.str.8
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	0                               ; 0x0
	.space	4
	.quad	l_.str.23
	.long	1                               ; 0x1
	.space	4
	.quad	0
	.long	104                             ; 0x68
	.space	4
	.space	32

	.section	__TEXT,__cstring,cstring_literals
l_.str.1:                               ; @.str.1
	.asciz	"train-data-size"

l_.str.2:                               ; @.str.2
	.asciz	"test-data-size"

l_.str.3:                               ; @.str.3
	.asciz	"log-interval"

l_.str.4:                               ; @.str.4
	.asciz	"weight-seed"

l_.str.5:                               ; @.str.5
	.asciz	"dropout-seed-1"

l_.str.6:                               ; @.str.6
	.asciz	"dropout-seed-2"

l_.str.7:                               ; @.str.7
	.asciz	"grad-dbg"

l_.str.8:                               ; @.str.8
	.asciz	"log"

l_.str.9:                               ; @.str.9
	.asciz	"bug:%s:%d: should handle option %s\n"

l_.str.10:                              ; @.str.10
	.asciz	"./include/mnist_util.h"

l_.str.11:                              ; @.str.11
	.asciz	"error: cannot specify --batch-sz (%d) > MAX_BATCH_SIZE (%d)\n"

l_.str.12:                              ; @.str.12
	.asciz	"error: invalid algorithm (%s)\n"

l_.str.13:                              ; @.str.13
	.asciz	"error: --cuda-base 1 allowed only with nvcc\n"

l_.str.14:                              ; @.str.14
	.asciz	"data"

l_.str.15:                              ; @.str.15
	.asciz	"cpu_base"

l_.str.16:                              ; @.str.16
	.asciz	"mnist.log"

l_.str.17:                              ; @.str.17
	.asciz	"verbose"

l_.str.18:                              ; @.str.18
	.asciz	"data-dir"

l_.str.19:                              ; @.str.19
	.asciz	"lr"

l_.str.20:                              ; @.str.20
	.asciz	"epochs"

l_.str.21:                              ; @.str.21
	.asciz	"batch-size"

l_.str.22:                              ; @.str.22
	.asciz	"algo"

l_.str.23:                              ; @.str.23
	.asciz	"help"

l_.str.24:                              ; @.str.24
	.asciz	"cpu_omp"

l_.str.25:                              ; @.str.25
	.asciz	"cpu_simd"

l_.str.26:                              ; @.str.26
	.asciz	"cuda_base"

l_.str.27:                              ; @.str.27
	.asciz	"cuda"

l_.str.28:                              ; @.str.28
	.asciz	"usage:\n\n%s [options]\n\n -d,--data-dir D : read data from D [%s]\n -m,--epochs N : run N epochs [%ld]\n -b,--batch-size N : set batch size to N [%d]\n -a,--algo ALGORITHM : set the algorithm (implementation) used [%s]\n -v,--verbose L : set verbosity level to L [%d]\n -l,--lr ETA : set learning rate to ETA [%f]\n --train-data-size N : set training data size to N [%d]\n --test-data-size N : set test data size to N [%d]\n --log-interval N : show progress every N batches [%ld]\n --dropout-seed-1 S : set seed for dropout layer 1 to S [%ld]\n --dropout-seed-2 S : set seed for dropout layer 2 to S [%ld]\n --weight-seed S : set seed for initial weights to S [%ld]\n --grad-dbg 0/1 : debug gradient computation [%d]\n --log FILE : write log to FILE [%s]\n -h,--help\n"

l___func__._Z11tensor_mainiPPc:         ; @__func__._Z11tensor_mainiPPc
	.asciz	"tensor_main"

l_.str.29:                              ; @.str.29
	.asciz	"tensor.h"

l_.str.30:                              ; @.str.30
	.asciz	"x1 == n"

l_.str.31:                              ; @.str.31
	.asciz	"x2 == n * N"

l_.str.32:                              ; @.str.32
	.asciz	"x3 == n * N * N"

l_.str.33:                              ; @.str.33
	.asciz	"x4 == n * N * N * N"

l_.str.34:                              ; @.str.34
	.asciz	"a <= c(i)"

l_.str.35:                              ; @.str.35
	.asciz	"c(i) < b"

l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei: ; @__func__._ZN6tensorIfLi2ELi1ELi1ELi1EE6set_n0Ei
	.asciz	"set_n0"

l_.str.36:                              ; @.str.36
	.asciz	"n0 <= N0"

l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_: ; @__func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3dotERS0_
	.asciz	"dot"

l_.str.37:                              ; @.str.37
	.asciz	"a.n0 == b.n0"

l_.str.38:                              ; @.str.38
	.asciz	"wb"

l_.str.39:                              ; @.str.39
	.asciz	"fopen"

l_.str.40:                              ; @.str.40
	.asciz	"open a log %s"

l_.str.41:                              ; @.str.41
	.asciz	"clock_gettime"

l_.str.42:                              ; @.str.42
	.asciz	"%ld: "

l_.str.43:                              ; @.str.43
	.asciz	"\n"

l_.str.44:                              ; @.str.44
	.asciz	"ctime_r"

l_.str.45:                              ; @.str.45
	.asciz	"verbose=%d"

l_.str.46:                              ; @.str.46
	.asciz	"data-dir=%s"

l_.str.47:                              ; @.str.47
	.asciz	"lr=%f"

l_.str.48:                              ; @.str.48
	.asciz	"epochs=%ld"

l_.str.49:                              ; @.str.49
	.asciz	"batch-size=%d"

l_.str.50:                              ; @.str.50
	.asciz	"train-data-size=%d"

l_.str.51:                              ; @.str.51
	.asciz	"test-data-size=%ld"

l_.str.52:                              ; @.str.52
	.asciz	"weight-seed=%ld"

l_.str.53:                              ; @.str.53
	.asciz	"dropout-seed-1=%ld"

l_.str.54:                              ; @.str.54
	.asciz	"dropout-seed-2=%ld"

l_.str.55:                              ; @.str.55
	.asciz	"grad-dbg=%d"

l_.str.56:                              ; @.str.56
	.asciz	"algo=%d"

l_.str.57:                              ; @.str.57
	.asciz	"algo_s=%s"

l_.str.58:                              ; @.str.58
	.asciz	"cuda_algo=%d"

l_.str.59:                              ; @.str.59
	.asciz	"log=%s"

l_.str.60:                              ; @.str.60
	.asciz	"host=%s"

l_.str.61:                              ; @.str.61
	.asciz	"USER"

l_.str.62:                              ; @.str.62
	.asciz	"PWD"

l_.str.63:                              ; @.str.63
	.asciz	"SLURM_SUBMIT_DIR"

l_.str.64:                              ; @.str.64
	.asciz	"SLURM_SUBMIT_HOST"

l_.str.65:                              ; @.str.65
	.asciz	"SLURM_JOB_NAME"

l_.str.66:                              ; @.str.66
	.asciz	"SLURM_JOB_CPUS_PER_NODE"

l_.str.67:                              ; @.str.67
	.asciz	"SLURM_NTASKS"

l_.str.68:                              ; @.str.68
	.asciz	"SLURM_NPROCS"

l_.str.69:                              ; @.str.69
	.asciz	"SLURM_JOB_ID"

l_.str.70:                              ; @.str.70
	.asciz	"SLURM_JOBID"

l_.str.71:                              ; @.str.71
	.asciz	"SLURM_NNODES"

l_.str.72:                              ; @.str.72
	.asciz	"SLURM_JOB_NUM_NODES"

l_.str.73:                              ; @.str.73
	.asciz	"SLURM_NODELIST"

l_.str.74:                              ; @.str.74
	.asciz	"SLURM_JOB_PARTITION"

l_.str.75:                              ; @.str.75
	.asciz	"SLURM_TASKS_PER_NODE"

l_.str.76:                              ; @.str.76
	.asciz	"SLURM_JOB_NODELIST"

l_.str.77:                              ; @.str.77
	.asciz	"CUDA_VISIBLE_DEVICES"

l_.str.78:                              ; @.str.78
	.asciz	"GPU_DEVICE_ORDINAL"

l_.str.79:                              ; @.str.79
	.asciz	"SLURM_CPUS_ON_NODE"

l_.str.80:                              ; @.str.80
	.asciz	"SLURM_TASK_PID"

l_.str.81:                              ; @.str.81
	.asciz	"SLURM_NODEID"

l_.str.82:                              ; @.str.82
	.asciz	"SLURM_PROCID"

l_.str.83:                              ; @.str.83
	.asciz	"SLURM_LOCALID"

l_.str.84:                              ; @.str.84
	.asciz	"SLURM_JOB_UID"

l_.str.85:                              ; @.str.85
	.asciz	"SLURM_JOB_USER"

l_.str.86:                              ; @.str.86
	.asciz	"SLURM_JOB_GID"

l_.str.87:                              ; @.str.87
	.asciz	"SLURMD_NODENAME"

l_.str.88:                              ; @.str.88
	.asciz	"%s=%s"

l_.str.89:                              ; @.str.89
	.asciz	"%s undefined"

l_.str.90:                              ; @.str.90
	.asciz	"loading data from %s"

l_.str.91:                              ; @.str.91
	.asciz	"%s/%s-images-idx3-ubyte"

l_.str.92:                              ; @.str.92
	.asciz	"train"

l_.str.93:                              ; @.str.93
	.asciz	"t10k"

l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi: ; @__func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE4loadER6loggerPKclffi
	.asciz	"load"

l_.str.94:                              ; @.str.94
	.asciz	"mnist_data.h"

l_.str.95:                              ; @.str.95
	.asciz	"written < (int)sizeof(images_file)"

l_.str.96:                              ; @.str.96
	.asciz	"%s/%s-labels-idx1-ubyte"

l_.str.97:                              ; @.str.97
	.asciz	"written < (int)sizeof(labels_file)"

l_.str.98:                              ; @.str.98
	.asciz	"label_pv.n_dims == 1"

l_.str.99:                              ; @.str.99
	.asciz	"n_img_dims == 3 || n_img_dims == 4"

l_.str.100:                             ; @.str.100
	.asciz	"img_pv.dim[0] == n_data"

l_.str.101:                             ; @.str.101
	.asciz	"img_pv.dim[n_img_dims - 2] == H"

l_.str.102:                             ; @.str.102
	.asciz	"img_pv.dim[n_img_dims - 1] == W"

l_.str.103:                             ; @.str.103
	.asciz	"img_pv.data_sz == n_data * IC * H * W"

l_.str.104:                             ; @.str.104
	.asciz	"use %ld data items out of %ld"

l_.str.105:                             ; @.str.105
	.asciz	"rb"

l_.str.106:                             ; @.str.106
	.asciz	"%s"

l_.str.107:                             ; @.str.107
	.asciz	"fseek"

l_.str.108:                             ; @.str.108
	.asciz	"ftell"

l___func__._ZL26read_pascal_vincent_formatPKc: ; @__func__._ZL26read_pascal_vincent_formatPKc
	.asciz	"read_pascal_vincent_format"

l_.str.109:                             ; @.str.109
	.asciz	"nd == 1 || nd == 3 || nd == 4"

l_.str.110:                             ; @.str.110
	.asciz	"ty == 8"

l_.str.111:                             ; @.str.111
	.asciz	"pos + data_sz == file_sz"

l_.str.112:                             ; @.str.112
	.asciz	"malloc"

l_.str.113:                             ; @.str.113
	.asciz	"fread"

l___func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii: ; @__func__._ZN13mnist_datasetILi64ELi1ELi28ELi28EE8get_dataER6tensorIfLi64ELi1ELi28ELi28EERS1_IiLi64ELi1ELi1ELi1EES5_ii
	.asciz	"get_data"

l_.str.114:                             ; @.str.114
	.asciz	"B <= maxB"

l_.str.115:                             ; @.str.115
	.asciz	"close a log %s"

l_.str.116:                             ; @.str.116
	.asciz	"x = (%f,%f), f(x) = %f\n"

l___func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_: ; @__func__._ZN8AdaDeltaILi2ELi1ELi1ELi1EE6updateER6tensorIfLi2ELi1ELi1ELi1EES3_
	.asciz	"update"

l_.str.117:                             ; @.str.117
	.asciz	"ada_delta.h"

l_.str.118:                             ; @.str.118
	.asciz	"w.n0 == N0"

l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef: ; @__func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4mul_Ef
	.asciz	"mul_"

l_.str.119:                             ; @.str.119
	.asciz	"a.n0 > 0"

l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_: ; @__func__._ZN6tensorIfLi2ELi1ELi1ELi1EE8addcmul_EfRS0_S1_
	.asciz	"addcmul_"

l_.str.120:                             ; @.str.120
	.asciz	"a.n0 == c.n0"

l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_: ; @__func__._ZN6tensorIfLi2ELi1ELi1ELi1EE3addEfRS0_
	.asciz	"add"

l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev: ; @__func__._ZN6tensorIfLi2ELi1ELi1ELi1EE5sqrt_Ev
	.asciz	"sqrt_"

l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_: ; @__func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4div_ERS0_
	.asciz	"div_"

l___func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_: ; @__func__._ZN6tensorIfLi2ELi1ELi1ELi1EE4add_EfRS0_
	.asciz	"add_"

l_.str.121:                             ; @.str.121
	.asciz	"==== %d ====\n"

l_.str.122:                             ; @.str.122
	.asciz	"max relative error = %.9f\n"

l_.str.123:                             ; @.str.123
	.asciz	"avg relative error = %.9f\n"

l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi: ; @__PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE7forwardER6tensorIfLi64ELi1ELi28ELi28EEi
	.asciz	"tensor<real, maxB, OC, H - K + 1, W - K + 1> &Convolution2D<64, 1, 28, 28, 3, 32>::forward(tensor<real, maxB, IC, H, W> &, int) [maxB = 64, IC = 1, H = 28, W = 28, K = 3, OC = 32]"

l_.str.124:                             ; @.str.124
	.asciz	"%s: starts"

l___unnamed_49:                         ; @0
	.asciz	";./include/convolution.h;Convolution2D<64, 1, 28, 28, 3, 32>::forward_cpu_omp;232;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @1
l___unnamed_2:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	85                              ; 0x55
	.quad	l___unnamed_49

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_50:                         ; @2
	.asciz	";./include/convolution.h;Convolution2D<64, 1, 28, 28, 3, 32>::forward_cpu_omp;232;41;;"

	.section	__DATA,__const
	.p2align	3                               ; @3
l___unnamed_3:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	86                              ; 0x56
	.quad	l___unnamed_50

	.p2align	3                               ; @4
l___unnamed_1:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	85                              ; 0x55
	.quad	l___unnamed_49

	.section	__TEXT,__cstring,cstring_literals
l_.str.125:                             ; @.str.125
	.asciz	"./include/convolution.h"

l_.str.126:                             ; @.str.126
	.asciz	"error:%s:%d: a supposedly CUDA function (%s) compiled by non-CUDA compiler and gets called\n"

l_.str.127:                             ; @.str.127
	.asciz	"%s: ends. took %ld nsec"

l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE: ; @__PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	.asciz	"tensor<real, maxB, IC, H, W> &Convolution2D<64, 1, 28, 28, 3, 32>::backward(tensor<real, maxB, OC, H - K + 1, W - K + 1> &) [maxB = 64, IC = 1, H = 28, W = 28, K = 3, OC = 32]"

l___unnamed_51:                         ; @5
	.asciz	";./include/convolution.h;Convolution2D<64, 1, 28, 28, 3, 32>::backward_cpu_omp;417;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @6
l___unnamed_7:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	86                              ; 0x56
	.quad	l___unnamed_51

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_52:                         ; @7
	.asciz	";./include/convolution.h;Convolution2D<64, 1, 28, 28, 3, 32>::backward_cpu_omp;417;41;;"

	.section	__DATA,__const
	.p2align	3                               ; @8
l___unnamed_8:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	87                              ; 0x57
	.quad	l___unnamed_52

	.p2align	3                               ; @9
l___unnamed_4:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	86                              ; 0x56
	.quad	l___unnamed_51

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_53:                         ; @10
	.asciz	";./include/convolution.h;Convolution2D<64, 1, 28, 28, 3, 32>::backward_cpu_omp;452;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @11
l___unnamed_9:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	86                              ; 0x56
	.quad	l___unnamed_53

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_54:                         ; @12
	.asciz	";./include/convolution.h;Convolution2D<64, 1, 28, 28, 3, 32>::backward_cpu_omp;452;29;;"

	.section	__DATA,__const
	.p2align	3                               ; @13
l___unnamed_10:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	87                              ; 0x57
	.quad	l___unnamed_54

	.p2align	3                               ; @14
l___unnamed_5:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	86                              ; 0x56
	.quad	l___unnamed_53

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_55:                         ; @15
	.asciz	";./include/convolution.h;Convolution2D<64, 1, 28, 28, 3, 32>::backward_cpu_omp;465;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @16
l___unnamed_11:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	86                              ; 0x56
	.quad	l___unnamed_55

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_56:                         ; @17
	.asciz	";./include/convolution.h;Convolution2D<64, 1, 28, 28, 3, 32>::backward_cpu_omp;465;41;;"

	.section	__DATA,__const
	.p2align	3                               ; @18
l___unnamed_12:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	87                              ; 0x57
	.quad	l___unnamed_56

	.p2align	3                               ; @19
l___unnamed_6:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	86                              ; 0x56
	.quad	l___unnamed_55

	.section	__TEXT,__cstring,cstring_literals
l_.str.131:                             ; @.str.131
	.asciz	"\342\210\202L/\342\210\202x\343\203\273dx = %.9f\n"

l_.str.132:                             ; @.str.132
	.asciz	"\342\210\202L/\342\210\202w\343\203\273dw = %.9f\n"

l_.str.133:                             ; @.str.133
	.asciz	"L- = %.9f\n"

l_.str.134:                             ; @.str.134
	.asciz	"L  = %.9f\n"

l_.str.135:                             ; @.str.135
	.asciz	"L+ = %.9f\n"

l_.str.136:                             ; @.str.136
	.asciz	"A = \342\210\202L/\342\210\202x\343\203\273dx + \342\210\202L/\342\210\202w\343\203\273dw = %.9f\n"

l_.str.137:                             ; @.str.137
	.asciz	"B = \316\224L = %.9f\n"

l_.str.138:                             ; @.str.138
	.asciz	"relative error = |A-B|/max(|A|,|B|) = %.9f\n"

l___PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi: ; @__PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	.asciz	"tensor<real, N0, N1, N2, N3> &Relu<64, 2, 16, 16>::forward(tensor<real, N0, N1, N2, N3> &, int) [N0 = 64, N1 = 2, N2 = 16, N3 = 16]"

l_.str.139:                             ; @.str.139
	.asciz	"./include/relu.h"

l___PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE: ; @__PRETTY_FUNCTION__._ZN4ReluILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE
	.asciz	"tensor<real, N0, N1, N2, N3> &Relu<64, 2, 16, 16>::backward(tensor<real, N0, N1, N2, N3> &) [N0 = 64, N1 = 2, N2 = 16, N3 = 16]"

l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi: ; @__PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE7forwardER6tensorIfLi64ELi1ELi8ELi8EEi
	.asciz	"tensor<real, maxB, C, H / S, W / S> &MaxPooling2D<64, 1, 8, 8, 2>::forward(tensor<real, maxB, C, H, W> &, int) [maxB = 64, C = 1, H = 8, W = 8, S = 2]"

l_.str.140:                             ; @.str.140
	.asciz	"./include/max_pooling.h"

l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE: ; @__PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi1ELi8ELi8ELi2EE8backwardER6tensorIfLi64ELi1ELi4ELi4EE
	.asciz	"tensor<real, maxB, C, H, W> &MaxPooling2D<64, 1, 8, 8, 2>::backward(tensor<real, maxB, C, H / S, W / S> &) [maxB = 64, C = 1, H = 8, W = 8, S = 2]"

l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi: ; @__PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE7forwardER6tensorIfLi64ELi2ELi16ELi16EEi
	.asciz	"tensor<real, N0, N1, N2, N3> &Dropout<64, 2, 16, 16>::forward(tensor<real, N0, N1, N2, N3> &, int) [N0 = 64, N1 = 2, N2 = 16, N3 = 16]"

l_.str.141:                             ; @.str.141
	.asciz	"./include/dropout.h"

l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE: ; @__PRETTY_FUNCTION__._ZN7DropoutILi64ELi2ELi16ELi16EE8backwardER6tensorIfLi64ELi2ELi16ELi16EE
	.asciz	"tensor<real, N0, N1, N2, N3> &Dropout<64, 2, 16, 16>::backward(tensor<real, N0, N1, N2, N3> &) [N0 = 64, N1 = 2, N2 = 16, N3 = 16]"

l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi: ; @__PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.asciz	"tensor<real, M, N> &Linear<64, 10, 128, 1, 1>::forward(tensor<real, M, K0, K1, K2> &, int) [M = 64, N = 10, K0 = 128, K1 = 1, K2 = 1]"

l___unnamed_57:                         ; @20
	.asciz	";./include/linear.h;Linear<64, 10, 128, 1, 1>::forward_cpu_omp;229;1;;"

	.section	__DATA,__const
	.p2align	3                               ; @21
l___unnamed_14:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	70                              ; 0x46
	.quad	l___unnamed_57

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_58:                         ; @22
	.asciz	";./include/linear.h;Linear<64, 10, 128, 1, 1>::forward_cpu_omp;229;37;;"

	.section	__DATA,__const
	.p2align	3                               ; @23
l___unnamed_15:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	71                              ; 0x47
	.quad	l___unnamed_58

	.p2align	3                               ; @24
l___unnamed_13:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	70                              ; 0x46
	.quad	l___unnamed_57

	.section	__TEXT,__cstring,cstring_literals
l_.str.143:                             ; @.str.143
	.asciz	"./include/linear.h"

l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE: ; @__PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi10ELi1ELi1EE
	.asciz	"tensor<real, M, K0, K1, K2> &Linear<64, 10, 128, 1, 1>::backward(tensor<real, M, N> &) [M = 64, N = 10, K0 = 128, K1 = 1, K2 = 1]"

l___unnamed_59:                         ; @25
	.asciz	";./include/linear.h;Linear<64, 10, 128, 1, 1>::backward_cpu_omp;409;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @26
l___unnamed_19:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	71                              ; 0x47
	.quad	l___unnamed_59

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_60:                         ; @27
	.asciz	";./include/linear.h;Linear<64, 10, 128, 1, 1>::backward_cpu_omp;409;41;;"

	.section	__DATA,__const
	.p2align	3                               ; @28
l___unnamed_20:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	72                              ; 0x48
	.quad	l___unnamed_60

	.p2align	3                               ; @29
l___unnamed_16:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	71                              ; 0x47
	.quad	l___unnamed_59

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_61:                         ; @30
	.asciz	";./include/linear.h;Linear<64, 10, 128, 1, 1>::backward_cpu_omp;423;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @31
l___unnamed_21:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	71                              ; 0x47
	.quad	l___unnamed_61

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_62:                         ; @32
	.asciz	";./include/linear.h;Linear<64, 10, 128, 1, 1>::backward_cpu_omp;423;29;;"

	.section	__DATA,__const
	.p2align	3                               ; @33
l___unnamed_22:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	72                              ; 0x48
	.quad	l___unnamed_62

	.p2align	3                               ; @34
l___unnamed_17:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	71                              ; 0x47
	.quad	l___unnamed_61

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_63:                         ; @35
	.asciz	";./include/linear.h;Linear<64, 10, 128, 1, 1>::backward_cpu_omp;431;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @36
l___unnamed_23:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	71                              ; 0x47
	.quad	l___unnamed_63

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_64:                         ; @37
	.asciz	";./include/linear.h;Linear<64, 10, 128, 1, 1>::backward_cpu_omp;431;41;;"

	.section	__DATA,__const
	.p2align	3                               ; @38
l___unnamed_24:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	72                              ; 0x48
	.quad	l___unnamed_64

	.p2align	3                               ; @39
l___unnamed_18:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	71                              ; 0x47
	.quad	l___unnamed_63

	.section	__TEXT,__cstring,cstring_literals
l___PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi: ; @__PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE7forwardER6tensorIfLi64ELi10ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EEi
	.asciz	"tensor<real, maxB> &NLLSoftmax<64, 10>::forward(tensor<real, maxB, nC> &, tensor<idx_t, maxB> &, int) [maxB = 64, nC = 10]"

l_.str.147:                             ; @.str.147
	.asciz	"./include/nll_softmax.h"

l___PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE: ; @__PRETTY_FUNCTION__._ZN10NLLSoftmaxILi64ELi10EE8backwardER6tensorIfLi64ELi1ELi1ELi1EERS1_IiLi64ELi1ELi1ELi1EE
	.asciz	"tensor<real, maxB, nC> &NLLSoftmax<64, 10>::backward(tensor<real, maxB> &, tensor<idx_t, maxB> &) [maxB = 64, nC = 10]"

l___PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi: ; @__PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi
	.asciz	"tensor<real, N0, N1, N2, N3> &Relu<64, 32, 26, 26>::forward(tensor<real, N0, N1, N2, N3> &, int) [N0 = 64, N1 = 32, N2 = 26, N3 = 26]"

l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi: ; @__PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE7forwardER6tensorIfLi64ELi32ELi26ELi26EEi
	.asciz	"tensor<real, maxB, OC, H - K + 1, W - K + 1> &Convolution2D<64, 32, 26, 26, 3, 64>::forward(tensor<real, maxB, IC, H, W> &, int) [maxB = 64, IC = 32, H = 26, W = 26, K = 3, OC = 64]"

l___unnamed_65:                         ; @40
	.asciz	";./include/convolution.h;Convolution2D<64, 32, 26, 26, 3, 64>::forward_cpu_omp;232;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @41
l___unnamed_26:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	86                              ; 0x56
	.quad	l___unnamed_65

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_66:                         ; @42
	.asciz	";./include/convolution.h;Convolution2D<64, 32, 26, 26, 3, 64>::forward_cpu_omp;232;41;;"

	.section	__DATA,__const
	.p2align	3                               ; @43
l___unnamed_27:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	87                              ; 0x57
	.quad	l___unnamed_66

	.p2align	3                               ; @44
l___unnamed_25:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	86                              ; 0x56
	.quad	l___unnamed_65

	.section	__TEXT,__cstring,cstring_literals
l___PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi: ; @__PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi
	.asciz	"tensor<real, N0, N1, N2, N3> &Relu<64, 64, 24, 24>::forward(tensor<real, N0, N1, N2, N3> &, int) [N0 = 64, N1 = 64, N2 = 24, N3 = 24]"

l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi: ; @__PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE7forwardER6tensorIfLi64ELi64ELi24ELi24EEi
	.asciz	"tensor<real, maxB, C, H / S, W / S> &MaxPooling2D<64, 64, 24, 24, 2>::forward(tensor<real, maxB, C, H, W> &, int) [maxB = 64, C = 64, H = 24, W = 24, S = 2]"

l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi: ; @__PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi
	.asciz	"tensor<real, N0, N1, N2, N3> &Dropout<64, 64, 12, 12>::forward(tensor<real, N0, N1, N2, N3> &, int) [N0 = 64, N1 = 64, N2 = 12, N3 = 12]"

l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi: ; @__PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE7forwardER6tensorIfLi64ELi64ELi12ELi12EEi
	.asciz	"tensor<real, M, N> &Linear<64, 128, 64, 12, 12>::forward(tensor<real, M, K0, K1, K2> &, int) [M = 64, N = 128, K0 = 64, K1 = 12, K2 = 12]"

l___unnamed_67:                         ; @45
	.asciz	";./include/linear.h;Linear<64, 128, 64, 12, 12>::forward_cpu_omp;229;1;;"

	.section	__DATA,__const
	.p2align	3                               ; @46
l___unnamed_29:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	72                              ; 0x48
	.quad	l___unnamed_67

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_68:                         ; @47
	.asciz	";./include/linear.h;Linear<64, 128, 64, 12, 12>::forward_cpu_omp;229;37;;"

	.section	__DATA,__const
	.p2align	3                               ; @48
l___unnamed_30:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	73                              ; 0x49
	.quad	l___unnamed_68

	.p2align	3                               ; @49
l___unnamed_28:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	72                              ; 0x48
	.quad	l___unnamed_67

	.section	__TEXT,__cstring,cstring_literals
l___PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi: ; @__PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.asciz	"tensor<real, N0, N1, N2, N3> &Relu<64, 128, 1, 1>::forward(tensor<real, N0, N1, N2, N3> &, int) [N0 = 64, N1 = 128, N2 = 1, N3 = 1]"

l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi: ; @__PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE7forwardER6tensorIfLi64ELi128ELi1ELi1EEi
	.asciz	"tensor<real, N0, N1, N2, N3> &Dropout<64, 128, 1, 1>::forward(tensor<real, N0, N1, N2, N3> &, int) [N0 = 64, N1 = 128, N2 = 1, N3 = 1]"

l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE: ; @__PRETTY_FUNCTION__._ZN7DropoutILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.asciz	"tensor<real, N0, N1, N2, N3> &Dropout<64, 128, 1, 1>::backward(tensor<real, N0, N1, N2, N3> &) [N0 = 64, N1 = 128, N2 = 1, N3 = 1]"

l___PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE: ; @__PRETTY_FUNCTION__._ZN4ReluILi64ELi128ELi1ELi1EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.asciz	"tensor<real, N0, N1, N2, N3> &Relu<64, 128, 1, 1>::backward(tensor<real, N0, N1, N2, N3> &) [N0 = 64, N1 = 128, N2 = 1, N3 = 1]"

l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE: ; @__PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi128ELi1ELi1EE
	.asciz	"tensor<real, M, K0, K1, K2> &Linear<64, 128, 64, 12, 12>::backward(tensor<real, M, N> &) [M = 64, N = 128, K0 = 64, K1 = 12, K2 = 12]"

l___unnamed_69:                         ; @50
	.asciz	";./include/linear.h;Linear<64, 128, 64, 12, 12>::backward_cpu_omp;409;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @51
l___unnamed_34:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	73                              ; 0x49
	.quad	l___unnamed_69

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_70:                         ; @52
	.asciz	";./include/linear.h;Linear<64, 128, 64, 12, 12>::backward_cpu_omp;409;41;;"

	.section	__DATA,__const
	.p2align	3                               ; @53
l___unnamed_35:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	74                              ; 0x4a
	.quad	l___unnamed_70

	.p2align	3                               ; @54
l___unnamed_31:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	73                              ; 0x49
	.quad	l___unnamed_69

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_71:                         ; @55
	.asciz	";./include/linear.h;Linear<64, 128, 64, 12, 12>::backward_cpu_omp;423;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @56
l___unnamed_36:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	73                              ; 0x49
	.quad	l___unnamed_71

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_72:                         ; @57
	.asciz	";./include/linear.h;Linear<64, 128, 64, 12, 12>::backward_cpu_omp;423;29;;"

	.section	__DATA,__const
	.p2align	3                               ; @58
l___unnamed_37:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	74                              ; 0x4a
	.quad	l___unnamed_72

	.p2align	3                               ; @59
l___unnamed_32:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	73                              ; 0x49
	.quad	l___unnamed_71

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_73:                         ; @60
	.asciz	";./include/linear.h;Linear<64, 128, 64, 12, 12>::backward_cpu_omp;431;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @61
l___unnamed_38:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	73                              ; 0x49
	.quad	l___unnamed_73

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_74:                         ; @62
	.asciz	";./include/linear.h;Linear<64, 128, 64, 12, 12>::backward_cpu_omp;431;41;;"

	.section	__DATA,__const
	.p2align	3                               ; @63
l___unnamed_39:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	74                              ; 0x4a
	.quad	l___unnamed_74

	.p2align	3                               ; @64
l___unnamed_33:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	73                              ; 0x49
	.quad	l___unnamed_73

	.section	__TEXT,__cstring,cstring_literals
l___PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE: ; @__PRETTY_FUNCTION__._ZN7DropoutILi64ELi64ELi12ELi12EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE
	.asciz	"tensor<real, N0, N1, N2, N3> &Dropout<64, 64, 12, 12>::backward(tensor<real, N0, N1, N2, N3> &) [N0 = 64, N1 = 64, N2 = 12, N3 = 12]"

l___PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE: ; @__PRETTY_FUNCTION__._ZN12MaxPooling2DILi64ELi64ELi24ELi24ELi2EE8backwardER6tensorIfLi64ELi64ELi12ELi12EE
	.asciz	"tensor<real, maxB, C, H, W> &MaxPooling2D<64, 64, 24, 24, 2>::backward(tensor<real, maxB, C, H / S, W / S> &) [maxB = 64, C = 64, H = 24, W = 24, S = 2]"

l___PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE: ; @__PRETTY_FUNCTION__._ZN4ReluILi64ELi64ELi24ELi24EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE
	.asciz	"tensor<real, N0, N1, N2, N3> &Relu<64, 64, 24, 24>::backward(tensor<real, N0, N1, N2, N3> &) [N0 = 64, N1 = 64, N2 = 24, N3 = 24]"

l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE: ; @__PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE8backwardER6tensorIfLi64ELi64ELi24ELi24EE
	.asciz	"tensor<real, maxB, IC, H, W> &Convolution2D<64, 32, 26, 26, 3, 64>::backward(tensor<real, maxB, OC, H - K + 1, W - K + 1> &) [maxB = 64, IC = 32, H = 26, W = 26, K = 3, OC = 64]"

l___unnamed_75:                         ; @65
	.asciz	";./include/convolution.h;Convolution2D<64, 32, 26, 26, 3, 64>::backward_cpu_omp;417;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @66
l___unnamed_43:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	87                              ; 0x57
	.quad	l___unnamed_75

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_76:                         ; @67
	.asciz	";./include/convolution.h;Convolution2D<64, 32, 26, 26, 3, 64>::backward_cpu_omp;417;41;;"

	.section	__DATA,__const
	.p2align	3                               ; @68
l___unnamed_44:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	88                              ; 0x58
	.quad	l___unnamed_76

	.p2align	3                               ; @69
l___unnamed_40:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	87                              ; 0x57
	.quad	l___unnamed_75

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_77:                         ; @70
	.asciz	";./include/convolution.h;Convolution2D<64, 32, 26, 26, 3, 64>::backward_cpu_omp;452;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @71
l___unnamed_45:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	87                              ; 0x57
	.quad	l___unnamed_77

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_78:                         ; @72
	.asciz	";./include/convolution.h;Convolution2D<64, 32, 26, 26, 3, 64>::backward_cpu_omp;452;29;;"

	.section	__DATA,__const
	.p2align	3                               ; @73
l___unnamed_46:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	88                              ; 0x58
	.quad	l___unnamed_78

	.p2align	3                               ; @74
l___unnamed_41:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	87                              ; 0x57
	.quad	l___unnamed_77

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_79:                         ; @75
	.asciz	";./include/convolution.h;Convolution2D<64, 32, 26, 26, 3, 64>::backward_cpu_omp;465;5;;"

	.section	__DATA,__const
	.p2align	3                               ; @76
l___unnamed_47:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	87                              ; 0x57
	.quad	l___unnamed_79

	.section	__TEXT,__cstring,cstring_literals
l___unnamed_80:                         ; @77
	.asciz	";./include/convolution.h;Convolution2D<64, 32, 26, 26, 3, 64>::backward_cpu_omp;465;41;;"

	.section	__DATA,__const
	.p2align	3                               ; @78
l___unnamed_48:
	.long	0                               ; 0x0
	.long	514                             ; 0x202
	.long	0                               ; 0x0
	.long	88                              ; 0x58
	.quad	l___unnamed_80

	.p2align	3                               ; @79
l___unnamed_42:
	.long	0                               ; 0x0
	.long	2                               ; 0x2
	.long	0                               ; 0x0
	.long	87                              ; 0x57
	.quad	l___unnamed_79

	.section	__TEXT,__cstring,cstring_literals
l___PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE: ; @__PRETTY_FUNCTION__._ZN4ReluILi64ELi32ELi26ELi26EE8backwardER6tensorIfLi64ELi32ELi26ELi26EE
	.asciz	"tensor<real, N0, N1, N2, N3> &Relu<64, 32, 26, 26>::backward(tensor<real, N0, N1, N2, N3> &) [N0 = 64, N1 = 32, N2 = 26, N3 = 26]"

l___func__.main:                        ; @__func__.main
	.asciz	"main"

l_.str.156:                             ; @.str.156
	.asciz	"mnist.cc"

l_.str.157:                             ; @.str.157
	.asciz	"model building starts"

l_.str.158:                             ; @.str.158
	.asciz	"model building ends"

l_.str.159:                             ; @.str.159
	.asciz	"training starts"

l_.str.160:                             ; @.str.160
	.asciz	"training ends"

l_.str.161:                             ; @.str.161
	.asciz	"Train Epoch %ld starts"

l_.str.162:                             ; @.str.162
	.asciz	"Train Epoch %ld batch %ld (samples %ld - %ld) starts"

l_.str.163:                             ; @.str.163
	.asciz	"Train Epoch: %ld [%ld/%ld (%.0f%%)]\tLoss: %.6f"

l_.str.164:                             ; @.str.164
	.asciz	"Train Epoch %ld batch %ld (samples %ld - %ld) ends"

l_.str.165:                             ; @.str.165
	.asciz	"Train Epoch %ld ends"

l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv: ; @__PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi1ELi28ELi28ELi3ELi32EE6updateEv
	.asciz	"void Convolution2D<64, 1, 28, 28, 3, 32>::update() [maxB = 64, IC = 1, H = 28, W = 28, K = 3, OC = 32]"

l___PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv: ; @__PRETTY_FUNCTION__._ZN13Convolution2DILi64ELi32ELi26ELi26ELi3ELi64EE6updateEv
	.asciz	"void Convolution2D<64, 32, 26, 26, 3, 64>::update() [maxB = 64, IC = 32, H = 26, W = 26, K = 3, OC = 64]"

l___PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv: ; @__PRETTY_FUNCTION__._ZN6LinearILi64ELi128ELi64ELi12ELi12EE6updateEv
	.asciz	"void Linear<64, 128, 64, 12, 12>::update() [M = 64, N = 128, K0 = 64, K1 = 12, K2 = 12]"

l___PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv: ; @__PRETTY_FUNCTION__._ZN6LinearILi64ELi10ELi128ELi1ELi1EE6updateEv
	.asciz	"void Linear<64, 10, 128, 1, 1>::update() [M = 64, N = 10, K0 = 128, K1 = 1, K2 = 1]"

l_.str.166:                             ; @.str.166
	.asciz	"sample %d image %d pred %d truth %d"

l_.str.167:                             ; @.str.167
	.asciz	"Test Epoch %ld starts"

l_.str.168:                             ; @.str.168
	.asciz	"Test Epoch %ld batch %ld (samples %ld - %ld) starts"

l_.str.169:                             ; @.str.169
	.asciz	"Test Epoch %ld batch %ld (samples %ld - %ld) ends"

l___func__._ZL4testILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggeril: ; @__func__._ZL4testILi64ELi1ELi28ELi28ELi10EEvP5MNISTIXT_EXT0_EXT1_EXT2_EXT3_EER13mnist_datasetIXT_EXT0_EXT1_EXT2_EEiR6loggeril
	.asciz	"test"

l_.str.170:                             ; @.str.170
	.asciz	"n_samples == data.n_data"

l_.str.171:                             ; @.str.171
	.asciz	"Test set: Average loss: %.4f, Accuracy: %ld/%ld (%.0f%%)"

l_.str.172:                             ; @.str.172
	.asciz	"Test Epoch %ld ends"

.subsections_via_symbols
